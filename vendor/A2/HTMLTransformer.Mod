<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <!--
        IMPORTANT: THESE TEMPLATES MAY ONLY BE USED WITH THE WRITTEN PERMISSION
        OF VISUAL COMMUNICATIONS (CC),
        HTTP://WWW.CD.ETHZ.CH
    -->
    <!-- 18.09.2007 | ys, pr -->
    <!-- copyright, author, e-mail address -->
    <meta name="copyright" content="VC Team (CC) - Design, Yves Serrano (ID) - Programmierung" />
    <meta name="author" content=" VC Team (CC) - Design, Yves Serrano (ID) - Programmierung" />
    <meta name="version" content="WebCD 1.1.2" />
    <link rev="made" href="mailto:web_beratung@cc.ethz.ch" />
    <!-- charset, home, base -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="home" href="http://www.ethz.ch/" />
    <base target="_top" />
    <!-- style sheets -->
    <link rel="stylesheet" href="/trac/lecturers/a2/chrome/css/colors_c020.css" type="text/css" />
    <script src="/trac/lecturers/a2/chrome/scripts/setup-webcd_apps.js" type="text/JavaScript"></script>
    <style type="text/css">
    /*<![CDATA[*/
    <!--
    @import url("/trac/lecturers/a2/chrome/css/modernbrowsers.css");
    @import url("/trac/lecturers/a2/chrome/css/silva.css");
    @import url("/trac/lecturers/a2/chrome/css/colors_c020.css");
    @import url("/trac/lecturers/a2/chrome/css/applications.css");
    @import url("/trac/lecturers/a2/chrome/css/customstyles.css");
    #head { background: url(/trac/lecturers/a2/chrome/images/app_head_bg_c020.jpg) no-repeat; background-position: 220px;}
    /* navblock margin-bottom=height of unitlogo + 70px */
    div.navblock, .margins div.contentblock-1col { margin-bottom:120px;}
    .mainnav, .screenhead, .color5-back, .color4-back, .color3-back, .color2-back, .color1-back, .servicenav, .transparent {
       background-image: url(/trac/lecturers/a2/chrome/images/transparent.gif)
    }
    /* navblock margin-bottom=height of unitlogo + 70px */
    div.navblock, .margins div.contentblock-1col { margin-bottom:120px;}
    -->
    /*]]>*/
    </style>
    <!-- print css -->
    <link rel="stylesheet" media="print" href="/trac/lecturers/a2/chrome/css/print.css" type="text/css" />
    <!-- extra styles for ie6 & ie7 -->
    <!--[if gte IE 5.5]><![if lt IE 7]>
    <style type="text/css">
    div#pagetop {
    right: auto; bottom: auto;
    left: expression( ( 0 - pagetop.offsetWidth + ( document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body.clientWidth ) + ( ignoreMe2 = document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft ) ) + 'px' );
    top: expression( ( 0 - pagetop.offsetHeight + ( document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight ) + ( ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop ) ) + 'px' );
    }
    </style>
    <![endif]><![endif]-->
    <!--[if gte IE 7]>
    <link rel="stylesheet" href="${href.chrome('css/ie7.css')}" type="text/css" />
    <![endif]-->
    <!-- keywords, description -->
    <meta name="Keywords" content="WebCD, Templates" />
    <meta name="Description" content="WebCD" />
    <title>
      HTMLTransformer.Mod in trunk/source
     – a2
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/trac/lecturers/a2/search" />
        <link rel="help" href="/trac/lecturers/a2/wiki/TracGuide" />
        <link rel="alternate" href="/trac/lecturers/a2/browser/trunk/source/HTMLTransformer.Mod?format=txt" type="text/plain" title="Reiner Text" /><link rel="alternate" href="/trac/lecturers/a2/export/7648/trunk/source/HTMLTransformer.Mod" type="audio/x-mod; charset=utf-8" title="Ursprüngliches Format" />
        <link rel="start" href="/trac/lecturers/a2/wiki" />
        <link rel="stylesheet" href="/trac/lecturers/a2/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/lecturers/a2/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/trac/lecturers/a2/chrome/common/css/browser.css" type="text/css" />
        <link rel="prev" href="/trac/lecturers/a2/browser/trunk/source/HTMLTransformer.Mod?rev=6094" title="Revision 6094" />
        <link rel="shortcut icon" href="/trac/lecturers/a2/chrome/common/trac.ico" type="image/x-icon" />
        <link rel="icon" href="/trac/lecturers/a2/chrome/common/trac.ico" type="image/x-icon" />
    <script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/babel.js"></script><script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/messages/de.js"></script><script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript" src="/trac/lecturers/a2/chrome/common/js/folding.js"></script>
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $(".trac-toggledeleted").show().click(function() {
                  $(this).siblings().find(".trac-deleted").toggle();
                  return false;
        }).click();
        $("#jumploc input").hide();
        $("#jumploc select").change(function () {
          this.parentNode.parentNode.submit();
        });
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
      });
    </script>
    <!-- favicon-->
    <link rel="SHORTCUT ICON" href="/trac/lecturers/a2/chrome/images/favicon/kuppel_icon_c020.ico" />
    <link rel="icon" href="/trac/lecturers/a2/chrome/images/favicon/kuppel_icon_c020.ico" type="image/x-icon" />
    <link rel="stylesheet" href="/trac/lecturers/a2/chrome/css/customstyles.css" type="text/css" />
  </head>
  <body>
    <!-- ** START margin important margins class -->
    <div class="margins">
      <a name="top" id="top"></a>
        <!-- START header -->
        <div id="head">
       <a href="http://www.ethz.ch/"><img alt="ETH Homepage" src="/trac/lecturers/a2/chrome/images/app_head_ethlogo_c020.jpg" border="0" /></a>
            <div id="printhead">
          <img src="/trac/lecturers/a2/chrome/images/ethlogo-print.gif" alt="printethlogo" width="220" height="57" />
            </div>
       <!-- <div id="headerimage"></div> -->
       <div id="sitename"><a href="https://trac.inf.ethz.ch/trac/lecturers/a2">a2</a></div>
        </div>
        <!-- begin servicenav, optional horizontal service nav -->
        <div id="servicenav" class="color2-back">
    <span class="servicenav_items">
        <a href="/trac/lecturers/a2/login">Anmelden</a>
        •
        <a href="/trac/lecturers/a2/prefs">Einstellungen</a>
        •
        <a href="/trac/lecturers/a2/wiki/TracGuide">Hilfe/Anleitung</a>
        •
        <a href="/trac/lecturers/a2/about">Über Trac</a>
    </span>
  </div>
        <!-- end servicenav -->
        <!-- begin topnav, optional horizontal top nav -->
        <div id="topnav" class="color4-back">
     <span class="first"><a href="/trac/lecturers/a2/wiki">Wiki</a></span><span class="active"><a href="/trac/lecturers/a2/browser">Quellen durchsehen</a></span><span class="last"><a href="/trac/lecturers/a2/report">Tickets anzeigen</a></span>
  </div>
        <!-- end topnav -->
                <!-- END header -->
      <div class="clearright"></div>
      <!-- *** START contentblock -->
        <!-- begin leftnav, optional vertical nav -->
        <!-- end leftnav -->
      <div class="contentblock-1col">
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Kontext-Navigation</h2>
          <ul>
            <li class="first "><span>&larr; <a class="prev" href="/trac/lecturers/a2/browser/trunk/source/HTMLTransformer.Mod?rev=6094" title="Revision 6094">Vorige Revision</a></span></li><li><span class="missing">Nächste Revision &rarr;</span></li><li><a href="/trac/lecturers/a2/browser/trunk/source/HTMLTransformer.Mod?annotate=blame" title="Jede Zeile mit der Revision ihrer letzten Änderung anzeigen (dies kann lange dauern ...)">Annotation</a></li><li class="last"><a href="/trac/lecturers/a2/log/trunk/source/HTMLTransformer.Mod">Änderungshistorie</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="browser">
          <h1>
<a class="pathentry first" href="/trac/lecturers/a2/browser?order=name" title="Springe zum Repository-Wurzelverzeichnis">source:</a>
<a class="pathentry" href="/trac/lecturers/a2/browser/trunk?order=name" title="trunk ansehen">trunk</a><span class="pathentry sep">/</span><a class="pathentry" href="/trac/lecturers/a2/browser/trunk/source?order=name" title="source ansehen">source</a><span class="pathentry sep">/</span><a class="pathentry" href="/trac/lecturers/a2/browser/trunk/source/HTMLTransformer.Mod?order=name" title="HTMLTransformer.Mod ansehen">HTMLTransformer.Mod</a>
<span class="pathentry sep">@</span>
  <a class="pathentry" href="/trac/lecturers/a2/changeset/7648" title="Changeset 7648 ansehen">7648</a>
<br style="clear: both" />
</h1>
        <div id="jumprev">
          <form action="" method="get">
            <div>
              <label for="rev">
                Dargestellte Revision:</label>
              <input type="text" id="rev" name="rev" size="6" />
            </div>
          </form>
        </div>
        <div id="jumploc">
          <form action="" method="get">
            <div class="buttons">
              <label for="preselected">Wechseln zu:</label>
              <select id="preselected" name="preselected">
                <option selected="selected"></option>
                <optgroup label="branches">
                  <option value="/trac/lecturers/a2/browser/trunk">trunk</option><option value="/trac/lecturers/a2/browser/branches/ObeDAV">branches/ObeDAV</option><option value="/trac/lecturers/a2/browser/branches/ssa">branches/ssa</option><option value="/trac/lecturers/a2/browser/branches/students">branches/students</option>
                </optgroup><optgroup label="tags">
                  <option value="/trac/lecturers/a2/browser/tags/Release_2008-01-23?rev=775">tags/Release_2008-01-23</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-02-25?rev=1008">tags/Release_2008-02-25</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-03-27?rev=1132">tags/Release_2008-03-27</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-05-30?rev=1236">tags/Release_2008-05-30</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-06-26?rev=1322">tags/Release_2008-06-26</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-07-24?rev=1417">tags/Release_2008-07-24</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-08-27?rev=1565">tags/Release_2008-08-27</option><option value="/trac/lecturers/a2/browser/tags/Release_2008-12-02?rev=1751">tags/Release_2008-12-02</option><option value="/trac/lecturers/a2/browser/tags/Release_2009-02-19?rev=2258">tags/Release_2009-02-19</option>
                </optgroup>
              </select>
              <input type="submit" value="Los!" title="Zum ausgewählten vorselektierten Pfad springen" />
            </div>
          </form>
        </div>
      <table id="info" summary="Versionsinfo">
        <tr>
          <th scope="col">Revision <a href="/trac/lecturers/a2/changeset/7618">7618</a>,
            <span title="97097 Byte">94.8 KB</span>
            erstellt von felixf vor <a class="timeline" href="/trac/lecturers/a2/timeline?from=2018-02-20T23%3A26%3A16%2B01%3A00&amp;precision=second" title="2018-02-20T23:26:16+01:00 im Journal">4 Wochen</a>
            (<a href="/trac/lecturers/a2/changeset/7618/trunk/source/HTMLTransformer.Mod">Diff</a>)</th>
        </tr>
        <tr>
          <td class="message searchable">
              <p>
patched all method visibility conflicts: extending methods keep visibility of super method.<br />
</p>
          </td>
        </tr>
      </table>
      <div id="preview" class="searchable">
        
  <table class="code"><thead><tr><th class="lineno" title="Zeilennummern">Zeile</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>MODULE HTMLTransformer; (** AUTHOR "Simon L. Keel"; PURPOSE "transforming HTML to BB-text"; *)</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td>IMPORT</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td>        WebBrowserComponents, XMLTransformer,</td></tr><tr><th id="L5"><a href="#L5">5</a></th><td>        Strings, XML, XMLObjects, DynamicStrings, UTF8Strings, WMGraphics, KernelLog, WMEvents, WMCharCodes,</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td>        WMComponents, WMRectangles, WMTextView, TextUtilities, Texts, WMStandardComponents,</td></tr><tr><th id="L7"><a href="#L7">7</a></th><td>        WMMessages, Streams, WMEditors, WMPopups, Messages := WMMessages;</td></tr><tr><th id="L8"><a href="#L8">8</a></th><td></td></tr><tr><th id="L9"><a href="#L9">9</a></th><td>CONST</td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>        verbose = TRUE;</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td>        (* default generic font families *)</td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>                (* Note: All font-names are case-sensitive! *)</td></tr><tr><th id="L13"><a href="#L13">13</a></th><td>        defSerif = "TimesNewRoman";</td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>        defSansSerif = "Arial";</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>        defCursive = "ComicSansMS";</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td>        defFantasy = "Arial";</td></tr><tr><th id="L17"><a href="#L17">17</a></th><td>        defMonospace = "CourierNew";</td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>        defaultFont = "Oberon"; (* the default browser-font is defSerif; defaultFont is only used, if defSerif doesn't exist! *)</td></tr><tr><th id="L19"><a href="#L19">19</a></th><td></td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>        (* current text is *)</td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>        cText = 0;</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>        cNewLine = 1;</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td>        cParagraph = 2;</td></tr><tr><th id="L24"><a href="#L24">24</a></th><td></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>        alignLeft = 0;</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>        alignCenter = 1;</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td>        alignRight = 2;</td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>        alignJustify = 3;</td></tr><tr><th id="L29"><a href="#L29">29</a></th><td></td></tr><tr><th id="L30"><a href="#L30">30</a></th><td>VAR</td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>        serif : ARRAY 64 OF CHAR;</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>        sansSerif : ARRAY 64 OF CHAR;</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td>        cursive : ARRAY 64 OF CHAR;</td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>        fantasy : ARRAY 64 OF CHAR;</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>        monospace : ARRAY 64 OF CHAR;</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>TYPE</td></tr><tr><th id="L38"><a href="#L38">38</a></th><td>        String = Strings.String;</td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>        VisualComponent = WMComponents.VisualComponent;</td></tr><tr><th id="L40"><a href="#L40">40</a></th><td></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>        CharsetConvProc = PROCEDURE {DELEGATE} (VAR input : ARRAY OF CHAR) : String;</td></tr><tr><th id="L42"><a href="#L42">42</a></th><td></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>        TextStyle = RECORD</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>                font : String;</td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>                size : LONGINT;</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>                style : LONGINT;</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>                color : LONGINT;</td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>                bgcolorPresent : BOOLEAN;</td></tr><tr><th id="L49"><a href="#L49">49</a></th><td>                bgcolor : LONGINT;</td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>                link : String;</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>                linktarget : String;</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>                shift : LONGINT;</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>                align : LONGINT;</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>                indent : LONGINT;</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>                enumtype : LONGINT;</td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>                preformatted : BOOLEAN;</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>                form : Form;</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td>        END;</td></tr><tr><th id="L59"><a href="#L59">59</a></th><td></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>        OLULStackItem=POINTER TO RECORD</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>                prev : OLULStackItem;</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>                value : LONGINT;</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>        END;</td></tr><tr><th id="L64"><a href="#L64">64</a></th><td></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>        EmbeddedObject*=POINTER TO RECORD</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>                prev* : EmbeddedObject;</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>                object* : VisualComponent;</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>        END;</td></tr><tr><th id="L69"><a href="#L69">69</a></th><td></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>        Transformer* = OBJECT</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td>        VAR</td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>                doc: XML.Container;</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>                url : String;</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td>                baseAddress : String;</td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>                baseTarget : String;</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>                sequencer : WMMessages.MsgSequencer;</td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>                initWidth : LONGINT;</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>                loadLink* : WMEvents.EventListener;</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>                charset : String;</td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>                frameName : String;</td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>                txtElem: XML.Element;</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>                paragraph : XML.Element;</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>                title-: String;</td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>                pageBgColor- : LONGINT;</td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>                bgImage- : String;</td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>                embeddedObjectsList- : EmbeddedObject;</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>                textColor : LONGINT;</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>                linkColor : LONGINT;</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td>                vlinkColor : LONGINT;</td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>                alinkColor : LONGINT;</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>                crlfStr : String;</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>                crlfDoubleStr : String;</td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>                charsetConv : CharsetConvProc;</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>                currentText : LONGINT;</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>                olulStackTop : OLULStackItem;</td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>                ulDepth : LONGINT;</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>                inDL : BOOLEAN;</td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>                currentAlign : LONGINT;</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>                currentIndent : LONGINT;</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>                form : Form;</td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>                formButton : FormButton;</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>                formCheckbox : FormCheckbox;</td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>                formTextInput : FormTextInput;</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>                formRadioButton : FormRadioButton;</td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>                formMenu : FormMenu;</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>                formHiddenControl : FormHiddenControl;</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>                initAlignment : LONGINT;</td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>                isTableContent : BOOLEAN;</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>                PROCEDURE &amp;Init*(doc: XML.Container; url : String; initWidth : LONGINT; loadLink : WMEvents.EventListener; charset : String; frameName : String);</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>                VAR</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>                        crlf : ARRAY 5 OF CHAR;</td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>                BEGIN</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>                        SELF.doc := doc;</td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>                        SELF.url := url;</td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>                        SELF.baseAddress := url;</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>                        SELF.initWidth := initWidth;</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>                        SELF.loadLink := loadLink;</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>                        crlf[0] := 0DX; crlf[1] := 0AX; crlf[2] := 0X;</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>                        crlfStr := Strings.NewString(crlf);</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>                        crlf[2] := 0DX; crlf[3] := 0AX; crlf[4] := 0X;</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>                        crlfDoubleStr := Strings.NewString(crlf);</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>                        IF charset # NIL THEN</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>                                charsetConv := GetCharsetConverter(charset^);</td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>                                SELF.charset := charset;</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>                        ELSE</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>                                charsetConv := GetCharsetConverter("iso8859-1");</td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>                                SELF.charset := Strings.NewString("iso8859-1");</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>                        END;</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>                        SELF.frameName := frameName;</td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>                        textColor := 0000000H;</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>                        linkColor := 00000EEH;</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>                        vlinkColor := 0551A8BH;</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>                        alinkColor := 0EE0000H;</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>                        pageBgColor := 0FFFFFFH;</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>                        currentText := cParagraph;</td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>                        ulDepth := 0;</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>                        inDL := FALSE;</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>                        initAlignment := alignLeft;</td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>                END Init;</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td></td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>                PROCEDURE Transform*() : XML.Document;</td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>                VAR</td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>                        bbtTxt: XML.Document;</td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>                        xmlDecl: XML.XMLDecl;</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>                        pi: XML.ProcessingInstruction;</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>                        s: String;</td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>                        style : TextStyle;</td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>                BEGIN</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>                        NEW(bbtTxt);</td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>                        (* add header *)</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>                        NEW(xmlDecl);</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>                        s := Strings.NewString("1.0");</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>                        xmlDecl.SetVersion(s^);</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>                        s := Strings.NewString("UTF-8");</td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>                        xmlDecl.SetEncoding(s^);</td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>                        bbtTxt.AddContent(xmlDecl);</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>                        NEW(pi);</td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>                        s := Strings.NewString("bluebottle format");</td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>                        pi.SetTarget(s^);</td></tr><tr><th id="L161"><a href="#L161">161</a></th><td>                        s := Strings.NewString('version="0.1"');</td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>                        pi.SetInstruction(s^);</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>                        bbtTxt.AddContent(pi);</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>                        NEW(pi);</td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>                        s := Strings.NewString('xml-stylesheet type="text/xsl"');</td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>                        pi.SetTarget(s^);</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>                        s := Strings.NewString('href="http://bluebottle.ethz.ch/bluebottle.xsl"');</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>                        pi.SetInstruction(s^);</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>                        bbtTxt.AddContent(pi);</td></tr><tr><th id="L170"><a href="#L170">170</a></th><td></td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>                        NEW(txtElem);</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>                        s := Strings.NewString("Text");</td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>                        txtElem.SetName(s^);</td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>                        bbtTxt.AddContent(txtElem);</td></tr><tr><th id="L175"><a href="#L175">175</a></th><td></td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>                        style.font := Strings.NewString(serif);</td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>                        style.size := 3;</td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>                        style.style := 0;</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>                        style.color := textColor;</td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>                        style.bgcolorPresent := FALSE;</td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>                        style.shift := 0;</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>                        style.align := initAlignment;</td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>                        style.indent := 0;</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>                        style.enumtype := 0;</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>                        style.preformatted := FALSE;</td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>                        style.form := form;</td></tr><tr><th id="L187"><a href="#L187">187</a></th><td></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>                        currentAlign := -1;</td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>                        currentIndent := -1;</td></tr><tr><th id="L190"><a href="#L190">190</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L191"><a href="#L191">191</a></th><td></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>                        TransformContent(doc, style);</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>                        RETURN bbtTxt;</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>                END Transform;</td></tr><tr><th id="L196"><a href="#L196">196</a></th><td></td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>                PROCEDURE TransformContent(container : XML.Container; style : TextStyle);</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>                VAR</td></tr><tr><th id="L199"><a href="#L199">199</a></th><td>                        enum: XMLObjects.Enumerator;</td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>                        p : ANY;</td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>                BEGIN</td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>                        enum := container.GetContents();</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L205"><a href="#L205">205</a></th><td>                                IF p IS XML.Element THEN</td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>                                        TransformElement(p(XML.Element), style);</td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>                                ELSIF (p IS XML.ArrayChars) &amp; ~(p IS XML.Comment) THEN</td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>                                        AddText(p(XML.ArrayChars).GetStr(), style);</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>                                END;</td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>                        END;</td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>                END TransformContent;</td></tr><tr><th id="L212"><a href="#L212">212</a></th><td></td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>                PROCEDURE GetText(container : XML.Container) : String;</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td>                VAR</td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>                        enum: XMLObjects.Enumerator;</td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>                        p : ANY;</td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>                        text, s : String;</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>                BEGIN</td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>                        text := Strings.NewString("");</td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>                        enum := container.GetContents();</td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>                                IF (p IS XML.ArrayChars) &amp; ~(p IS XML.Comment) THEN</td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>                                        s := p(XML.ArrayChars).GetStr();</td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>                                        text := Strings.ConcatToNew(text^, s^);</td></tr><tr><th id="L226"><a href="#L226">226</a></th><td>                                END;</td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>                        END;</td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>                        RETURN text;</td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>                END GetText;</td></tr><tr><th id="L230"><a href="#L230">230</a></th><td></td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>                PROCEDURE TransformElement(elem : XML.Element; style : TextStyle);</td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>                VAR</td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>                        name, s, s2, s3 : String;</td></tr><tr><th id="L234"><a href="#L234">234</a></th><td>                        enum: XMLObjects.Enumerator;</td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>                        p : ANY;</td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>                        i, j, res : LONGINT;</td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>                        exitLoop : BOOLEAN;</td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>                        aoc : ARRAY 16 OF CHAR;</td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>                        olulStackItem : OLULStackItem;</td></tr><tr><th id="L240"><a href="#L240">240</a></th><td>                        b : BOOLEAN;</td></tr><tr><th id="L241"><a href="#L241">241</a></th><td>                        oldForm : Form;</td></tr><tr><th id="L242"><a href="#L242">242</a></th><td></td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>                        PROCEDURE ul;</td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>                        BEGIN</td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>                                IF olulStackTop = NIL THEN</td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>                                ELSE</td></tr><tr><th id="L248"><a href="#L248">248</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>                                END;</td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>                                INC(style.indent);</td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>                                INC(ulDepth);</td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>                                s := GetElemAttributeValue(elem, "type", TRUE);</td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>                                IF s#NIL THEN</td></tr><tr><th id="L254"><a href="#L254">254</a></th><td>                                        IF s^="square" THEN</td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>                                                style.enumtype := 1;</td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>                                        ELSIF s^="circle" THEN</td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>                                                style.enumtype := 2;</td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>                                        ELSE (* "disc" *)</td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>                                                style.enumtype := 0;</td></tr><tr><th id="L260"><a href="#L260">260</a></th><td>                                        END;</td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>                                ELSE</td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>                                        IF ulDepth = 2 THEN</td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>                                                style.enumtype := 2; (* circle *)</td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>                                        ELSIF ulDepth &gt;= 3 THEN</td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>                                                style.enumtype := 1; (* square *)</td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>                                        ELSE</td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>                                                style.enumtype := 0; (* "disc" *)</td></tr><tr><th id="L268"><a href="#L268">268</a></th><td>                                        END;</td></tr><tr><th id="L269"><a href="#L269">269</a></th><td>                                END;</td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>                                NEW(olulStackItem);</td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>                                olulStackItem.prev := olulStackTop;</td></tr><tr><th id="L272"><a href="#L272">272</a></th><td>                                olulStackTop := olulStackItem;</td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>                                olulStackItem.value := 1;</td></tr><tr><th id="L274"><a href="#L274">274</a></th><td>                                TransformContent(elem, style);</td></tr><tr><th id="L275"><a href="#L275">275</a></th><td>                                olulStackTop := olulStackTop.prev;</td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>                                DEC(ulDepth);</td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>                                IF olulStackTop = NIL THEN</td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L279"><a href="#L279">279</a></th><td>                                ELSE</td></tr><tr><th id="L280"><a href="#L280">280</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L281"><a href="#L281">281</a></th><td>                                END;</td></tr><tr><th id="L282"><a href="#L282">282</a></th><td>                        END ul;</td></tr><tr><th id="L283"><a href="#L283">283</a></th><td></td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>                        PROCEDURE textInput(isPassword : BOOLEAN);</td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>                        BEGIN</td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L287"><a href="#L287">287</a></th><td>                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L288"><a href="#L288">288</a></th><td>                                IF s2 = NIL THEN s2 := Strings.NewString("") END;</td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>                                s3 := GetElemAttributeValue(elem, "size", FALSE);</td></tr><tr><th id="L290"><a href="#L290">290</a></th><td>                                IF s3 # NIL THEN</td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>                                        Strings.StrToInt(s3^, i);</td></tr><tr><th id="L292"><a href="#L292">292</a></th><td>                                ELSE</td></tr><tr><th id="L293"><a href="#L293">293</a></th><td>                                        i := 20</td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>                                END;</td></tr><tr><th id="L295"><a href="#L295">295</a></th><td>                                s3 := GetElemAttributeValue(elem, "maxlength", FALSE);</td></tr><tr><th id="L296"><a href="#L296">296</a></th><td>                                IF s3 # NIL THEN</td></tr><tr><th id="L297"><a href="#L297">297</a></th><td>                                        Strings.StrToInt(s3^, j);</td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>                                ELSE</td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>                                        j := 0</td></tr><tr><th id="L300"><a href="#L300">300</a></th><td>                                END;</td></tr><tr><th id="L301"><a href="#L301">301</a></th><td>                                NEW(formTextInput, s, s2, i, j, isPassword);</td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>                                style.form.AddFormComponent(formTextInput);</td></tr><tr><th id="L303"><a href="#L303">303</a></th><td>                                AddVisualComponent(formTextInput.editor, style);</td></tr><tr><th id="L304"><a href="#L304">304</a></th><td>                        END textInput;</td></tr><tr><th id="L305"><a href="#L305">305</a></th><td></td></tr><tr><th id="L306"><a href="#L306">306</a></th><td>                BEGIN</td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>                        name := elem.GetName();</td></tr><tr><th id="L308"><a href="#L308">308</a></th><td>                        CASE name[0] OF</td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>                        |"A":</td></tr><tr><th id="L310"><a href="#L310">310</a></th><td>                                IF name^="A" THEN</td></tr><tr><th id="L311"><a href="#L311">311</a></th><td>                                        s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L312"><a href="#L312">312</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L313"><a href="#L313">313</a></th><td>                                                AddLabel(s);</td></tr><tr><th id="L314"><a href="#L314">314</a></th><td>                                        END;</td></tr><tr><th id="L315"><a href="#L315">315</a></th><td>                                        s := GetElemAttributeValue(elem, "href", FALSE);</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>                                                style.color := linkColor;</td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>                                                style.link := ResolveAddress(baseAddress, s);</td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>                                                s := GetElemAttributeValue(elem, "target", FALSE);</td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>                                                IF s#NIL THEN</td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>                                                        Strings.TrimWS(s^);</td></tr><tr><th id="L323"><a href="#L323">323</a></th><td>                                                        style.linktarget := s;</td></tr><tr><th id="L324"><a href="#L324">324</a></th><td>                                                ELSIF baseTarget # NIL THEN</td></tr><tr><th id="L325"><a href="#L325">325</a></th><td>                                                        style.linktarget := baseTarget;</td></tr><tr><th id="L326"><a href="#L326">326</a></th><td>                                                ELSE</td></tr><tr><th id="L327"><a href="#L327">327</a></th><td>                                                        style.linktarget := frameName;</td></tr><tr><th id="L328"><a href="#L328">328</a></th><td>                                                END;</td></tr><tr><th id="L329"><a href="#L329">329</a></th><td>                                        END;</td></tr><tr><th id="L330"><a href="#L330">330</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L331"><a href="#L331">331</a></th><td>                                ELSIF name^="ABBR" THEN</td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>                                ELSIF name^="ACRONYM" THEN</td></tr><tr><th id="L334"><a href="#L334">334</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L335"><a href="#L335">335</a></th><td>                                ELSIF name^="ADDRESS" THEN</td></tr><tr><th id="L336"><a href="#L336">336</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L337"><a href="#L337">337</a></th><td>                                                style.style := 2;</td></tr><tr><th id="L338"><a href="#L338">338</a></th><td>                                        ELSIF style.style = 1 THEN</td></tr><tr><th id="L339"><a href="#L339">339</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L340"><a href="#L340">340</a></th><td>                                        END;</td></tr><tr><th id="L341"><a href="#L341">341</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L342"><a href="#L342">342</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L343"><a href="#L343">343</a></th><td>                                ELSIF name^="APPLET" THEN</td></tr><tr><th id="L344"><a href="#L344">344</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L345"><a href="#L345">345</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L346"><a href="#L346">346</a></th><td>                                ELSIF name^="AREA" THEN</td></tr><tr><th id="L347"><a href="#L347">347</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L348"><a href="#L348">348</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L349"><a href="#L349">349</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>                                END;</td></tr><tr><th id="L351"><a href="#L351">351</a></th><td>                        |"B":</td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>                                IF name^="B" THEN</td></tr><tr><th id="L353"><a href="#L353">353</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>                                                style.style := 1;</td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>                                        ELSIF style.style = 2 THEN</td></tr><tr><th id="L356"><a href="#L356">356</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L357"><a href="#L357">357</a></th><td>                                        END;</td></tr><tr><th id="L358"><a href="#L358">358</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L359"><a href="#L359">359</a></th><td>                                ELSIF name^="BASE" THEN</td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>                                        s := GetElemAttributeValue(elem, "href", FALSE);</td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L362"><a href="#L362">362</a></th><td>                                                baseAddress := s;</td></tr><tr><th id="L363"><a href="#L363">363</a></th><td>                                        END;</td></tr><tr><th id="L364"><a href="#L364">364</a></th><td>                                        baseTarget := GetElemAttributeValue(elem, "target", FALSE);</td></tr><tr><th id="L365"><a href="#L365">365</a></th><td>                                ELSIF name^="BASEFONT" THEN</td></tr><tr><th id="L366"><a href="#L366">366</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L367"><a href="#L367">367</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L368"><a href="#L368">368</a></th><td>                                ELSIF name^="BDO" THEN</td></tr><tr><th id="L369"><a href="#L369">369</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L370"><a href="#L370">370</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L371"><a href="#L371">371</a></th><td>                                ELSIF name^="BIG" THEN</td></tr><tr><th id="L372"><a href="#L372">372</a></th><td>                                        IF style.size &lt; 7 THEN INC(style.size); END;</td></tr><tr><th id="L373"><a href="#L373">373</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L374"><a href="#L374">374</a></th><td>                                ELSIF name^="BLOCKQUOTE" THEN</td></tr><tr><th id="L375"><a href="#L375">375</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L376"><a href="#L376">376</a></th><td>                                        INC(style.indent);</td></tr><tr><th id="L377"><a href="#L377">377</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L378"><a href="#L378">378</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L379"><a href="#L379">379</a></th><td>                                ELSIF name^="BODY" THEN</td></tr><tr><th id="L380"><a href="#L380">380</a></th><td>                                        s := GetElemAttributeValue(elem, "bgcolor", TRUE);</td></tr><tr><th id="L381"><a href="#L381">381</a></th><td>                                        IF s#NIL THEN pageBgColor := GetColor(s); END;</td></tr><tr><th id="L382"><a href="#L382">382</a></th><td>                                        s := GetElemAttributeValue(elem, "text", TRUE);</td></tr><tr><th id="L383"><a href="#L383">383</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L384"><a href="#L384">384</a></th><td>                                                textColor := GetColor(s);</td></tr><tr><th id="L385"><a href="#L385">385</a></th><td>                                                style.color := textColor;</td></tr><tr><th id="L386"><a href="#L386">386</a></th><td>                                        END;</td></tr><tr><th id="L387"><a href="#L387">387</a></th><td>                                        s := GetElemAttributeValue(elem, "link", TRUE);</td></tr><tr><th id="L388"><a href="#L388">388</a></th><td>                                        IF s#NIL THEN linkColor := GetColor(s); END;</td></tr><tr><th id="L389"><a href="#L389">389</a></th><td>                                        s := GetElemAttributeValue(elem, "vlink", TRUE);</td></tr><tr><th id="L390"><a href="#L390">390</a></th><td>                                        IF s#NIL THEN vlinkColor := GetColor(s); END;</td></tr><tr><th id="L391"><a href="#L391">391</a></th><td>                                        s := GetElemAttributeValue(elem, "alink", TRUE);</td></tr><tr><th id="L392"><a href="#L392">392</a></th><td>                                        IF s#NIL THEN alinkColor := GetColor(s); END;</td></tr><tr><th id="L393"><a href="#L393">393</a></th><td>                                        s := GetElemAttributeValue(elem, "background", FALSE);</td></tr><tr><th id="L394"><a href="#L394">394</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L395"><a href="#L395">395</a></th><td>                                                bgImage := ResolveAddress(baseAddress, s);</td></tr><tr><th id="L396"><a href="#L396">396</a></th><td>                                        END;</td></tr><tr><th id="L397"><a href="#L397">397</a></th><td></td></tr><tr><th id="L398"><a href="#L398">398</a></th><td>                                        (* TODO: backround image *)</td></tr><tr><th id="L399"><a href="#L399">399</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L400"><a href="#L400">400</a></th><td>                                ELSIF name^="BR" THEN</td></tr><tr><th id="L401"><a href="#L401">401</a></th><td>                                        NewLine(TRUE);</td></tr><tr><th id="L402"><a href="#L402">402</a></th><td>                                ELSIF name^="BUTTON" THEN</td></tr><tr><th id="L403"><a href="#L403">403</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L404"><a href="#L404">404</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L405"><a href="#L405">405</a></th><td>                                ELSIF Strings.StartsWith2("BB:", name^) THEN</td></tr><tr><th id="L406"><a href="#L406">406</a></th><td>                                        XMLTransformer.AddContentsOf(XMLTransformer.Transform(elem), txtElem);</td></tr><tr><th id="L407"><a href="#L407">407</a></th><td>                                        currentAlign := -1;</td></tr><tr><th id="L408"><a href="#L408">408</a></th><td>                                        currentIndent := -1;</td></tr><tr><th id="L409"><a href="#L409">409</a></th><td>                                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L410"><a href="#L410">410</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L411"><a href="#L411">411</a></th><td>                                END;</td></tr><tr><th id="L412"><a href="#L412">412</a></th><td>                        |"C":</td></tr><tr><th id="L413"><a href="#L413">413</a></th><td>                                IF name^="CENTER" THEN</td></tr><tr><th id="L414"><a href="#L414">414</a></th><td>                                        NewLine(TRUE);</td></tr><tr><th id="L415"><a href="#L415">415</a></th><td>                                        style.align := alignCenter;</td></tr><tr><th id="L416"><a href="#L416">416</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L417"><a href="#L417">417</a></th><td>                                        NewLine(TRUE);</td></tr><tr><th id="L418"><a href="#L418">418</a></th><td>                                ELSIF name^="CITE" THEN</td></tr><tr><th id="L419"><a href="#L419">419</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L420"><a href="#L420">420</a></th><td>                                                style.style := 2;</td></tr><tr><th id="L421"><a href="#L421">421</a></th><td>                                        ELSIF style.style = 1 THEN</td></tr><tr><th id="L422"><a href="#L422">422</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L423"><a href="#L423">423</a></th><td>                                        END;</td></tr><tr><th id="L424"><a href="#L424">424</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L425"><a href="#L425">425</a></th><td>                                ELSIF name^="CODE" THEN</td></tr><tr><th id="L426"><a href="#L426">426</a></th><td>                                        style.font := Strings.NewString(monospace);</td></tr><tr><th id="L427"><a href="#L427">427</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L428"><a href="#L428">428</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L429"><a href="#L429">429</a></th><td>                                END;</td></tr><tr><th id="L430"><a href="#L430">430</a></th><td>                        |"D":</td></tr><tr><th id="L431"><a href="#L431">431</a></th><td>                                IF name^="DD" THEN</td></tr><tr><th id="L432"><a href="#L432">432</a></th><td>                                        INC(style.indent);</td></tr><tr><th id="L433"><a href="#L433">433</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L434"><a href="#L434">434</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L435"><a href="#L435">435</a></th><td>                                ELSIF name^="DEL" THEN</td></tr><tr><th id="L436"><a href="#L436">436</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L437"><a href="#L437">437</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L438"><a href="#L438">438</a></th><td>                                ELSIF name^="DFN" THEN</td></tr><tr><th id="L439"><a href="#L439">439</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L440"><a href="#L440">440</a></th><td>                                                style.style := 2;</td></tr><tr><th id="L441"><a href="#L441">441</a></th><td>                                        ELSIF style.style = 1 THEN</td></tr><tr><th id="L442"><a href="#L442">442</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L443"><a href="#L443">443</a></th><td>                                        END;</td></tr><tr><th id="L444"><a href="#L444">444</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L445"><a href="#L445">445</a></th><td>                                ELSIF name^="DIR" THEN</td></tr><tr><th id="L446"><a href="#L446">446</a></th><td>                                        ul();</td></tr><tr><th id="L447"><a href="#L447">447</a></th><td>                                ELSIF name^="DIV" THEN</td></tr><tr><th id="L448"><a href="#L448">448</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L449"><a href="#L449">449</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L450"><a href="#L450">450</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L451"><a href="#L451">451</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L452"><a href="#L452">452</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L453"><a href="#L453">453</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L454"><a href="#L454">454</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L455"><a href="#L455">455</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L456"><a href="#L456">456</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L457"><a href="#L457">457</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L458"><a href="#L458">458</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L459"><a href="#L459">459</a></th><td>                                                END;</td></tr><tr><th id="L460"><a href="#L460">460</a></th><td>                                        END;</td></tr><tr><th id="L461"><a href="#L461">461</a></th><td>                                        NewLine(TRUE);</td></tr><tr><th id="L462"><a href="#L462">462</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L463"><a href="#L463">463</a></th><td>                                        NewLine(TRUE);</td></tr><tr><th id="L464"><a href="#L464">464</a></th><td>                                ELSIF name^="DL" THEN</td></tr><tr><th id="L465"><a href="#L465">465</a></th><td>                                        IF inDL THEN</td></tr><tr><th id="L466"><a href="#L466">466</a></th><td>                                                INC(style.indent);</td></tr><tr><th id="L467"><a href="#L467">467</a></th><td>                                                NewLine(FALSE);</td></tr><tr><th id="L468"><a href="#L468">468</a></th><td>                                        ELSE</td></tr><tr><th id="L469"><a href="#L469">469</a></th><td>                                                NewParagraph(FALSE);</td></tr><tr><th id="L470"><a href="#L470">470</a></th><td>                                        END;</td></tr><tr><th id="L471"><a href="#L471">471</a></th><td>                                        b := inDL;</td></tr><tr><th id="L472"><a href="#L472">472</a></th><td>                                        inDL := TRUE;</td></tr><tr><th id="L473"><a href="#L473">473</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L474"><a href="#L474">474</a></th><td>                                        IF b THEN</td></tr><tr><th id="L475"><a href="#L475">475</a></th><td>                                                NewLine(FALSE);</td></tr><tr><th id="L476"><a href="#L476">476</a></th><td>                                        ELSE</td></tr><tr><th id="L477"><a href="#L477">477</a></th><td>                                                NewParagraph(FALSE);</td></tr><tr><th id="L478"><a href="#L478">478</a></th><td>                                        END;</td></tr><tr><th id="L479"><a href="#L479">479</a></th><td>                                        inDL := b;</td></tr><tr><th id="L480"><a href="#L480">480</a></th><td>                                ELSIF name^="DT" THEN</td></tr><tr><th id="L481"><a href="#L481">481</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L482"><a href="#L482">482</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L483"><a href="#L483">483</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L484"><a href="#L484">484</a></th><td>                                END;</td></tr><tr><th id="L485"><a href="#L485">485</a></th><td>                        |"E":</td></tr><tr><th id="L486"><a href="#L486">486</a></th><td>                                IF name^="EM" THEN</td></tr><tr><th id="L487"><a href="#L487">487</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L488"><a href="#L488">488</a></th><td>                                                style.style := 2;</td></tr><tr><th id="L489"><a href="#L489">489</a></th><td>                                        ELSIF style.style = 1 THEN</td></tr><tr><th id="L490"><a href="#L490">490</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L491"><a href="#L491">491</a></th><td>                                        END;</td></tr><tr><th id="L492"><a href="#L492">492</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L493"><a href="#L493">493</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L494"><a href="#L494">494</a></th><td>                                END;</td></tr><tr><th id="L495"><a href="#L495">495</a></th><td>                        |"F":</td></tr><tr><th id="L496"><a href="#L496">496</a></th><td>                                IF name^="FIELDSET" THEN</td></tr><tr><th id="L497"><a href="#L497">497</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L498"><a href="#L498">498</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L499"><a href="#L499">499</a></th><td>                                ELSIF name^="FONT" THEN</td></tr><tr><th id="L500"><a href="#L500">500</a></th><td>                                        s := GetElemAttributeValue(elem, "size", FALSE);</td></tr><tr><th id="L501"><a href="#L501">501</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L502"><a href="#L502">502</a></th><td>                                                Strings.Copy(s^, 0, LEN(s^)-1, aoc);</td></tr><tr><th id="L503"><a href="#L503">503</a></th><td>                                                Strings.TrimLeft(aoc, ' ');</td></tr><tr><th id="L504"><a href="#L504">504</a></th><td>                                                Strings.StrToInt(aoc, res);</td></tr><tr><th id="L505"><a href="#L505">505</a></th><td>                                                IF (aoc[0]='+') OR (aoc[0]='-') THEN</td></tr><tr><th id="L506"><a href="#L506">506</a></th><td>                                                        style.size := style.size + res;</td></tr><tr><th id="L507"><a href="#L507">507</a></th><td>                                                ELSE</td></tr><tr><th id="L508"><a href="#L508">508</a></th><td>                                                        style.size := res;</td></tr><tr><th id="L509"><a href="#L509">509</a></th><td>                                                END;</td></tr><tr><th id="L510"><a href="#L510">510</a></th><td>                                                IF style.size &lt; 1 THEN</td></tr><tr><th id="L511"><a href="#L511">511</a></th><td>                                                        style.size := 1;</td></tr><tr><th id="L512"><a href="#L512">512</a></th><td>                                                ELSIF style.size &gt; 7 THEN</td></tr><tr><th id="L513"><a href="#L513">513</a></th><td>                                                        style.size := 7;</td></tr><tr><th id="L514"><a href="#L514">514</a></th><td>                                                END;</td></tr><tr><th id="L515"><a href="#L515">515</a></th><td>                                        END;</td></tr><tr><th id="L516"><a href="#L516">516</a></th><td>                                        s := GetElemAttributeValue(elem, "color", TRUE);</td></tr><tr><th id="L517"><a href="#L517">517</a></th><td>                                        IF s#NIL THEN style.color := GetColor(s); END;</td></tr><tr><th id="L518"><a href="#L518">518</a></th><td>                                        s := GetElemAttributeValue(elem, "face", FALSE);</td></tr><tr><th id="L519"><a href="#L519">519</a></th><td>                                        IF s#NIL THEN style.font := GetExistingFontName(s); END;</td></tr><tr><th id="L520"><a href="#L520">520</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L521"><a href="#L521">521</a></th><td>                                ELSIF name^="FORM" THEN</td></tr><tr><th id="L522"><a href="#L522">522</a></th><td>                                        oldForm := style.form;</td></tr><tr><th id="L523"><a href="#L523">523</a></th><td>                                        s := GetElemAttributeValue(elem, "action", FALSE);</td></tr><tr><th id="L524"><a href="#L524">524</a></th><td>                                        IF s = NIL THEN</td></tr><tr><th id="L525"><a href="#L525">525</a></th><td>                                                s := baseAddress;</td></tr><tr><th id="L526"><a href="#L526">526</a></th><td>                                        ELSE</td></tr><tr><th id="L527"><a href="#L527">527</a></th><td>                                                s := ResolveAddress(baseAddress, s);</td></tr><tr><th id="L528"><a href="#L528">528</a></th><td>                                        END;</td></tr><tr><th id="L529"><a href="#L529">529</a></th><td>                                        NEW(style.form, s, loadLink);</td></tr><tr><th id="L530"><a href="#L530">530</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L531"><a href="#L531">531</a></th><td>                                        style.form := oldForm;</td></tr><tr><th id="L532"><a href="#L532">532</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L533"><a href="#L533">533</a></th><td>                                END;</td></tr><tr><th id="L534"><a href="#L534">534</a></th><td>                        |"G":</td></tr><tr><th id="L535"><a href="#L535">535</a></th><td>                                TransformContent(elem, style);</td></tr><tr><th id="L536"><a href="#L536">536</a></th><td>                        |"H":</td></tr><tr><th id="L537"><a href="#L537">537</a></th><td>                                IF name^="H1" THEN</td></tr><tr><th id="L538"><a href="#L538">538</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L539"><a href="#L539">539</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L540"><a href="#L540">540</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L541"><a href="#L541">541</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L542"><a href="#L542">542</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L543"><a href="#L543">543</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L544"><a href="#L544">544</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L545"><a href="#L545">545</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L546"><a href="#L546">546</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L547"><a href="#L547">547</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L548"><a href="#L548">548</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L549"><a href="#L549">549</a></th><td>                                                END;</td></tr><tr><th id="L550"><a href="#L550">550</a></th><td>                                        END;</td></tr><tr><th id="L551"><a href="#L551">551</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L552"><a href="#L552">552</a></th><td>                                        style.size := 6;</td></tr><tr><th id="L553"><a href="#L553">553</a></th><td>                                        style.style := 1;</td></tr><tr><th id="L554"><a href="#L554">554</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L555"><a href="#L555">555</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L556"><a href="#L556">556</a></th><td>                                ELSIF name^="H2" THEN</td></tr><tr><th id="L557"><a href="#L557">557</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L558"><a href="#L558">558</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L559"><a href="#L559">559</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L560"><a href="#L560">560</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L561"><a href="#L561">561</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L562"><a href="#L562">562</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L563"><a href="#L563">563</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L564"><a href="#L564">564</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L565"><a href="#L565">565</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L566"><a href="#L566">566</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L567"><a href="#L567">567</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L568"><a href="#L568">568</a></th><td>                                                END;</td></tr><tr><th id="L569"><a href="#L569">569</a></th><td>                                        END;</td></tr><tr><th id="L570"><a href="#L570">570</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L571"><a href="#L571">571</a></th><td>                                        style.size := 5;</td></tr><tr><th id="L572"><a href="#L572">572</a></th><td>                                        style.style := 1;</td></tr><tr><th id="L573"><a href="#L573">573</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L574"><a href="#L574">574</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L575"><a href="#L575">575</a></th><td>                                ELSIF name^="H3" THEN</td></tr><tr><th id="L576"><a href="#L576">576</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L577"><a href="#L577">577</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L578"><a href="#L578">578</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L579"><a href="#L579">579</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L580"><a href="#L580">580</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L581"><a href="#L581">581</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L582"><a href="#L582">582</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L583"><a href="#L583">583</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L584"><a href="#L584">584</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L585"><a href="#L585">585</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L586"><a href="#L586">586</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L587"><a href="#L587">587</a></th><td>                                                END;</td></tr><tr><th id="L588"><a href="#L588">588</a></th><td>                                        END;</td></tr><tr><th id="L589"><a href="#L589">589</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L590"><a href="#L590">590</a></th><td>                                        style.size := 4;</td></tr><tr><th id="L591"><a href="#L591">591</a></th><td>                                        style.style := 1;</td></tr><tr><th id="L592"><a href="#L592">592</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L593"><a href="#L593">593</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L594"><a href="#L594">594</a></th><td>                                ELSIF name^="H4" THEN</td></tr><tr><th id="L595"><a href="#L595">595</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L596"><a href="#L596">596</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L597"><a href="#L597">597</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L598"><a href="#L598">598</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L599"><a href="#L599">599</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L600"><a href="#L600">600</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L601"><a href="#L601">601</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L602"><a href="#L602">602</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L603"><a href="#L603">603</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L604"><a href="#L604">604</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L605"><a href="#L605">605</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L606"><a href="#L606">606</a></th><td>                                                END;</td></tr><tr><th id="L607"><a href="#L607">607</a></th><td>                                        END;</td></tr><tr><th id="L608"><a href="#L608">608</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L609"><a href="#L609">609</a></th><td>                                        style.size := 3;</td></tr><tr><th id="L610"><a href="#L610">610</a></th><td>                                        style.style := 1;</td></tr><tr><th id="L611"><a href="#L611">611</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L612"><a href="#L612">612</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L613"><a href="#L613">613</a></th><td>                                ELSIF name^="H5" THEN</td></tr><tr><th id="L614"><a href="#L614">614</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L615"><a href="#L615">615</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L616"><a href="#L616">616</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L617"><a href="#L617">617</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L618"><a href="#L618">618</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L619"><a href="#L619">619</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L620"><a href="#L620">620</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L621"><a href="#L621">621</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L622"><a href="#L622">622</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L623"><a href="#L623">623</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L624"><a href="#L624">624</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L625"><a href="#L625">625</a></th><td>                                                END;</td></tr><tr><th id="L626"><a href="#L626">626</a></th><td>                                        END;</td></tr><tr><th id="L627"><a href="#L627">627</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L628"><a href="#L628">628</a></th><td>                                        style.size := 2;</td></tr><tr><th id="L629"><a href="#L629">629</a></th><td>                                        style.style := 1;</td></tr><tr><th id="L630"><a href="#L630">630</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L631"><a href="#L631">631</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L632"><a href="#L632">632</a></th><td>                                ELSIF name^="H6" THEN</td></tr><tr><th id="L633"><a href="#L633">633</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L634"><a href="#L634">634</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L635"><a href="#L635">635</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L636"><a href="#L636">636</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L637"><a href="#L637">637</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L638"><a href="#L638">638</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L639"><a href="#L639">639</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L640"><a href="#L640">640</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L641"><a href="#L641">641</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L642"><a href="#L642">642</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L643"><a href="#L643">643</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L644"><a href="#L644">644</a></th><td>                                                END;</td></tr><tr><th id="L645"><a href="#L645">645</a></th><td>                                        END;</td></tr><tr><th id="L646"><a href="#L646">646</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L647"><a href="#L647">647</a></th><td>                                        style.size := 1;</td></tr><tr><th id="L648"><a href="#L648">648</a></th><td>                                        style.style := 1;</td></tr><tr><th id="L649"><a href="#L649">649</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L650"><a href="#L650">650</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L651"><a href="#L651">651</a></th><td>                                ELSIF name^="HEAD" THEN</td></tr><tr><th id="L652"><a href="#L652">652</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L653"><a href="#L653">653</a></th><td>                                ELSIF name^="HR" THEN</td></tr><tr><th id="L654"><a href="#L654">654</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L655"><a href="#L655">655</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L656"><a href="#L656">656</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L657"><a href="#L657">657</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L658"><a href="#L658">658</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L659"><a href="#L659">659</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L660"><a href="#L660">660</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L661"><a href="#L661">661</a></th><td>                                                ELSE</td></tr><tr><th id="L662"><a href="#L662">662</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L663"><a href="#L663">663</a></th><td>                                                END;</td></tr><tr><th id="L664"><a href="#L664">664</a></th><td>                                        ELSE</td></tr><tr><th id="L665"><a href="#L665">665</a></th><td>                                                style.align := alignCenter;</td></tr><tr><th id="L666"><a href="#L666">666</a></th><td>                                        END;</td></tr><tr><th id="L667"><a href="#L667">667</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L668"><a href="#L668">668</a></th><td>                                        AddHR(style.align);</td></tr><tr><th id="L669"><a href="#L669">669</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L670"><a href="#L670">670</a></th><td>                                ELSIF name^="HTML" THEN</td></tr><tr><th id="L671"><a href="#L671">671</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L672"><a href="#L672">672</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L673"><a href="#L673">673</a></th><td>                                END;</td></tr><tr><th id="L674"><a href="#L674">674</a></th><td>                        |"I":                           </td></tr><tr><th id="L675"><a href="#L675">675</a></th><td>                                IF name^="I" THEN</td></tr><tr><th id="L676"><a href="#L676">676</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L677"><a href="#L677">677</a></th><td>                                                style.style := 2;</td></tr><tr><th id="L678"><a href="#L678">678</a></th><td>                                        ELSIF style.style = 1 THEN</td></tr><tr><th id="L679"><a href="#L679">679</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L680"><a href="#L680">680</a></th><td>                                        END;</td></tr><tr><th id="L681"><a href="#L681">681</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L682"><a href="#L682">682</a></th><td>                                ELSIF name^="IFRAME" THEN</td></tr><tr><th id="L683"><a href="#L683">683</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L684"><a href="#L684">684</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L685"><a href="#L685">685</a></th><td>                                ELSIF name^="IMG" THEN</td></tr><tr><th id="L686"><a href="#L686">686</a></th><td>                                        i := -1; j := -1;</td></tr><tr><th id="L687"><a href="#L687">687</a></th><td>                                        s := GetElemAttributeValue(elem, "width", FALSE);</td></tr><tr><th id="L688"><a href="#L688">688</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L689"><a href="#L689">689</a></th><td>                                                Strings.Copy(s^, 0, LEN(s^)-1, aoc);</td></tr><tr><th id="L690"><a href="#L690">690</a></th><td>                                                Strings.StrToInt(aoc, i);</td></tr><tr><th id="L691"><a href="#L691">691</a></th><td>                                        END;</td></tr><tr><th id="L692"><a href="#L692">692</a></th><td>                                        s := GetElemAttributeValue(elem, "height", FALSE);</td></tr><tr><th id="L693"><a href="#L693">693</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L694"><a href="#L694">694</a></th><td>                                                Strings.Copy(s^, 0, LEN(s^)-1, aoc);</td></tr><tr><th id="L695"><a href="#L695">695</a></th><td>                                                Strings.StrToInt(aoc, j);</td></tr><tr><th id="L696"><a href="#L696">696</a></th><td>                                        END;</td></tr><tr><th id="L697"><a href="#L697">697</a></th><td>                                        s := GetElemAttributeValue(elem, "src", FALSE);</td></tr><tr><th id="L698"><a href="#L698">698</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L699"><a href="#L699">699</a></th><td>                                                s := ResolveAddress(baseAddress, s);</td></tr><tr><th id="L700"><a href="#L700">700</a></th><td>                                                AddImage(s, i, j, style);</td></tr><tr><th id="L701"><a href="#L701">701</a></th><td>                                        END;</td></tr><tr><th id="L702"><a href="#L702">702</a></th><td>                                ELSIF name^="INPUT" THEN</td></tr><tr><th id="L703"><a href="#L703">703</a></th><td>                                        IF style.form # NIL THEN</td></tr><tr><th id="L704"><a href="#L704">704</a></th><td>                                                s := GetElemAttributeValue(elem, "type", TRUE);</td></tr><tr><th id="L705"><a href="#L705">705</a></th><td>                                                IF s#NIL THEN</td></tr><tr><th id="L706"><a href="#L706">706</a></th><td>                                                        IF s^="checkbox" THEN</td></tr><tr><th id="L707"><a href="#L707">707</a></th><td>                                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L708"><a href="#L708">708</a></th><td>                                                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L709"><a href="#L709">709</a></th><td>                                                                IF s2 = NIL THEN s2 := Strings.NewString("on") END;</td></tr><tr><th id="L710"><a href="#L710">710</a></th><td>                                                                s3 := GetElemAttributeValue(elem, "checked", FALSE);</td></tr><tr><th id="L711"><a href="#L711">711</a></th><td>                                                                b := FALSE;</td></tr><tr><th id="L712"><a href="#L712">712</a></th><td>                                                                IF s3 # NIL THEN</td></tr><tr><th id="L713"><a href="#L713">713</a></th><td>                                                                        b := TRUE;</td></tr><tr><th id="L714"><a href="#L714">714</a></th><td>                                                                        Strings.TrimWS(s^);</td></tr><tr><th id="L715"><a href="#L715">715</a></th><td>                                                                        IF s3^ = "no" THEN</td></tr><tr><th id="L716"><a href="#L716">716</a></th><td>                                                                                b := FALSE;</td></tr><tr><th id="L717"><a href="#L717">717</a></th><td>                                                                        END;</td></tr><tr><th id="L718"><a href="#L718">718</a></th><td>                                                                END;</td></tr><tr><th id="L719"><a href="#L719">719</a></th><td>                                                                NEW(formCheckbox, s, s2, b);</td></tr><tr><th id="L720"><a href="#L720">720</a></th><td>                                                                AddText(Strings.NewString(" "), style); AddText(Strings.NewString(" "), style); AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L721"><a href="#L721">721</a></th><td>                                                                style.form.AddFormComponent(formCheckbox);</td></tr><tr><th id="L722"><a href="#L722">722</a></th><td>                                                                AddVisualComponent(formCheckbox.checkbox, style);</td></tr><tr><th id="L723"><a href="#L723">723</a></th><td>                                                                AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L724"><a href="#L724">724</a></th><td>                                                        ELSIF s^="radio" THEN</td></tr><tr><th id="L725"><a href="#L725">725</a></th><td>                                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L726"><a href="#L726">726</a></th><td>                                                                IF s = NIL THEN s := Strings.NewString("radioButton") END;</td></tr><tr><th id="L727"><a href="#L727">727</a></th><td>                                                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L728"><a href="#L728">728</a></th><td>                                                                IF s2 = NIL THEN s2 := Strings.NewString("on") END;</td></tr><tr><th id="L729"><a href="#L729">729</a></th><td>                                                                s3 := GetElemAttributeValue(elem, "checked", FALSE);</td></tr><tr><th id="L730"><a href="#L730">730</a></th><td>                                                                b := FALSE;</td></tr><tr><th id="L731"><a href="#L731">731</a></th><td>                                                                IF s3 # NIL THEN</td></tr><tr><th id="L732"><a href="#L732">732</a></th><td>                                                                        b := TRUE;</td></tr><tr><th id="L733"><a href="#L733">733</a></th><td>                                                                        Strings.TrimWS(s^);</td></tr><tr><th id="L734"><a href="#L734">734</a></th><td>                                                                        IF s3^ = "no" THEN</td></tr><tr><th id="L735"><a href="#L735">735</a></th><td>                                                                                b := FALSE;</td></tr><tr><th id="L736"><a href="#L736">736</a></th><td>                                                                        END;</td></tr><tr><th id="L737"><a href="#L737">737</a></th><td>                                                                END;</td></tr><tr><th id="L738"><a href="#L738">738</a></th><td>                                                                NEW(formRadioButton, s, s2, b);</td></tr><tr><th id="L739"><a href="#L739">739</a></th><td>                                                                style.form.AddRadioButton(formRadioButton);</td></tr><tr><th id="L740"><a href="#L740">740</a></th><td>                                                                AddText(Strings.NewString(" "), style); AddText(Strings.NewString(" "), style); AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L741"><a href="#L741">741</a></th><td>                                                                AddVisualComponent(formRadioButton.radioButton, style);</td></tr><tr><th id="L742"><a href="#L742">742</a></th><td>                                                                AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L743"><a href="#L743">743</a></th><td>                                                        ELSIF s^="submit" THEN</td></tr><tr><th id="L744"><a href="#L744">744</a></th><td>                                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L745"><a href="#L745">745</a></th><td>                                                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L746"><a href="#L746">746</a></th><td>                                                                IF s2 = NIL THEN s2 := Strings.NewString("Submit Query") END;</td></tr><tr><th id="L747"><a href="#L747">747</a></th><td>                                                                NEW(formButton, s, s2, style.form.Send);</td></tr><tr><th id="L748"><a href="#L748">748</a></th><td>                                                                style.form.AddFormComponent(formButton);</td></tr><tr><th id="L749"><a href="#L749">749</a></th><td>                                                                AddVisualComponent(formButton.button, style);</td></tr><tr><th id="L750"><a href="#L750">750</a></th><td>                                                                AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L751"><a href="#L751">751</a></th><td>                                                        ELSIF s^="reset" THEN</td></tr><tr><th id="L752"><a href="#L752">752</a></th><td>                                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L753"><a href="#L753">753</a></th><td>                                                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L754"><a href="#L754">754</a></th><td>                                                                IF s2 = NIL THEN s2 := Strings.NewString("Reset") END;</td></tr><tr><th id="L755"><a href="#L755">755</a></th><td>                                                                NEW(formButton, s, s2, style.form.Reset);</td></tr><tr><th id="L756"><a href="#L756">756</a></th><td>                                                                style.form.AddFormComponent(formButton);</td></tr><tr><th id="L757"><a href="#L757">757</a></th><td>                                                                AddVisualComponent(formButton.button, style);</td></tr><tr><th id="L758"><a href="#L758">758</a></th><td>                                                                AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L759"><a href="#L759">759</a></th><td>                                                        ELSIF s^="file" THEN</td></tr><tr><th id="L760"><a href="#L760">760</a></th><td>                                                        ELSIF s^="hidden" THEN</td></tr><tr><th id="L761"><a href="#L761">761</a></th><td>                                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L762"><a href="#L762">762</a></th><td>                                                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L763"><a href="#L763">763</a></th><td>                                                                IF s2 = NIL THEN s2 := Strings.NewString("") END;</td></tr><tr><th id="L764"><a href="#L764">764</a></th><td>                                                                NEW(formHiddenControl, s, s2);</td></tr><tr><th id="L765"><a href="#L765">765</a></th><td>                                                                style.form.AddFormComponent(formHiddenControl);</td></tr><tr><th id="L766"><a href="#L766">766</a></th><td>                                                        ELSIF s^="image" THEN</td></tr><tr><th id="L767"><a href="#L767">767</a></th><td>                                                        ELSIF s^="button" THEN</td></tr><tr><th id="L768"><a href="#L768">768</a></th><td>                                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L769"><a href="#L769">769</a></th><td>                                                                s2 := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L770"><a href="#L770">770</a></th><td>                                                                IF s2 = NIL THEN s2 := Strings.NewString("") END;</td></tr><tr><th id="L771"><a href="#L771">771</a></th><td>                                                                NEW(formButton, s, s2, NIL); (* when implementing scripts: replace NIL with a function *)</td></tr><tr><th id="L772"><a href="#L772">772</a></th><td>                                                                style.form.AddFormComponent(formButton);</td></tr><tr><th id="L773"><a href="#L773">773</a></th><td>                                                                AddVisualComponent(formButton.button, style);</td></tr><tr><th id="L774"><a href="#L774">774</a></th><td>                                                                AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L775"><a href="#L775">775</a></th><td>                                                        ELSIF s^="password" THEN</td></tr><tr><th id="L776"><a href="#L776">776</a></th><td>                                                                textInput(TRUE);</td></tr><tr><th id="L777"><a href="#L777">777</a></th><td>                                                        ELSE</td></tr><tr><th id="L778"><a href="#L778">778</a></th><td>                                                                textInput(FALSE);</td></tr><tr><th id="L779"><a href="#L779">779</a></th><td>                                                        END;</td></tr><tr><th id="L780"><a href="#L780">780</a></th><td>                                                ELSE</td></tr><tr><th id="L781"><a href="#L781">781</a></th><td>                                                        textInput(FALSE);</td></tr><tr><th id="L782"><a href="#L782">782</a></th><td>                                                END;</td></tr><tr><th id="L783"><a href="#L783">783</a></th><td>                                        END;</td></tr><tr><th id="L784"><a href="#L784">784</a></th><td>                                ELSIF name^="INS" THEN</td></tr><tr><th id="L785"><a href="#L785">785</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L786"><a href="#L786">786</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L787"><a href="#L787">787</a></th><td>                                ELSIF name^="ISINDEX" THEN</td></tr><tr><th id="L788"><a href="#L788">788</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L789"><a href="#L789">789</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L790"><a href="#L790">790</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L791"><a href="#L791">791</a></th><td>                                END;</td></tr><tr><th id="L792"><a href="#L792">792</a></th><td>                        |"J":</td></tr><tr><th id="L793"><a href="#L793">793</a></th><td>                                TransformContent(elem, style);</td></tr><tr><th id="L794"><a href="#L794">794</a></th><td>                        |"K":</td></tr><tr><th id="L795"><a href="#L795">795</a></th><td>                                IF name^="KBD" THEN</td></tr><tr><th id="L796"><a href="#L796">796</a></th><td>                                        style.font := Strings.NewString(monospace);</td></tr><tr><th id="L797"><a href="#L797">797</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L798"><a href="#L798">798</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L799"><a href="#L799">799</a></th><td>                                END;</td></tr><tr><th id="L800"><a href="#L800">800</a></th><td>                        |"L":</td></tr><tr><th id="L801"><a href="#L801">801</a></th><td>                                IF name^="LABEL" THEN</td></tr><tr><th id="L802"><a href="#L802">802</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L803"><a href="#L803">803</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L804"><a href="#L804">804</a></th><td>                                ELSIF name^="LEGEND" THEN</td></tr><tr><th id="L805"><a href="#L805">805</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L806"><a href="#L806">806</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L807"><a href="#L807">807</a></th><td>                                ELSIF name^="LI" THEN</td></tr><tr><th id="L808"><a href="#L808">808</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L809"><a href="#L809">809</a></th><td>                                        IF olulStackTop#NIL THEN</td></tr><tr><th id="L810"><a href="#L810">810</a></th><td>                                                s := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L811"><a href="#L811">811</a></th><td>                                                IF s#NIL THEN</td></tr><tr><th id="L812"><a href="#L812">812</a></th><td>                                                        Strings.StrToInt(s^, olulStackTop.value);</td></tr><tr><th id="L813"><a href="#L813">813</a></th><td>                                                END;</td></tr><tr><th id="L814"><a href="#L814">814</a></th><td>                                        END;</td></tr><tr><th id="L815"><a href="#L815">815</a></th><td>                                        i := style.enumtype;</td></tr><tr><th id="L816"><a href="#L816">816</a></th><td>                                        s := GetElemAttributeValue(elem, "type", FALSE);</td></tr><tr><th id="L817"><a href="#L817">817</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L818"><a href="#L818">818</a></th><td>                                                IF s^="square" THEN</td></tr><tr><th id="L819"><a href="#L819">819</a></th><td>                                                        i := 1;</td></tr><tr><th id="L820"><a href="#L820">820</a></th><td>                                                ELSIF s^="circle" THEN</td></tr><tr><th id="L821"><a href="#L821">821</a></th><td>                                                        i := 2;</td></tr><tr><th id="L822"><a href="#L822">822</a></th><td>                                                ELSE (* "disc" *)</td></tr><tr><th id="L823"><a href="#L823">823</a></th><td>                                                        i := 0;</td></tr><tr><th id="L824"><a href="#L824">824</a></th><td>                                                END;</td></tr><tr><th id="L825"><a href="#L825">825</a></th><td>                                        END;</td></tr><tr><th id="L826"><a href="#L826">826</a></th><td>                                        CASE i OF</td></tr><tr><th id="L827"><a href="#L827">827</a></th><td>                                        | 1 : s := Strings.NewString("&amp;#9633; "); (* square *)</td></tr><tr><th id="L828"><a href="#L828">828</a></th><td>                                        | 2 : s := Strings.NewString("&amp;#9675; "); (* circle *)</td></tr><tr><th id="L829"><a href="#L829">829</a></th><td>                                        | 3 : IF olulStackTop#NIL THEN  (* 1, 2, 3... *)</td></tr><tr><th id="L830"><a href="#L830">830</a></th><td>                                                        Strings.IntToStr(olulStackTop.value, aoc);</td></tr><tr><th id="L831"><a href="#L831">831</a></th><td>                                                        j :=Strings.Length(aoc);</td></tr><tr><th id="L832"><a href="#L832">832</a></th><td>                                                        IF (j+2) &lt;= (LEN(aoc)-1) THEN</td></tr><tr><th id="L833"><a href="#L833">833</a></th><td>                                                                aoc[j]:='.'; aoc[j+1]:=' '; aoc[j+2]:=0X;</td></tr><tr><th id="L834"><a href="#L834">834</a></th><td>                                                        END;</td></tr><tr><th id="L835"><a href="#L835">835</a></th><td>                                                ELSE</td></tr><tr><th id="L836"><a href="#L836">836</a></th><td>                                                        aoc := "0. ";</td></tr><tr><th id="L837"><a href="#L837">837</a></th><td>                                                END;</td></tr><tr><th id="L838"><a href="#L838">838</a></th><td>                                                s := Strings.NewString(aoc);</td></tr><tr><th id="L839"><a href="#L839">839</a></th><td>                                        | 4 : IF olulStackTop#NIL THEN  (* a, b, c... *)</td></tr><tr><th id="L840"><a href="#L840">840</a></th><td>                                                        s := IntToABCString(olulStackTop.value, FALSE);</td></tr><tr><th id="L841"><a href="#L841">841</a></th><td>                                                ELSE</td></tr><tr><th id="L842"><a href="#L842">842</a></th><td>                                                        s := Strings.NewString("0. ");</td></tr><tr><th id="L843"><a href="#L843">843</a></th><td>                                                END;</td></tr><tr><th id="L844"><a href="#L844">844</a></th><td>                                        | 5 : IF olulStackTop#NIL THEN (* A, B, C... *)</td></tr><tr><th id="L845"><a href="#L845">845</a></th><td>                                                        s := IntToABCString(olulStackTop.value, TRUE);</td></tr><tr><th id="L846"><a href="#L846">846</a></th><td>                                                ELSE</td></tr><tr><th id="L847"><a href="#L847">847</a></th><td>                                                        s := Strings.NewString("0. ");</td></tr><tr><th id="L848"><a href="#L848">848</a></th><td>                                                END;</td></tr><tr><th id="L849"><a href="#L849">849</a></th><td>                                        | 6 : IF olulStackTop#NIL THEN (* i, ii, iii... *)</td></tr><tr><th id="L850"><a href="#L850">850</a></th><td>                                                        s := IntToRomanString(olulStackTop.value, FALSE);</td></tr><tr><th id="L851"><a href="#L851">851</a></th><td>                                                ELSE</td></tr><tr><th id="L852"><a href="#L852">852</a></th><td>                                                        s := Strings.NewString("0. ");</td></tr><tr><th id="L853"><a href="#L853">853</a></th><td>                                                END;</td></tr><tr><th id="L854"><a href="#L854">854</a></th><td>                                        | 7 : IF olulStackTop#NIL THEN (* I, II, III... *)</td></tr><tr><th id="L855"><a href="#L855">855</a></th><td>                                                        s := IntToRomanString(olulStackTop.value, TRUE);</td></tr><tr><th id="L856"><a href="#L856">856</a></th><td>                                                ELSE</td></tr><tr><th id="L857"><a href="#L857">857</a></th><td>                                                        s := Strings.NewString("0. ");</td></tr><tr><th id="L858"><a href="#L858">858</a></th><td>                                                END;</td></tr><tr><th id="L859"><a href="#L859">859</a></th><td>                                        ELSE  (* 0 *)</td></tr><tr><th id="L860"><a href="#L860">860</a></th><td>                                                s := Strings.NewString("&amp;#9679; "); (* disc *)</td></tr><tr><th id="L861"><a href="#L861">861</a></th><td>                                        END;</td></tr><tr><th id="L862"><a href="#L862">862</a></th><td>                                        AddText(s, style);</td></tr><tr><th id="L863"><a href="#L863">863</a></th><td>                                        IF olulStackTop#NIL THEN INC(olulStackTop.value); END;</td></tr><tr><th id="L864"><a href="#L864">864</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L865"><a href="#L865">865</a></th><td>                                        NewLine(FALSE);</td></tr><tr><th id="L866"><a href="#L866">866</a></th><td>                                ELSIF name^="LINK" THEN</td></tr><tr><th id="L867"><a href="#L867">867</a></th><td>                                        (* ignore *)</td></tr><tr><th id="L868"><a href="#L868">868</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L869"><a href="#L869">869</a></th><td>                                END;</td></tr><tr><th id="L870"><a href="#L870">870</a></th><td>                        |"M":</td></tr><tr><th id="L871"><a href="#L871">871</a></th><td>                                IF name^="MAP" THEN</td></tr><tr><th id="L872"><a href="#L872">872</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L873"><a href="#L873">873</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L874"><a href="#L874">874</a></th><td>                                ELSIF name^="MENU" THEN</td></tr><tr><th id="L875"><a href="#L875">875</a></th><td>                                        ul();</td></tr><tr><th id="L876"><a href="#L876">876</a></th><td>                                ELSIF name^="META" THEN</td></tr><tr><th id="L877"><a href="#L877">877</a></th><td>                                        s := GetElemAttributeValue(elem, "content", TRUE);</td></tr><tr><th id="L878"><a href="#L878">878</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L879"><a href="#L879">879</a></th><td>                                                i := Strings.Pos("charset", s^);</td></tr><tr><th id="L880"><a href="#L880">880</a></th><td>                                                IF i # -1 THEN</td></tr><tr><th id="L881"><a href="#L881">881</a></th><td>                                                        i := Strings.IndexOfByte('=', i+7, s^) + 1;</td></tr><tr><th id="L882"><a href="#L882">882</a></th><td>                                                        IF i &lt; Strings.Length(s^) THEN</td></tr><tr><th id="L883"><a href="#L883">883</a></th><td>                                                                s := Strings.Substring2(i, s^);</td></tr><tr><th id="L884"><a href="#L884">884</a></th><td>                                                                charsetConv := GetCharsetConverter(s^);</td></tr><tr><th id="L885"><a href="#L885">885</a></th><td>                                                                charset := s;</td></tr><tr><th id="L886"><a href="#L886">886</a></th><td>                                                        END;</td></tr><tr><th id="L887"><a href="#L887">887</a></th><td>                                                END;</td></tr><tr><th id="L888"><a href="#L888">888</a></th><td>                                        END;</td></tr><tr><th id="L889"><a href="#L889">889</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L890"><a href="#L890">890</a></th><td>                                END;</td></tr><tr><th id="L891"><a href="#L891">891</a></th><td>                        |"N":</td></tr><tr><th id="L892"><a href="#L892">892</a></th><td>                        (* Frames are handeled in WebBrowserPanel.HTMLPanel</td></tr><tr><th id="L893"><a href="#L893">893</a></th><td>                                ELSIF name^="NOFRAMES" THEN</td></tr><tr><th id="L894"><a href="#L894">894</a></th><td>                        *)</td></tr><tr><th id="L895"><a href="#L895">895</a></th><td>                                IF name^="NOSCRIPT" THEN</td></tr><tr><th id="L896"><a href="#L896">896</a></th><td>                                        (* TODO: remove if scripts are implemented *)</td></tr><tr><th id="L897"><a href="#L897">897</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L898"><a href="#L898">898</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L899"><a href="#L899">899</a></th><td>                                END;</td></tr><tr><th id="L900"><a href="#L900">900</a></th><td>                        |"O":</td></tr><tr><th id="L901"><a href="#L901">901</a></th><td>                                IF name^="OBJECT" THEN</td></tr><tr><th id="L902"><a href="#L902">902</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L903"><a href="#L903">903</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L904"><a href="#L904">904</a></th><td>                                ELSIF name^="OL" THEN</td></tr><tr><th id="L905"><a href="#L905">905</a></th><td>                                        IF olulStackTop = NIL THEN</td></tr><tr><th id="L906"><a href="#L906">906</a></th><td>                                                NewParagraph(FALSE);</td></tr><tr><th id="L907"><a href="#L907">907</a></th><td>                                        ELSE</td></tr><tr><th id="L908"><a href="#L908">908</a></th><td>                                                NewLine(FALSE);</td></tr><tr><th id="L909"><a href="#L909">909</a></th><td>                                        END;</td></tr><tr><th id="L910"><a href="#L910">910</a></th><td>                                        INC(style.indent);</td></tr><tr><th id="L911"><a href="#L911">911</a></th><td>                                        s := GetElemAttributeValue(elem, "type", FALSE);</td></tr><tr><th id="L912"><a href="#L912">912</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L913"><a href="#L913">913</a></th><td>                                                IF s^="a" THEN</td></tr><tr><th id="L914"><a href="#L914">914</a></th><td>                                                        style.enumtype := 4;</td></tr><tr><th id="L915"><a href="#L915">915</a></th><td>                                                ELSIF s^="A" THEN</td></tr><tr><th id="L916"><a href="#L916">916</a></th><td>                                                        style.enumtype := 5;</td></tr><tr><th id="L917"><a href="#L917">917</a></th><td>                                                ELSIF s^="i" THEN</td></tr><tr><th id="L918"><a href="#L918">918</a></th><td>                                                        style.enumtype := 6;</td></tr><tr><th id="L919"><a href="#L919">919</a></th><td>                                                ELSIF s^="I" THEN</td></tr><tr><th id="L920"><a href="#L920">920</a></th><td>                                                        style.enumtype := 7;</td></tr><tr><th id="L921"><a href="#L921">921</a></th><td>                                                ELSE (* "1" *)</td></tr><tr><th id="L922"><a href="#L922">922</a></th><td>                                                        style.enumtype := 3;</td></tr><tr><th id="L923"><a href="#L923">923</a></th><td>                                                END;</td></tr><tr><th id="L924"><a href="#L924">924</a></th><td>                                        ELSE</td></tr><tr><th id="L925"><a href="#L925">925</a></th><td>                                                style.enumtype := 3;</td></tr><tr><th id="L926"><a href="#L926">926</a></th><td>                                        END;</td></tr><tr><th id="L927"><a href="#L927">927</a></th><td>                                        NEW(olulStackItem);</td></tr><tr><th id="L928"><a href="#L928">928</a></th><td>                                        olulStackItem.prev := olulStackTop;</td></tr><tr><th id="L929"><a href="#L929">929</a></th><td>                                        olulStackTop := olulStackItem;</td></tr><tr><th id="L930"><a href="#L930">930</a></th><td>                                        s := GetElemAttributeValue(elem, "start", FALSE);</td></tr><tr><th id="L931"><a href="#L931">931</a></th><td>                                        IF s#NIL THEN</td></tr><tr><th id="L932"><a href="#L932">932</a></th><td>                                                Strings.StrToInt(s^, olulStackItem.value);</td></tr><tr><th id="L933"><a href="#L933">933</a></th><td>                                        ELSE</td></tr><tr><th id="L934"><a href="#L934">934</a></th><td>                                                olulStackItem.value := 1;</td></tr><tr><th id="L935"><a href="#L935">935</a></th><td>                                        END;</td></tr><tr><th id="L936"><a href="#L936">936</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L937"><a href="#L937">937</a></th><td>                                        olulStackTop := olulStackTop.prev;</td></tr><tr><th id="L938"><a href="#L938">938</a></th><td>                                        IF olulStackTop = NIL THEN</td></tr><tr><th id="L939"><a href="#L939">939</a></th><td>                                                NewParagraph(FALSE);</td></tr><tr><th id="L940"><a href="#L940">940</a></th><td>                                        ELSE</td></tr><tr><th id="L941"><a href="#L941">941</a></th><td>                                                NewLine(FALSE);</td></tr><tr><th id="L942"><a href="#L942">942</a></th><td>                                        END;</td></tr><tr><th id="L943"><a href="#L943">943</a></th><td>                                ELSIF name^="OPTGROUP" THEN</td></tr><tr><th id="L944"><a href="#L944">944</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L945"><a href="#L945">945</a></th><td>                                ELSIF name^="OPTION" THEN</td></tr><tr><th id="L946"><a href="#L946">946</a></th><td>                                        IF formMenu # NIL THEN</td></tr><tr><th id="L947"><a href="#L947">947</a></th><td>                                                s := GetElemAttributeValue(elem, "value", FALSE);</td></tr><tr><th id="L948"><a href="#L948">948</a></th><td>                                                s2 := GetElemAttributeValue(elem, "label", FALSE);</td></tr><tr><th id="L949"><a href="#L949">949</a></th><td>                                                IF s2 = NIL THEN</td></tr><tr><th id="L950"><a href="#L950">950</a></th><td>                                                        s2 := GetText(elem);</td></tr><tr><th id="L951"><a href="#L951">951</a></th><td>                                                END;</td></tr><tr><th id="L952"><a href="#L952">952</a></th><td>                                                s3 := GetElemAttributeValue(elem, "selected", FALSE);</td></tr><tr><th id="L953"><a href="#L953">953</a></th><td>                                                formMenu.NewItem(s, s2, s3 # NIL);</td></tr><tr><th id="L954"><a href="#L954">954</a></th><td>                                        END;</td></tr><tr><th id="L955"><a href="#L955">955</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L956"><a href="#L956">956</a></th><td>                                END;</td></tr><tr><th id="L957"><a href="#L957">957</a></th><td>                        |"P":</td></tr><tr><th id="L958"><a href="#L958">958</a></th><td>                                IF name^="P" THEN</td></tr><tr><th id="L959"><a href="#L959">959</a></th><td>                                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L960"><a href="#L960">960</a></th><td>                                        IF s # NIL THEN</td></tr><tr><th id="L961"><a href="#L961">961</a></th><td>                                                Strings.TrimWS(s^);</td></tr><tr><th id="L962"><a href="#L962">962</a></th><td>                                                IF s^ = "left" THEN</td></tr><tr><th id="L963"><a href="#L963">963</a></th><td>                                                        style.align := alignLeft;</td></tr><tr><th id="L964"><a href="#L964">964</a></th><td>                                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L965"><a href="#L965">965</a></th><td>                                                        style.align := alignCenter;</td></tr><tr><th id="L966"><a href="#L966">966</a></th><td>                                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L967"><a href="#L967">967</a></th><td>                                                        style.align := alignRight;</td></tr><tr><th id="L968"><a href="#L968">968</a></th><td>                                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L969"><a href="#L969">969</a></th><td>                                                        style.align := alignJustify;</td></tr><tr><th id="L970"><a href="#L970">970</a></th><td>                                                END;</td></tr><tr><th id="L971"><a href="#L971">971</a></th><td>                                        END;</td></tr><tr><th id="L972"><a href="#L972">972</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L973"><a href="#L973">973</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L974"><a href="#L974">974</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L975"><a href="#L975">975</a></th><td>                                ELSIF name^="PARAM" THEN</td></tr><tr><th id="L976"><a href="#L976">976</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L977"><a href="#L977">977</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L978"><a href="#L978">978</a></th><td>                                ELSIF name^="PRE" THEN</td></tr><tr><th id="L979"><a href="#L979">979</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L980"><a href="#L980">980</a></th><td>                                        style.preformatted := TRUE;</td></tr><tr><th id="L981"><a href="#L981">981</a></th><td>                                        style.font := Strings.NewString(monospace);</td></tr><tr><th id="L982"><a href="#L982">982</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L983"><a href="#L983">983</a></th><td>                                        NewParagraph(FALSE);</td></tr><tr><th id="L984"><a href="#L984">984</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L985"><a href="#L985">985</a></th><td>                                END;</td></tr><tr><th id="L986"><a href="#L986">986</a></th><td>                        |"Q":</td></tr><tr><th id="L987"><a href="#L987">987</a></th><td>                                IF name^="Q" THEN</td></tr><tr><th id="L988"><a href="#L988">988</a></th><td>                                        AddText(Strings.NewString('"'), style);</td></tr><tr><th id="L989"><a href="#L989">989</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L990"><a href="#L990">990</a></th><td>                                        AddText(Strings.NewString('"'), style);</td></tr><tr><th id="L991"><a href="#L991">991</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L992"><a href="#L992">992</a></th><td>                                END;</td></tr><tr><th id="L993"><a href="#L993">993</a></th><td>                        |"R":</td></tr><tr><th id="L994"><a href="#L994">994</a></th><td>                                TransformContent(elem, style);</td></tr><tr><th id="L995"><a href="#L995">995</a></th><td>                        |"S":</td></tr><tr><th id="L996"><a href="#L996">996</a></th><td>                                IF name^="S" THEN</td></tr><tr><th id="L997"><a href="#L997">997</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L998"><a href="#L998">998</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L999"><a href="#L999">999</a></th><td>                                ELSIF name^="SAMP" THEN</td></tr><tr><th id="L1000"><a href="#L1000">1000</a></th><td>                                        style.font := Strings.NewString(monospace);</td></tr><tr><th id="L1001"><a href="#L1001">1001</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1002"><a href="#L1002">1002</a></th><td>                                ELSIF name^="SCRIPT" THEN</td></tr><tr><th id="L1003"><a href="#L1003">1003</a></th><td>                                        (* ignore *)</td></tr><tr><th id="L1004"><a href="#L1004">1004</a></th><td>                                ELSIF name^="SELECT" THEN</td></tr><tr><th id="L1005"><a href="#L1005">1005</a></th><td>                                        IF style.form # NIL THEN</td></tr><tr><th id="L1006"><a href="#L1006">1006</a></th><td>                                                s := GetElemAttributeValue(elem, "name", FALSE);</td></tr><tr><th id="L1007"><a href="#L1007">1007</a></th><td>                                                IF s = NIL THEN s := Strings.NewString("defaultMenu") END;</td></tr><tr><th id="L1008"><a href="#L1008">1008</a></th><td>                                                NEW(formMenu, s);</td></tr><tr><th id="L1009"><a href="#L1009">1009</a></th><td>                                                style.form.AddFormComponent(formMenu);</td></tr><tr><th id="L1010"><a href="#L1010">1010</a></th><td>                                                AddVisualComponent(formMenu.button, style);</td></tr><tr><th id="L1011"><a href="#L1011">1011</a></th><td>                                                AddText(Strings.NewString(" "), style);</td></tr><tr><th id="L1012"><a href="#L1012">1012</a></th><td>                                                TransformContent(elem, style);</td></tr><tr><th id="L1013"><a href="#L1013">1013</a></th><td>                                                formMenu := NIL;</td></tr><tr><th id="L1014"><a href="#L1014">1014</a></th><td>                                        END;</td></tr><tr><th id="L1015"><a href="#L1015">1015</a></th><td>                                ELSIF name^="SMALL" THEN</td></tr><tr><th id="L1016"><a href="#L1016">1016</a></th><td>                                        IF style.size &gt; 1 THEN DEC(style.size); END;</td></tr><tr><th id="L1017"><a href="#L1017">1017</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1018"><a href="#L1018">1018</a></th><td>                                ELSIF name^="SPAN" THEN</td></tr><tr><th id="L1019"><a href="#L1019">1019</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1020"><a href="#L1020">1020</a></th><td>                                ELSIF name^="STRIKE" THEN</td></tr><tr><th id="L1021"><a href="#L1021">1021</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L1022"><a href="#L1022">1022</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1023"><a href="#L1023">1023</a></th><td>                                ELSIF name^="STRONG" THEN</td></tr><tr><th id="L1024"><a href="#L1024">1024</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L1025"><a href="#L1025">1025</a></th><td>                                                style.style := 1;</td></tr><tr><th id="L1026"><a href="#L1026">1026</a></th><td>                                        ELSIF style.style = 2 THEN</td></tr><tr><th id="L1027"><a href="#L1027">1027</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L1028"><a href="#L1028">1028</a></th><td>                                        END;</td></tr><tr><th id="L1029"><a href="#L1029">1029</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1030"><a href="#L1030">1030</a></th><td>                                ELSIF name^="STYLE" THEN</td></tr><tr><th id="L1031"><a href="#L1031">1031</a></th><td>                                        (* ignore *)</td></tr><tr><th id="L1032"><a href="#L1032">1032</a></th><td>                                ELSIF name^="SUB" THEN</td></tr><tr><th id="L1033"><a href="#L1033">1033</a></th><td>                                        IF style.shift = 0 THEN style.shift := 1; END;</td></tr><tr><th id="L1034"><a href="#L1034">1034</a></th><td>                                        IF style.size &gt;1 THEN DEC(style.size); END;</td></tr><tr><th id="L1035"><a href="#L1035">1035</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1036"><a href="#L1036">1036</a></th><td>                                ELSIF name^="SUP" THEN</td></tr><tr><th id="L1037"><a href="#L1037">1037</a></th><td>                                        IF style.shift = 0 THEN style.shift := -1; END;</td></tr><tr><th id="L1038"><a href="#L1038">1038</a></th><td>                                        IF style.size &gt;1 THEN DEC(style.size); END;</td></tr><tr><th id="L1039"><a href="#L1039">1039</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1040"><a href="#L1040">1040</a></th><td>                                ELSIF name^="SVG" THEN</td></tr><tr><th id="L1041"><a href="#L1041">1041</a></th><td>                                        AddSVG(elem, style);</td></tr><tr><th id="L1042"><a href="#L1042">1042</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L1043"><a href="#L1043">1043</a></th><td>                                END;</td></tr><tr><th id="L1044"><a href="#L1044">1044</a></th><td>                        |"T":</td></tr><tr><th id="L1045"><a href="#L1045">1045</a></th><td>                                IF name^="TABLE" THEN</td></tr><tr><th id="L1046"><a href="#L1046">1046</a></th><td>                                        AddTable(elem, style);</td></tr><tr><th id="L1047"><a href="#L1047">1047</a></th><td>                                ELSIF name^="TEXTAREA" THEN</td></tr><tr><th id="L1048"><a href="#L1048">1048</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L1049"><a href="#L1049">1049</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1050"><a href="#L1050">1050</a></th><td>                                ELSIF name^="TITLE" THEN</td></tr><tr><th id="L1051"><a href="#L1051">1051</a></th><td>                                        IF title = NIL THEN</td></tr><tr><th id="L1052"><a href="#L1052">1052</a></th><td>                                                exitLoop := FALSE;</td></tr><tr><th id="L1053"><a href="#L1053">1053</a></th><td>                                                enum := elem.GetContents();</td></tr><tr><th id="L1054"><a href="#L1054">1054</a></th><td>                                                WHILE enum.HasMoreElements() &amp; ~exitLoop DO</td></tr><tr><th id="L1055"><a href="#L1055">1055</a></th><td>                                                        p := enum.GetNext();</td></tr><tr><th id="L1056"><a href="#L1056">1056</a></th><td>                                                        IF p IS XML.ArrayChars THEN</td></tr><tr><th id="L1057"><a href="#L1057">1057</a></th><td>                                                                title := p(XML.ArrayChars).GetStr();</td></tr><tr><th id="L1058"><a href="#L1058">1058</a></th><td>                                                                title := ReplaceWhiteSpaces(title);</td></tr><tr><th id="L1059"><a href="#L1059">1059</a></th><td>                                                                title := charsetConv(title^);</td></tr><tr><th id="L1060"><a href="#L1060">1060</a></th><td>                                                                title := TransformCharEnt(title);</td></tr><tr><th id="L1061"><a href="#L1061">1061</a></th><td>                                                                exitLoop := TRUE;</td></tr><tr><th id="L1062"><a href="#L1062">1062</a></th><td>                                                        END;</td></tr><tr><th id="L1063"><a href="#L1063">1063</a></th><td>                                                END;</td></tr><tr><th id="L1064"><a href="#L1064">1064</a></th><td>                                        END;</td></tr><tr><th id="L1065"><a href="#L1065">1065</a></th><td>                                ELSIF name^="TT" THEN</td></tr><tr><th id="L1066"><a href="#L1066">1066</a></th><td>                                        style.font := Strings.NewString(monospace);</td></tr><tr><th id="L1067"><a href="#L1067">1067</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1068"><a href="#L1068">1068</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L1069"><a href="#L1069">1069</a></th><td>                                END;</td></tr><tr><th id="L1070"><a href="#L1070">1070</a></th><td>                        |"U":</td></tr><tr><th id="L1071"><a href="#L1071">1071</a></th><td>                                IF name^="U" THEN</td></tr><tr><th id="L1072"><a href="#L1072">1072</a></th><td>                                        (* to be implemented *)</td></tr><tr><th id="L1073"><a href="#L1073">1073</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1074"><a href="#L1074">1074</a></th><td>                                ELSIF name^="UL" THEN</td></tr><tr><th id="L1075"><a href="#L1075">1075</a></th><td>                                        ul();</td></tr><tr><th id="L1076"><a href="#L1076">1076</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L1077"><a href="#L1077">1077</a></th><td>                                END;</td></tr><tr><th id="L1078"><a href="#L1078">1078</a></th><td>                        |"V":</td></tr><tr><th id="L1079"><a href="#L1079">1079</a></th><td>                                IF name^="VAR" THEN</td></tr><tr><th id="L1080"><a href="#L1080">1080</a></th><td>                                        IF style.style = 0 THEN</td></tr><tr><th id="L1081"><a href="#L1081">1081</a></th><td>                                                style.style := 2;</td></tr><tr><th id="L1082"><a href="#L1082">1082</a></th><td>                                        ELSIF style.style = 1 THEN</td></tr><tr><th id="L1083"><a href="#L1083">1083</a></th><td>                                                style.style := 3;</td></tr><tr><th id="L1084"><a href="#L1084">1084</a></th><td>                                        END;</td></tr><tr><th id="L1085"><a href="#L1085">1085</a></th><td>                                        TransformContent(elem, style);</td></tr><tr><th id="L1086"><a href="#L1086">1086</a></th><td>                                ELSE TransformContent(elem, style);</td></tr><tr><th id="L1087"><a href="#L1087">1087</a></th><td>                                END;</td></tr><tr><th id="L1088"><a href="#L1088">1088</a></th><td>                        ELSE</td></tr><tr><th id="L1089"><a href="#L1089">1089</a></th><td>                                TransformContent(elem, style);</td></tr><tr><th id="L1090"><a href="#L1090">1090</a></th><td>                        END;</td></tr><tr><th id="L1091"><a href="#L1091">1091</a></th><td>                END TransformElement;</td></tr><tr><th id="L1092"><a href="#L1092">1092</a></th><td></td></tr><tr><th id="L1093"><a href="#L1093">1093</a></th><td>                PROCEDURE SetAlignmentAndIndent(align : LONGINT; indent : LONGINT);</td></tr><tr><th id="L1094"><a href="#L1094">1094</a></th><td>                VAR</td></tr><tr><th id="L1095"><a href="#L1095">1095</a></th><td>                        styleAttrPar : XML.Attribute;</td></tr><tr><th id="L1096"><a href="#L1096">1096</a></th><td>                        s : String;</td></tr><tr><th id="L1097"><a href="#L1097">1097</a></th><td>                        aoc : ARRAY 5 OF CHAR;</td></tr><tr><th id="L1098"><a href="#L1098">1098</a></th><td>                BEGIN</td></tr><tr><th id="L1099"><a href="#L1099">1099</a></th><td>                        IF (align # currentAlign) OR (indent # currentIndent) THEN</td></tr><tr><th id="L1100"><a href="#L1100">1100</a></th><td>                                NEW(paragraph);</td></tr><tr><th id="L1101"><a href="#L1101">1101</a></th><td>                                paragraph.SetName("Paragraph");</td></tr><tr><th id="L1102"><a href="#L1102">1102</a></th><td>                                NEW(styleAttrPar); s := Strings.NewString("style"); styleAttrPar.SetName(s^);</td></tr><tr><th id="L1103"><a href="#L1103">1103</a></th><td>                                IF align = alignCenter THEN</td></tr><tr><th id="L1104"><a href="#L1104">1104</a></th><td>                                        s := Strings.NewString("AdHoc 1 ");</td></tr><tr><th id="L1105"><a href="#L1105">1105</a></th><td>                                ELSIF align = alignRight THEN</td></tr><tr><th id="L1106"><a href="#L1106">1106</a></th><td>                                        s := Strings.NewString("AdHoc 2 ");</td></tr><tr><th id="L1107"><a href="#L1107">1107</a></th><td>                                ELSIF align = alignJustify THEN</td></tr><tr><th id="L1108"><a href="#L1108">1108</a></th><td>                                        s := Strings.NewString("AdHoc 3 ");</td></tr><tr><th id="L1109"><a href="#L1109">1109</a></th><td>                                ELSE</td></tr><tr><th id="L1110"><a href="#L1110">1110</a></th><td>                                        s := Strings.NewString("AdHoc 0 "); (* Left-aligned *)</td></tr><tr><th id="L1111"><a href="#L1111">1111</a></th><td>                                END;</td></tr><tr><th id="L1112"><a href="#L1112">1112</a></th><td>                                IF indent &gt; 0 THEN</td></tr><tr><th id="L1113"><a href="#L1113">1113</a></th><td>                                        (* firstline indent *)</td></tr><tr><th id="L1114"><a href="#L1114">1114</a></th><td>                                        Strings.IntToStr(indent * 40, aoc);</td></tr><tr><th id="L1115"><a href="#L1115">1115</a></th><td>                                        Strings.TrimWS(aoc);</td></tr><tr><th id="L1116"><a href="#L1116">1116</a></th><td>                                        s := Strings.ConcatToNew(s^, aoc);</td></tr><tr><th id="L1117"><a href="#L1117">1117</a></th><td>                                        s := Strings.ConcatToNew(s^, " ");</td></tr><tr><th id="L1118"><a href="#L1118">1118</a></th><td>                                        (* left indent *)</td></tr><tr><th id="L1119"><a href="#L1119">1119</a></th><td>                                        Strings.IntToStr(indent * 40 + 20, aoc);</td></tr><tr><th id="L1120"><a href="#L1120">1120</a></th><td>                                        Strings.TrimWS(aoc);</td></tr><tr><th id="L1121"><a href="#L1121">1121</a></th><td>                                        s := Strings.ConcatToNew(s^, aoc);</td></tr><tr><th id="L1122"><a href="#L1122">1122</a></th><td>                                        (* right, top, bottom indent *)</td></tr><tr><th id="L1123"><a href="#L1123">1123</a></th><td>                                        s := Strings.ConcatToNew(s^, " 0 0 0");</td></tr><tr><th id="L1124"><a href="#L1124">1124</a></th><td>                                ELSE</td></tr><tr><th id="L1125"><a href="#L1125">1125</a></th><td>                                        s := Strings.ConcatToNew(s^, "0 0 0 0 0");</td></tr><tr><th id="L1126"><a href="#L1126">1126</a></th><td>                                END;</td></tr><tr><th id="L1127"><a href="#L1127">1127</a></th><td>                                styleAttrPar.SetValue(s^);</td></tr><tr><th id="L1128"><a href="#L1128">1128</a></th><td>                                paragraph.AddAttribute(styleAttrPar);</td></tr><tr><th id="L1129"><a href="#L1129">1129</a></th><td>                                txtElem.AddContent(paragraph);</td></tr><tr><th id="L1130"><a href="#L1130">1130</a></th><td>                                currentAlign := align;</td></tr><tr><th id="L1131"><a href="#L1131">1131</a></th><td>                                currentIndent := indent;</td></tr><tr><th id="L1132"><a href="#L1132">1132</a></th><td>                        END;</td></tr><tr><th id="L1133"><a href="#L1133">1133</a></th><td>                END SetAlignmentAndIndent;</td></tr><tr><th id="L1134"><a href="#L1134">1134</a></th><td></td></tr><tr><th id="L1135"><a href="#L1135">1135</a></th><td>                PROCEDURE NewLine(allowMultiple : BOOLEAN);</td></tr><tr><th id="L1136"><a href="#L1136">1136</a></th><td>                VAR</td></tr><tr><th id="L1137"><a href="#L1137">1137</a></th><td>                        span : XML.Element;</td></tr><tr><th id="L1138"><a href="#L1138">1138</a></th><td>                        styleAttr : XML.Attribute;</td></tr><tr><th id="L1139"><a href="#L1139">1139</a></th><td>                        cdata : XML.CDataSect;</td></tr><tr><th id="L1140"><a href="#L1140">1140</a></th><td>                        aoc : ARRAY 39 OF CHAR;</td></tr><tr><th id="L1141"><a href="#L1141">1141</a></th><td>                BEGIN</td></tr><tr><th id="L1142"><a href="#L1142">1142</a></th><td>                        IF (currentText = cNewLine) &amp; ~allowMultiple THEN RETURN; END;</td></tr><tr><th id="L1143"><a href="#L1143">1143</a></th><td>                        currentText := cNewLine;</td></tr><tr><th id="L1144"><a href="#L1144">1144</a></th><td>                        NEW(span);      span.SetName("Span");</td></tr><tr><th id="L1145"><a href="#L1145">1145</a></th><td>                        aoc := "style";</td></tr><tr><th id="L1146"><a href="#L1146">1146</a></th><td>                        NEW(styleAttr); styleAttr.SetName(aoc);</td></tr><tr><th id="L1147"><a href="#L1147">1147</a></th><td>                        aoc := "AdHoc Oberon 12 0 0 00000000 00000000";</td></tr><tr><th id="L1148"><a href="#L1148">1148</a></th><td>                        styleAttr.SetValue(aoc);</td></tr><tr><th id="L1149"><a href="#L1149">1149</a></th><td>                        NEW(cdata);</td></tr><tr><th id="L1150"><a href="#L1150">1150</a></th><td>                        cdata.SetStr(crlfStr^);</td></tr><tr><th id="L1151"><a href="#L1151">1151</a></th><td>                        span.AddAttribute(styleAttr);</td></tr><tr><th id="L1152"><a href="#L1152">1152</a></th><td>                        span.AddContent(cdata);</td></tr><tr><th id="L1153"><a href="#L1153">1153</a></th><td>                        paragraph.AddContent(span);</td></tr><tr><th id="L1154"><a href="#L1154">1154</a></th><td>                END NewLine;</td></tr><tr><th id="L1155"><a href="#L1155">1155</a></th><td></td></tr><tr><th id="L1156"><a href="#L1156">1156</a></th><td>                PROCEDURE NewParagraph(allowMultiple : BOOLEAN);</td></tr><tr><th id="L1157"><a href="#L1157">1157</a></th><td>                VAR</td></tr><tr><th id="L1158"><a href="#L1158">1158</a></th><td>                        span : XML.Element;</td></tr><tr><th id="L1159"><a href="#L1159">1159</a></th><td>                        styleAttr : XML.Attribute;</td></tr><tr><th id="L1160"><a href="#L1160">1160</a></th><td>                        cdata : XML.CDataSect;</td></tr><tr><th id="L1161"><a href="#L1161">1161</a></th><td>                        aoc : ARRAY 39 OF CHAR;</td></tr><tr><th id="L1162"><a href="#L1162">1162</a></th><td>                BEGIN</td></tr><tr><th id="L1163"><a href="#L1163">1163</a></th><td>                        IF (currentText = cParagraph) &amp; ~allowMultiple THEN RETURN; END;</td></tr><tr><th id="L1164"><a href="#L1164">1164</a></th><td>                        NEW(cdata);</td></tr><tr><th id="L1165"><a href="#L1165">1165</a></th><td>                        IF (currentText = cNewLine) THEN</td></tr><tr><th id="L1166"><a href="#L1166">1166</a></th><td>                                cdata.SetStr(crlfStr^);</td></tr><tr><th id="L1167"><a href="#L1167">1167</a></th><td>                        ELSE</td></tr><tr><th id="L1168"><a href="#L1168">1168</a></th><td>                                cdata.SetStr(crlfDoubleStr^);</td></tr><tr><th id="L1169"><a href="#L1169">1169</a></th><td>                        END;</td></tr><tr><th id="L1170"><a href="#L1170">1170</a></th><td>                        currentText := cParagraph;</td></tr><tr><th id="L1171"><a href="#L1171">1171</a></th><td>                        NEW(span);      span.SetName("Span");</td></tr><tr><th id="L1172"><a href="#L1172">1172</a></th><td>                        aoc := "style";</td></tr><tr><th id="L1173"><a href="#L1173">1173</a></th><td>                        NEW(styleAttr); styleAttr.SetName(aoc);</td></tr><tr><th id="L1174"><a href="#L1174">1174</a></th><td>                        aoc := "AdHoc Oberon 16 0 0 00000000 00000000";</td></tr><tr><th id="L1175"><a href="#L1175">1175</a></th><td>                        styleAttr.SetValue(aoc);</td></tr><tr><th id="L1176"><a href="#L1176">1176</a></th><td>                        span.AddAttribute(styleAttr);</td></tr><tr><th id="L1177"><a href="#L1177">1177</a></th><td>                        span.AddContent(cdata);</td></tr><tr><th id="L1178"><a href="#L1178">1178</a></th><td>                        paragraph.AddContent(span);</td></tr><tr><th id="L1179"><a href="#L1179">1179</a></th><td>                END NewParagraph;</td></tr><tr><th id="L1180"><a href="#L1180">1180</a></th><td></td></tr><tr><th id="L1181"><a href="#L1181">1181</a></th><td>                PROCEDURE AddText(txt : String; style : TextStyle);</td></tr><tr><th id="L1182"><a href="#L1182">1182</a></th><td>                VAR</td></tr><tr><th id="L1183"><a href="#L1183">1183</a></th><td>                        fontsize : LONGINT;</td></tr><tr><th id="L1184"><a href="#L1184">1184</a></th><td>                        baselineshift : LONGINT;</td></tr><tr><th id="L1185"><a href="#L1185">1185</a></th><td>                        span : XML.Element;</td></tr><tr><th id="L1186"><a href="#L1186">1186</a></th><td>                        s : String;</td></tr><tr><th id="L1187"><a href="#L1187">1187</a></th><td>                        aoc : ARRAY 33 OF CHAR;</td></tr><tr><th id="L1188"><a href="#L1188">1188</a></th><td>                        styleAttr : XML.Attribute;</td></tr><tr><th id="L1189"><a href="#L1189">1189</a></th><td>                        linkAttr : XML.Attribute;</td></tr><tr><th id="L1190"><a href="#L1190">1190</a></th><td>                        cdata : XML.CDataSect;</td></tr><tr><th id="L1191"><a href="#L1191">1191</a></th><td>                        dyn : DynamicStrings.DynamicString;</td></tr><tr><th id="L1192"><a href="#L1192">1192</a></th><td>                BEGIN</td></tr><tr><th id="L1193"><a href="#L1193">1193</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L1194"><a href="#L1194">1194</a></th><td>                        IF ~style.preformatted THEN</td></tr><tr><th id="L1195"><a href="#L1195">1195</a></th><td>                                IF StringHasNewLine(txt^) &amp; StringIsWhiteSpace(txt^) THEN RETURN; END;</td></tr><tr><th id="L1196"><a href="#L1196">1196</a></th><td>                                txt := ReplaceWhiteSpaces(txt);</td></tr><tr><th id="L1197"><a href="#L1197">1197</a></th><td>                        END;</td></tr><tr><th id="L1198"><a href="#L1198">1198</a></th><td>                        txt := charsetConv(txt^);</td></tr><tr><th id="L1199"><a href="#L1199">1199</a></th><td>                        txt := TransformCharEnt(txt);</td></tr><tr><th id="L1200"><a href="#L1200">1200</a></th><td>                        fontsize := MapFontSize(style.font, style.size);</td></tr><tr><th id="L1201"><a href="#L1201">1201</a></th><td>                        baselineshift := MapBaselineShift(style.size);</td></tr><tr><th id="L1202"><a href="#L1202">1202</a></th><td>                        NEW(span); aoc := "Span"; span.SetName(aoc);</td></tr><tr><th id="L1203"><a href="#L1203">1203</a></th><td>                        IF style.link # NIL THEN</td></tr><tr><th id="L1204"><a href="#L1204">1204</a></th><td>                                NEW(linkAttr); aoc := "link"; linkAttr.SetName(aoc);</td></tr><tr><th id="L1205"><a href="#L1205">1205</a></th><td>                                span.AddAttribute(linkAttr);</td></tr><tr><th id="L1206"><a href="#L1206">1206</a></th><td>                                s := EncodeLinkData(style.link, style.linktarget, url);</td></tr><tr><th id="L1207"><a href="#L1207">1207</a></th><td>                                linkAttr.SetValue(s^);</td></tr><tr><th id="L1208"><a href="#L1208">1208</a></th><td>                        END;</td></tr><tr><th id="L1209"><a href="#L1209">1209</a></th><td>                        NEW(styleAttr); aoc := "style"; styleAttr.SetName(aoc);</td></tr><tr><th id="L1210"><a href="#L1210">1210</a></th><td>                        NEW(dyn);</td></tr><tr><th id="L1211"><a href="#L1211">1211</a></th><td>                        (* AdHoc *)</td></tr><tr><th id="L1212"><a href="#L1212">1212</a></th><td>                        aoc := "AdHoc "; dyn.Append(aoc);</td></tr><tr><th id="L1213"><a href="#L1213">1213</a></th><td>                        (* FontName *)</td></tr><tr><th id="L1214"><a href="#L1214">1214</a></th><td>                        dyn.Append(style.font^);</td></tr><tr><th id="L1215"><a href="#L1215">1215</a></th><td>                        aoc := " "; dyn.Append(aoc);</td></tr><tr><th id="L1216"><a href="#L1216">1216</a></th><td>                        (* Fontsize *)</td></tr><tr><th id="L1217"><a href="#L1217">1217</a></th><td>                        Strings.IntToStr(fontsize, aoc); dyn.Append(aoc);</td></tr><tr><th id="L1218"><a href="#L1218">1218</a></th><td>                        aoc := " "; dyn.Append(aoc);</td></tr><tr><th id="L1219"><a href="#L1219">1219</a></th><td>                        (* Fontstyle: normal, bold, italic, bold+italic *)</td></tr><tr><th id="L1220"><a href="#L1220">1220</a></th><td>                        Strings.IntToStr(style.style, aoc); dyn.Append(aoc);</td></tr><tr><th id="L1221"><a href="#L1221">1221</a></th><td>                        aoc := " "; dyn.Append(aoc);</td></tr><tr><th id="L1222"><a href="#L1222">1222</a></th><td>                        (* Baseline-Shift *)</td></tr><tr><th id="L1223"><a href="#L1223">1223</a></th><td>                        IF style.shift = 1 THEN</td></tr><tr><th id="L1224"><a href="#L1224">1224</a></th><td>                                Strings.IntToStr(baselineshift, aoc);</td></tr><tr><th id="L1225"><a href="#L1225">1225</a></th><td>                        ELSIF style.shift = -1 THEN</td></tr><tr><th id="L1226"><a href="#L1226">1226</a></th><td>                                Strings.IntToStr(0-baselineshift, aoc);</td></tr><tr><th id="L1227"><a href="#L1227">1227</a></th><td>                        ELSE</td></tr><tr><th id="L1228"><a href="#L1228">1228</a></th><td>                                aoc := "0";</td></tr><tr><th id="L1229"><a href="#L1229">1229</a></th><td>                        END;</td></tr><tr><th id="L1230"><a href="#L1230">1230</a></th><td>                        dyn.Append(aoc);</td></tr><tr><th id="L1231"><a href="#L1231">1231</a></th><td>                        aoc := " "; dyn.Append(aoc);</td></tr><tr><th id="L1232"><a href="#L1232">1232</a></th><td>                        (* Text-Color *)</td></tr><tr><th id="L1233"><a href="#L1233">1233</a></th><td>                        Strings.IntToHexStr(style.color * 0100H + 0FFH, 7, aoc);</td></tr><tr><th id="L1234"><a href="#L1234">1234</a></th><td>                        dyn.Append(aoc);</td></tr><tr><th id="L1235"><a href="#L1235">1235</a></th><td>                        aoc := " ";</td></tr><tr><th id="L1236"><a href="#L1236">1236</a></th><td>                        dyn.Append(aoc);</td></tr><tr><th id="L1237"><a href="#L1237">1237</a></th><td>                        (* Background-Color *)</td></tr><tr><th id="L1238"><a href="#L1238">1238</a></th><td>                        IF style.bgcolorPresent THEN</td></tr><tr><th id="L1239"><a href="#L1239">1239</a></th><td>                                Strings.IntToHexStr(style.bgcolor * 0100H + 0FFH, 7, aoc);</td></tr><tr><th id="L1240"><a href="#L1240">1240</a></th><td>                        ELSE</td></tr><tr><th id="L1241"><a href="#L1241">1241</a></th><td>                                aoc := "00000000";</td></tr><tr><th id="L1242"><a href="#L1242">1242</a></th><td>                        END;</td></tr><tr><th id="L1243"><a href="#L1243">1243</a></th><td>                        dyn.Append(aoc);</td></tr><tr><th id="L1244"><a href="#L1244">1244</a></th><td>                        s := dyn.ToArrOfChar();</td></tr><tr><th id="L1245"><a href="#L1245">1245</a></th><td>                        styleAttr.SetValue(s^);</td></tr><tr><th id="L1246"><a href="#L1246">1246</a></th><td>                        span.AddAttribute(styleAttr);</td></tr><tr><th id="L1247"><a href="#L1247">1247</a></th><td></td></tr><tr><th id="L1248"><a href="#L1248">1248</a></th><td>                        NEW(cdata);</td></tr><tr><th id="L1249"><a href="#L1249">1249</a></th><td>                        cdata.SetStr(txt^);</td></tr><tr><th id="L1250"><a href="#L1250">1250</a></th><td>                        span.AddContent(cdata);</td></tr><tr><th id="L1251"><a href="#L1251">1251</a></th><td>                        paragraph.AddContent(span);</td></tr><tr><th id="L1252"><a href="#L1252">1252</a></th><td>                        currentText := cText;</td></tr><tr><th id="L1253"><a href="#L1253">1253</a></th><td>                END AddText;</td></tr><tr><th id="L1254"><a href="#L1254">1254</a></th><td></td></tr><tr><th id="L1255"><a href="#L1255">1255</a></th><td>                PROCEDURE AddImage(src : String; x : LONGINT; y : LONGINT; style : TextStyle);</td></tr><tr><th id="L1256"><a href="#L1256">1256</a></th><td>                VAR</td></tr><tr><th id="L1257"><a href="#L1257">1257</a></th><td>                        object : XML.Element;</td></tr><tr><th id="L1258"><a href="#L1258">1258</a></th><td>                        img : WebBrowserComponents.StretchImagePanel;</td></tr><tr><th id="L1259"><a href="#L1259">1259</a></th><td>                        imgLink : WebBrowserComponents.StretchImageLinkPanel;</td></tr><tr><th id="L1260"><a href="#L1260">1260</a></th><td>                        msg : WMTextView.LinkWrapper;</td></tr><tr><th id="L1261"><a href="#L1261">1261</a></th><td>                BEGIN</td></tr><tr><th id="L1262"><a href="#L1262">1262</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L1263"><a href="#L1263">1263</a></th><td>                        NEW(object);</td></tr><tr><th id="L1264"><a href="#L1264">1264</a></th><td>                        object.SetName("Object");</td></tr><tr><th id="L1265"><a href="#L1265">1265</a></th><td>                        paragraph.AddContent(object);</td></tr><tr><th id="L1266"><a href="#L1266">1266</a></th><td>                        IF style.link # NIL THEN</td></tr><tr><th id="L1267"><a href="#L1267">1267</a></th><td>                                NEW(msg);</td></tr><tr><th id="L1268"><a href="#L1268">1268</a></th><td>                                msg.link := EncodeLinkData(style.link, style.linktarget, url);</td></tr><tr><th id="L1269"><a href="#L1269">1269</a></th><td>                                NEW(imgLink, NIL, src, x, y, loadLink, msg);</td></tr><tr><th id="L1270"><a href="#L1270">1270</a></th><td>                                object.AddContent(imgLink);</td></tr><tr><th id="L1271"><a href="#L1271">1271</a></th><td>                                ToEmbeddedObjectsList(imgLink);</td></tr><tr><th id="L1272"><a href="#L1272">1272</a></th><td>                        ELSE</td></tr><tr><th id="L1273"><a href="#L1273">1273</a></th><td>                                NEW(img, NIL, src, x, y);</td></tr><tr><th id="L1274"><a href="#L1274">1274</a></th><td>                                object.AddContent(img);</td></tr><tr><th id="L1275"><a href="#L1275">1275</a></th><td>                                ToEmbeddedObjectsList(img);</td></tr><tr><th id="L1276"><a href="#L1276">1276</a></th><td>                        END;</td></tr><tr><th id="L1277"><a href="#L1277">1277</a></th><td>                        currentText := cText;</td></tr><tr><th id="L1278"><a href="#L1278">1278</a></th><td>                END AddImage;</td></tr><tr><th id="L1279"><a href="#L1279">1279</a></th><td></td></tr><tr><th id="L1280"><a href="#L1280">1280</a></th><td>                PROCEDURE AddSVG(svgRoot: XML.Element; style : TextStyle);</td></tr><tr><th id="L1281"><a href="#L1281">1281</a></th><td>                VAR</td></tr><tr><th id="L1282"><a href="#L1282">1282</a></th><td>                        object : XML.Element;</td></tr><tr><th id="L1283"><a href="#L1283">1283</a></th><td>                        svg : WebBrowserComponents.SVGPanel;</td></tr><tr><th id="L1284"><a href="#L1284">1284</a></th><td>                        svgLink : WebBrowserComponents.SVGLinkPanel;</td></tr><tr><th id="L1285"><a href="#L1285">1285</a></th><td>                        msg : WMTextView.LinkWrapper;</td></tr><tr><th id="L1286"><a href="#L1286">1286</a></th><td>                BEGIN</td></tr><tr><th id="L1287"><a href="#L1287">1287</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L1288"><a href="#L1288">1288</a></th><td>                        NEW(object);</td></tr><tr><th id="L1289"><a href="#L1289">1289</a></th><td>                        object.SetName("Object");</td></tr><tr><th id="L1290"><a href="#L1290">1290</a></th><td>                        paragraph.AddContent(object);</td></tr><tr><th id="L1291"><a href="#L1291">1291</a></th><td>                        IF style.link # NIL THEN</td></tr><tr><th id="L1292"><a href="#L1292">1292</a></th><td>                                NEW(msg);</td></tr><tr><th id="L1293"><a href="#L1293">1293</a></th><td>                                msg.link := EncodeLinkData(style.link, style.linktarget, url);</td></tr><tr><th id="L1294"><a href="#L1294">1294</a></th><td>                                NEW(svgLink, svgRoot, loadLink, msg);</td></tr><tr><th id="L1295"><a href="#L1295">1295</a></th><td>                                object.AddContent(svgLink);</td></tr><tr><th id="L1296"><a href="#L1296">1296</a></th><td>                                ToEmbeddedObjectsList(svgLink);</td></tr><tr><th id="L1297"><a href="#L1297">1297</a></th><td>                        ELSE</td></tr><tr><th id="L1298"><a href="#L1298">1298</a></th><td>                                NEW(svg, svgRoot);</td></tr><tr><th id="L1299"><a href="#L1299">1299</a></th><td>                                object.AddContent(svg);</td></tr><tr><th id="L1300"><a href="#L1300">1300</a></th><td>                                ToEmbeddedObjectsList(svg);</td></tr><tr><th id="L1301"><a href="#L1301">1301</a></th><td>                        END;</td></tr><tr><th id="L1302"><a href="#L1302">1302</a></th><td>                        currentText := cText;</td></tr><tr><th id="L1303"><a href="#L1303">1303</a></th><td>                END AddSVG;</td></tr><tr><th id="L1304"><a href="#L1304">1304</a></th><td></td></tr><tr><th id="L1305"><a href="#L1305">1305</a></th><td>                PROCEDURE ToEmbeddedObjectsList(obj : VisualComponent);</td></tr><tr><th id="L1306"><a href="#L1306">1306</a></th><td>                VAR</td></tr><tr><th id="L1307"><a href="#L1307">1307</a></th><td>                        item : EmbeddedObject;</td></tr><tr><th id="L1308"><a href="#L1308">1308</a></th><td>                BEGIN</td></tr><tr><th id="L1309"><a href="#L1309">1309</a></th><td>                        NEW(item);</td></tr><tr><th id="L1310"><a href="#L1310">1310</a></th><td>                        item.object := obj;</td></tr><tr><th id="L1311"><a href="#L1311">1311</a></th><td>                        item.prev := embeddedObjectsList;</td></tr><tr><th id="L1312"><a href="#L1312">1312</a></th><td>                        embeddedObjectsList := item;</td></tr><tr><th id="L1313"><a href="#L1313">1313</a></th><td>                END ToEmbeddedObjectsList;</td></tr><tr><th id="L1314"><a href="#L1314">1314</a></th><td></td></tr><tr><th id="L1315"><a href="#L1315">1315</a></th><td>                PROCEDURE AddHR(align : LONGINT);</td></tr><tr><th id="L1316"><a href="#L1316">1316</a></th><td>                VAR</td></tr><tr><th id="L1317"><a href="#L1317">1317</a></th><td>                        object : XML.Element;</td></tr><tr><th id="L1318"><a href="#L1318">1318</a></th><td>                        hr : WebBrowserComponents.HR;</td></tr><tr><th id="L1319"><a href="#L1319">1319</a></th><td>                BEGIN</td></tr><tr><th id="L1320"><a href="#L1320">1320</a></th><td>                        SetAlignmentAndIndent(align, currentIndent);</td></tr><tr><th id="L1321"><a href="#L1321">1321</a></th><td>                        currentText := cText;</td></tr><tr><th id="L1322"><a href="#L1322">1322</a></th><td>                        NEW(object);</td></tr><tr><th id="L1323"><a href="#L1323">1323</a></th><td>                        object.SetName("Object");</td></tr><tr><th id="L1324"><a href="#L1324">1324</a></th><td>                        paragraph.AddContent(object);</td></tr><tr><th id="L1325"><a href="#L1325">1325</a></th><td>                        NEW(hr, initWidth);</td></tr><tr><th id="L1326"><a href="#L1326">1326</a></th><td>                        object.AddContent(hr);</td></tr><tr><th id="L1327"><a href="#L1327">1327</a></th><td>                        ToEmbeddedObjectsList(hr);</td></tr><tr><th id="L1328"><a href="#L1328">1328</a></th><td>                END AddHR;</td></tr><tr><th id="L1329"><a href="#L1329">1329</a></th><td></td></tr><tr><th id="L1330"><a href="#L1330">1330</a></th><td>                PROCEDURE AddTable(tableElem : XML.Element; style : TextStyle);</td></tr><tr><th id="L1331"><a href="#L1331">1331</a></th><td>                VAR</td></tr><tr><th id="L1332"><a href="#L1332">1332</a></th><td>                        object : XML.Element;</td></tr><tr><th id="L1333"><a href="#L1333">1333</a></th><td>                        table : Table;</td></tr><tr><th id="L1334"><a href="#L1334">1334</a></th><td>                BEGIN</td></tr><tr><th id="L1335"><a href="#L1335">1335</a></th><td>                        NewLine(FALSE);</td></tr><tr><th id="L1336"><a href="#L1336">1336</a></th><td>                        NEW(object);</td></tr><tr><th id="L1337"><a href="#L1337">1337</a></th><td>                        object.SetName("Object");</td></tr><tr><th id="L1338"><a href="#L1338">1338</a></th><td>                        NEW(table, tableElem, initWidth, style.align, textColor, linkColor, vlinkColor, alinkColor, url, loadLink, charset, frameName, style.form, baseAddress, baseTarget, sequencer, isTableContent);</td></tr><tr><th id="L1339"><a href="#L1339">1339</a></th><td>                        ToEmbeddedObjectsList(table);</td></tr><tr><th id="L1340"><a href="#L1340">1340</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L1341"><a href="#L1341">1341</a></th><td>                        object.AddContent(table);</td></tr><tr><th id="L1342"><a href="#L1342">1342</a></th><td>                        paragraph.AddContent(object);</td></tr><tr><th id="L1343"><a href="#L1343">1343</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L1344"><a href="#L1344">1344</a></th><td>                        NewLine(TRUE);</td></tr><tr><th id="L1345"><a href="#L1345">1345</a></th><td>                END AddTable;</td></tr><tr><th id="L1346"><a href="#L1346">1346</a></th><td></td></tr><tr><th id="L1347"><a href="#L1347">1347</a></th><td>                PROCEDURE AddVisualComponent(vc : WMComponents.VisualComponent; style : TextStyle);</td></tr><tr><th id="L1348"><a href="#L1348">1348</a></th><td>                VAR</td></tr><tr><th id="L1349"><a href="#L1349">1349</a></th><td>                        object : XML.Element;</td></tr><tr><th id="L1350"><a href="#L1350">1350</a></th><td>                BEGIN</td></tr><tr><th id="L1351"><a href="#L1351">1351</a></th><td>                        SetAlignmentAndIndent(style.align, style.indent);</td></tr><tr><th id="L1352"><a href="#L1352">1352</a></th><td>                        NEW(object);</td></tr><tr><th id="L1353"><a href="#L1353">1353</a></th><td>                        object.SetName("Object");</td></tr><tr><th id="L1354"><a href="#L1354">1354</a></th><td>                        object.AddContent(vc);</td></tr><tr><th id="L1355"><a href="#L1355">1355</a></th><td>                        paragraph.AddContent(object);</td></tr><tr><th id="L1356"><a href="#L1356">1356</a></th><td>                        currentText := cText;</td></tr><tr><th id="L1357"><a href="#L1357">1357</a></th><td>                END AddVisualComponent;</td></tr><tr><th id="L1358"><a href="#L1358">1358</a></th><td></td></tr><tr><th id="L1359"><a href="#L1359">1359</a></th><td>                PROCEDURE AddLabel(s : String);</td></tr><tr><th id="L1360"><a href="#L1360">1360</a></th><td>                VAR</td></tr><tr><th id="L1361"><a href="#L1361">1361</a></th><td>                        label : XML.Element;</td></tr><tr><th id="L1362"><a href="#L1362">1362</a></th><td>                        nameAttr : XML.Attribute;</td></tr><tr><th id="L1363"><a href="#L1363">1363</a></th><td>                        aoc : ARRAY 5 OF CHAR;</td></tr><tr><th id="L1364"><a href="#L1364">1364</a></th><td>                BEGIN</td></tr><tr><th id="L1365"><a href="#L1365">1365</a></th><td>                        NEW(label);</td></tr><tr><th id="L1366"><a href="#L1366">1366</a></th><td>                        label.SetName("Label");</td></tr><tr><th id="L1367"><a href="#L1367">1367</a></th><td>                        NEW(nameAttr); aoc := "name"; nameAttr.SetName(aoc);</td></tr><tr><th id="L1368"><a href="#L1368">1368</a></th><td>                        nameAttr.SetValue(s^);</td></tr><tr><th id="L1369"><a href="#L1369">1369</a></th><td>                        label.AddAttribute(nameAttr);</td></tr><tr><th id="L1370"><a href="#L1370">1370</a></th><td>                        paragraph.AddContent(label);</td></tr><tr><th id="L1371"><a href="#L1371">1371</a></th><td>                END AddLabel;</td></tr><tr><th id="L1372"><a href="#L1372">1372</a></th><td></td></tr><tr><th id="L1373"><a href="#L1373">1373</a></th><td>        END Transformer;</td></tr><tr><th id="L1374"><a href="#L1374">1374</a></th><td></td></tr><tr><th id="L1375"><a href="#L1375">1375</a></th><td></td></tr><tr><th id="L1376"><a href="#L1376">1376</a></th><td>        CellSizes = POINTER TO ARRAY OF LONGINT;</td></tr><tr><th id="L1377"><a href="#L1377">1377</a></th><td></td></tr><tr><th id="L1378"><a href="#L1378">1378</a></th><td>        StringArray = POINTER TO ARRAY OF String;</td></tr><tr><th id="L1379"><a href="#L1379">1379</a></th><td></td></tr><tr><th id="L1380"><a href="#L1380">1380</a></th><td>        CellWrapper = POINTER TO RECORD</td></tr><tr><th id="L1381"><a href="#L1381">1381</a></th><td>                cell : TableCell;</td></tr><tr><th id="L1382"><a href="#L1382">1382</a></th><td>        END;</td></tr><tr><th id="L1383"><a href="#L1383">1383</a></th><td></td></tr><tr><th id="L1384"><a href="#L1384">1384</a></th><td>        TableGrid = POINTER TO ARRAY OF ARRAY OF CellWrapper;</td></tr><tr><th id="L1385"><a href="#L1385">1385</a></th><td></td></tr><tr><th id="L1386"><a href="#L1386">1386</a></th><td>        Table* = OBJECT (VisualComponent)</td></tr><tr><th id="L1387"><a href="#L1387">1387</a></th><td>        VAR</td></tr><tr><th id="L1388"><a href="#L1388">1388</a></th><td>                tableElem : XML.Element;</td></tr><tr><th id="L1389"><a href="#L1389">1389</a></th><td>                parentWidth : LONGINT;</td></tr><tr><th id="L1390"><a href="#L1390">1390</a></th><td>                align- : LONGINT;</td></tr><tr><th id="L1391"><a href="#L1391">1391</a></th><td>                textColor, linkColor, vlinkColor, alinkColor : LONGINT;</td></tr><tr><th id="L1392"><a href="#L1392">1392</a></th><td>                url : String;</td></tr><tr><th id="L1393"><a href="#L1393">1393</a></th><td>                loadLink : WMEvents.EventListener;</td></tr><tr><th id="L1394"><a href="#L1394">1394</a></th><td>                charset : String;</td></tr><tr><th id="L1395"><a href="#L1395">1395</a></th><td>                frameName : String;</td></tr><tr><th id="L1396"><a href="#L1396">1396</a></th><td>                form : Form;</td></tr><tr><th id="L1397"><a href="#L1397">1397</a></th><td>                baseAddress : String;</td></tr><tr><th id="L1398"><a href="#L1398">1398</a></th><td>                baseTarget : String;</td></tr><tr><th id="L1399"><a href="#L1399">1399</a></th><td>                isSubtable : BOOLEAN;</td></tr><tr><th id="L1400"><a href="#L1400">1400</a></th><td>                width : LONGINT;</td></tr><tr><th id="L1401"><a href="#L1401">1401</a></th><td>                relativeWidth : BOOLEAN;</td></tr><tr><th id="L1402"><a href="#L1402">1402</a></th><td>                border : LONGINT;</td></tr><tr><th id="L1403"><a href="#L1403">1403</a></th><td>                rules : BOOLEAN;</td></tr><tr><th id="L1404"><a href="#L1404">1404</a></th><td>                cellspacing : LONGINT;</td></tr><tr><th id="L1405"><a href="#L1405">1405</a></th><td>                relativeCellspacing : BOOLEAN;</td></tr><tr><th id="L1406"><a href="#L1406">1406</a></th><td>                cellpadding : LONGINT;</td></tr><tr><th id="L1407"><a href="#L1407">1407</a></th><td>                relativeCellpadding : BOOLEAN;</td></tr><tr><th id="L1408"><a href="#L1408">1408</a></th><td>                bgColor : LONGINT;</td></tr><tr><th id="L1409"><a href="#L1409">1409</a></th><td>                grid : TableGrid;</td></tr><tr><th id="L1410"><a href="#L1410">1410</a></th><td>                colsCnt : LONGINT;</td></tr><tr><th id="L1411"><a href="#L1411">1411</a></th><td>                rowsCnt : LONGINT;</td></tr><tr><th id="L1412"><a href="#L1412">1412</a></th><td>                minCellWidths, maxCellWidths : CellSizes;</td></tr><tr><th id="L1413"><a href="#L1413">1413</a></th><td>                minTableWidth, maxTableWidth : LONGINT;</td></tr><tr><th id="L1414"><a href="#L1414">1414</a></th><td>                x, y : LONGINT;</td></tr><tr><th id="L1415"><a href="#L1415">1415</a></th><td>                internalWidth, internalHeight : LONGINT;</td></tr><tr><th id="L1416"><a href="#L1416">1416</a></th><td></td></tr><tr><th id="L1417"><a href="#L1417">1417</a></th><td>                PROCEDURE &amp; New*(tableElem : XML.Element; parentWidth : LONGINT; align : LONGINT; textColor, linkColor, vlinkColor, alinkColor : LONGINT; url : String; loadLink : WMEvents.EventListener; charset : String; frameName : String; form : Form; baseAddress : String; baseTarget : String; seq : WMMessages.MsgSequencer; isSubtable : BOOLEAN);</td></tr><tr><th id="L1418"><a href="#L1418">1418</a></th><td>                VAR</td></tr><tr><th id="L1419"><a href="#L1419">1419</a></th><td>                        s : String; sequencer: Messages.MsgSequencer;</td></tr><tr><th id="L1420"><a href="#L1420">1420</a></th><td>                BEGIN</td></tr><tr><th id="L1421"><a href="#L1421">1421</a></th><td>                        Init;</td></tr><tr><th id="L1422"><a href="#L1422">1422</a></th><td>                        IF seq = NIL THEN</td></tr><tr><th id="L1423"><a href="#L1423">1423</a></th><td>                                NEW(sequencer, Handle);</td></tr><tr><th id="L1424"><a href="#L1424">1424</a></th><td>                                SetSequencer(sequencer);</td></tr><tr><th id="L1425"><a href="#L1425">1425</a></th><td>                        ELSE</td></tr><tr><th id="L1426"><a href="#L1426">1426</a></th><td>                                SetSequencer(seq);</td></tr><tr><th id="L1427"><a href="#L1427">1427</a></th><td>                        END;</td></tr><tr><th id="L1428"><a href="#L1428">1428</a></th><td>                        SELF.tableElem := tableElem;</td></tr><tr><th id="L1429"><a href="#L1429">1429</a></th><td>                        SELF.parentWidth := parentWidth - 20;</td></tr><tr><th id="L1430"><a href="#L1430">1430</a></th><td>                        IF parentWidth &lt; 1 THEN parentWidth := 1 END;</td></tr><tr><th id="L1431"><a href="#L1431">1431</a></th><td>                        SELF.textColor := textColor;</td></tr><tr><th id="L1432"><a href="#L1432">1432</a></th><td>                        SELF.linkColor := linkColor;</td></tr><tr><th id="L1433"><a href="#L1433">1433</a></th><td>                        SELF.vlinkColor := vlinkColor;</td></tr><tr><th id="L1434"><a href="#L1434">1434</a></th><td>                        SELF.alinkColor := alinkColor;</td></tr><tr><th id="L1435"><a href="#L1435">1435</a></th><td>                        SELF.url := url;</td></tr><tr><th id="L1436"><a href="#L1436">1436</a></th><td>                        SELF.loadLink := loadLink;</td></tr><tr><th id="L1437"><a href="#L1437">1437</a></th><td>                        SELF.charset := charset;</td></tr><tr><th id="L1438"><a href="#L1438">1438</a></th><td>                        SELF.frameName := frameName;</td></tr><tr><th id="L1439"><a href="#L1439">1439</a></th><td>                        SELF.form := form;</td></tr><tr><th id="L1440"><a href="#L1440">1440</a></th><td>                        SELF.baseAddress := baseAddress;</td></tr><tr><th id="L1441"><a href="#L1441">1441</a></th><td>                        SELF.baseTarget := baseTarget;</td></tr><tr><th id="L1442"><a href="#L1442">1442</a></th><td>                        SELF.isSubtable := isSubtable;</td></tr><tr><th id="L1443"><a href="#L1443">1443</a></th><td></td></tr><tr><th id="L1444"><a href="#L1444">1444</a></th><td>                        (* Get table alignment *)</td></tr><tr><th id="L1445"><a href="#L1445">1445</a></th><td>                        s := GetElemAttributeValue(tableElem, "align", TRUE);</td></tr><tr><th id="L1446"><a href="#L1446">1446</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1447"><a href="#L1447">1447</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1448"><a href="#L1448">1448</a></th><td>                                IF s^ = "left" THEN</td></tr><tr><th id="L1449"><a href="#L1449">1449</a></th><td>                                        SELF.align := alignLeft;</td></tr><tr><th id="L1450"><a href="#L1450">1450</a></th><td>                                ELSIF s^ = "center" THEN</td></tr><tr><th id="L1451"><a href="#L1451">1451</a></th><td>                                        SELF.align := alignCenter;</td></tr><tr><th id="L1452"><a href="#L1452">1452</a></th><td>                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L1453"><a href="#L1453">1453</a></th><td>                                        SELF.align := alignRight;</td></tr><tr><th id="L1454"><a href="#L1454">1454</a></th><td>                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L1455"><a href="#L1455">1455</a></th><td>                                        SELF.align := alignJustify;</td></tr><tr><th id="L1456"><a href="#L1456">1456</a></th><td>                                ELSE</td></tr><tr><th id="L1457"><a href="#L1457">1457</a></th><td>                                        SELF.align := align;</td></tr><tr><th id="L1458"><a href="#L1458">1458</a></th><td>                                END;</td></tr><tr><th id="L1459"><a href="#L1459">1459</a></th><td>                        ELSE</td></tr><tr><th id="L1460"><a href="#L1460">1460</a></th><td>                                SELF.align := align;</td></tr><tr><th id="L1461"><a href="#L1461">1461</a></th><td>                        END;</td></tr><tr><th id="L1462"><a href="#L1462">1462</a></th><td></td></tr><tr><th id="L1463"><a href="#L1463">1463</a></th><td>                        (* Get table width *)</td></tr><tr><th id="L1464"><a href="#L1464">1464</a></th><td>                        s := GetElemAttributeValue(tableElem, "width", FALSE);</td></tr><tr><th id="L1465"><a href="#L1465">1465</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1466"><a href="#L1466">1466</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1467"><a href="#L1467">1467</a></th><td>                                IF Strings.EndsWith("%", s^) THEN</td></tr><tr><th id="L1468"><a href="#L1468">1468</a></th><td>                                        relativeWidth := TRUE;</td></tr><tr><th id="L1469"><a href="#L1469">1469</a></th><td>                                        s := Strings.Substring(0, Strings.Length(s^)-1, s^);</td></tr><tr><th id="L1470"><a href="#L1470">1470</a></th><td>                                END;</td></tr><tr><th id="L1471"><a href="#L1471">1471</a></th><td>                                Strings.StrToInt(s^, width);</td></tr><tr><th id="L1472"><a href="#L1472">1472</a></th><td>                        ELSE</td></tr><tr><th id="L1473"><a href="#L1473">1473</a></th><td>                                width := 0;</td></tr><tr><th id="L1474"><a href="#L1474">1474</a></th><td>                        END;</td></tr><tr><th id="L1475"><a href="#L1475">1475</a></th><td></td></tr><tr><th id="L1476"><a href="#L1476">1476</a></th><td>                        (* Get border width *)</td></tr><tr><th id="L1477"><a href="#L1477">1477</a></th><td>                        s := GetElemAttributeValue(tableElem, "border", FALSE);</td></tr><tr><th id="L1478"><a href="#L1478">1478</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1479"><a href="#L1479">1479</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1480"><a href="#L1480">1480</a></th><td>                                Strings.StrToInt(s^, border);</td></tr><tr><th id="L1481"><a href="#L1481">1481</a></th><td>                        ELSE</td></tr><tr><th id="L1482"><a href="#L1482">1482</a></th><td>                                border := 0;</td></tr><tr><th id="L1483"><a href="#L1483">1483</a></th><td>                        END;</td></tr><tr><th id="L1484"><a href="#L1484">1484</a></th><td></td></tr><tr><th id="L1485"><a href="#L1485">1485</a></th><td>                        (* rules? *)</td></tr><tr><th id="L1486"><a href="#L1486">1486</a></th><td>                        s := GetElemAttributeValue(tableElem, "rules", TRUE);</td></tr><tr><th id="L1487"><a href="#L1487">1487</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1488"><a href="#L1488">1488</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1489"><a href="#L1489">1489</a></th><td>                                rules := (s^ # "none");</td></tr><tr><th id="L1490"><a href="#L1490">1490</a></th><td>                        ELSE</td></tr><tr><th id="L1491"><a href="#L1491">1491</a></th><td>                                rules := (border &gt; 0);</td></tr><tr><th id="L1492"><a href="#L1492">1492</a></th><td>                        END;</td></tr><tr><th id="L1493"><a href="#L1493">1493</a></th><td></td></tr><tr><th id="L1494"><a href="#L1494">1494</a></th><td>                        (* Get cellspacing width *)</td></tr><tr><th id="L1495"><a href="#L1495">1495</a></th><td>                        s := GetElemAttributeValue(tableElem, "cellspacing", FALSE);</td></tr><tr><th id="L1496"><a href="#L1496">1496</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1497"><a href="#L1497">1497</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1498"><a href="#L1498">1498</a></th><td>                                IF Strings.EndsWith("%", s^) THEN</td></tr><tr><th id="L1499"><a href="#L1499">1499</a></th><td>                                        relativeCellspacing := TRUE;</td></tr><tr><th id="L1500"><a href="#L1500">1500</a></th><td>                                        s := Strings.Substring(0, Strings.Length(s^)-1, s^);</td></tr><tr><th id="L1501"><a href="#L1501">1501</a></th><td>                                END;</td></tr><tr><th id="L1502"><a href="#L1502">1502</a></th><td>                                Strings.StrToInt(s^, cellspacing);</td></tr><tr><th id="L1503"><a href="#L1503">1503</a></th><td>                        ELSE</td></tr><tr><th id="L1504"><a href="#L1504">1504</a></th><td>                                cellspacing := 0;</td></tr><tr><th id="L1505"><a href="#L1505">1505</a></th><td>                        END;</td></tr><tr><th id="L1506"><a href="#L1506">1506</a></th><td></td></tr><tr><th id="L1507"><a href="#L1507">1507</a></th><td>                        (* Get cellpadding width *)</td></tr><tr><th id="L1508"><a href="#L1508">1508</a></th><td>                        s := GetElemAttributeValue(tableElem, "cellpadding", FALSE);</td></tr><tr><th id="L1509"><a href="#L1509">1509</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1510"><a href="#L1510">1510</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1511"><a href="#L1511">1511</a></th><td>                                IF Strings.EndsWith("%", s^) THEN</td></tr><tr><th id="L1512"><a href="#L1512">1512</a></th><td>                                        relativeCellpadding := TRUE;</td></tr><tr><th id="L1513"><a href="#L1513">1513</a></th><td>                                        s := Strings.Substring(0, Strings.Length(s^)-1, s^);</td></tr><tr><th id="L1514"><a href="#L1514">1514</a></th><td>                                END;</td></tr><tr><th id="L1515"><a href="#L1515">1515</a></th><td>                                Strings.StrToInt(s^, cellpadding);</td></tr><tr><th id="L1516"><a href="#L1516">1516</a></th><td>                        ELSE</td></tr><tr><th id="L1517"><a href="#L1517">1517</a></th><td>                                cellpadding := 0;</td></tr><tr><th id="L1518"><a href="#L1518">1518</a></th><td>                        END;</td></tr><tr><th id="L1519"><a href="#L1519">1519</a></th><td></td></tr><tr><th id="L1520"><a href="#L1520">1520</a></th><td>                        (* Get &amp; Set background-color *)</td></tr><tr><th id="L1521"><a href="#L1521">1521</a></th><td>                        s := GetElemAttributeValue(tableElem, "bgcolor", TRUE);</td></tr><tr><th id="L1522"><a href="#L1522">1522</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1523"><a href="#L1523">1523</a></th><td>                                fillColor.Set(GetColor(s) * 0100H + 0FFH);</td></tr><tr><th id="L1524"><a href="#L1524">1524</a></th><td>                        END;</td></tr><tr><th id="L1525"><a href="#L1525">1525</a></th><td></td></tr><tr><th id="L1526"><a href="#L1526">1526</a></th><td>                        (* makes all tables visible: *)</td></tr><tr><th id="L1527"><a href="#L1527">1527</a></th><td>                        (* border := 1; rules := TRUE; *)</td></tr><tr><th id="L1528"><a href="#L1528">1528</a></th><td></td></tr><tr><th id="L1529"><a href="#L1529">1529</a></th><td>                        internalWidth := 0; internalHeight := 0;</td></tr><tr><th id="L1530"><a href="#L1530">1530</a></th><td>                        BuildCellGrid();</td></tr><tr><th id="L1531"><a href="#L1531">1531</a></th><td>                        CalculateMinMaxTableWidth();</td></tr><tr><th id="L1532"><a href="#L1532">1532</a></th><td></td></tr><tr><th id="L1533"><a href="#L1533">1533</a></th><td>                        IF ~isSubtable THEN AlignCells(); END;</td></tr><tr><th id="L1534"><a href="#L1534">1534</a></th><td>                END New;</td></tr><tr><th id="L1535"><a href="#L1535">1535</a></th><td></td></tr><tr><th id="L1536"><a href="#L1536">1536</a></th><td>                PROCEDURE DrawBackground*(canvas : WMGraphics.Canvas);</td></tr><tr><th id="L1537"><a href="#L1537">1537</a></th><td>                VAR</td></tr><tr><th id="L1538"><a href="#L1538">1538</a></th><td>                        h, w, color, i : LONGINT;</td></tr><tr><th id="L1539"><a href="#L1539">1539</a></th><td>                BEGIN</td></tr><tr><th id="L1540"><a href="#L1540">1540</a></th><td>                        DrawBackground^(canvas);</td></tr><tr><th id="L1541"><a href="#L1541">1541</a></th><td></td></tr><tr><th id="L1542"><a href="#L1542">1542</a></th><td>                        (* draw border *)</td></tr><tr><th id="L1543"><a href="#L1543">1543</a></th><td>                        IF border &gt; 0 THEN</td></tr><tr><th id="L1544"><a href="#L1544">1544</a></th><td>                                h := bounds.GetHeight();</td></tr><tr><th id="L1545"><a href="#L1545">1545</a></th><td>                                w := bounds.GetWidth();</td></tr><tr><th id="L1546"><a href="#L1546">1546</a></th><td>                                color := LONGINT(0808080FFH);</td></tr><tr><th id="L1547"><a href="#L1547">1547</a></th><td>                                FOR i := 0 TO border - 1 DO</td></tr><tr><th id="L1548"><a href="#L1548">1548</a></th><td>                                        canvas.Line(0, 0+i, w-1, 0+i, color, WMGraphics.ModeSrcOverDst);</td></tr><tr><th id="L1549"><a href="#L1549">1549</a></th><td>                                        canvas.Line(0+i, 0, 0+i, h-1, color, WMGraphics.ModeSrcOverDst);</td></tr><tr><th id="L1550"><a href="#L1550">1550</a></th><td>                                        canvas.Line(0, h-1-i, w-1, h-1-i, color, WMGraphics.ModeSrcOverDst);</td></tr><tr><th id="L1551"><a href="#L1551">1551</a></th><td>                                        canvas.Line(w-1-i, 0, w-1-i, h-1, color, WMGraphics.ModeSrcOverDst);</td></tr><tr><th id="L1552"><a href="#L1552">1552</a></th><td>                                END;</td></tr><tr><th id="L1553"><a href="#L1553">1553</a></th><td>                        END;</td></tr><tr><th id="L1554"><a href="#L1554">1554</a></th><td>                END DrawBackground;</td></tr><tr><th id="L1555"><a href="#L1555">1555</a></th><td></td></tr><tr><th id="L1556"><a href="#L1556">1556</a></th><td>                PROCEDURE BuildCellGrid;</td></tr><tr><th id="L1557"><a href="#L1557">1557</a></th><td>                VAR</td></tr><tr><th id="L1558"><a href="#L1558">1558</a></th><td>                        captionCount : LONGINT;</td></tr><tr><th id="L1559"><a href="#L1559">1559</a></th><td>                        wantedList : StringArray;</td></tr><tr><th id="L1560"><a href="#L1560">1560</a></th><td>                        stopList : StringArray;</td></tr><tr><th id="L1561"><a href="#L1561">1561</a></th><td>                        wantedTDTH : StringArray;</td></tr><tr><th id="L1562"><a href="#L1562">1562</a></th><td>                        stopAtTable : StringArray;</td></tr><tr><th id="L1563"><a href="#L1563">1563</a></th><td>                        newRow : BOOLEAN;</td></tr><tr><th id="L1564"><a href="#L1564">1564</a></th><td>                        enum, enum2 : XMLObjects.Enumerator;</td></tr><tr><th id="L1565"><a href="#L1565">1565</a></th><td>                        p, p2 : ANY;</td></tr><tr><th id="L1566"><a href="#L1566">1566</a></th><td>                        j : LONGINT;</td></tr><tr><th id="L1567"><a href="#L1567">1567</a></th><td>                BEGIN</td></tr><tr><th id="L1568"><a href="#L1568">1568</a></th><td>                        NEW(wantedTDTH, 2); wantedTDTH[0] := Strings.NewString("TD"); wantedTDTH[1] := Strings.NewString("TH");</td></tr><tr><th id="L1569"><a href="#L1569">1569</a></th><td>                        NEW(stopAtTable, 1); stopAtTable[0] := Strings.NewString("TABLE");</td></tr><tr><th id="L1570"><a href="#L1570">1570</a></th><td></td></tr><tr><th id="L1571"><a href="#L1571">1571</a></th><td>                        (* add table caption, if any *)</td></tr><tr><th id="L1572"><a href="#L1572">1572</a></th><td>                        captionCount := 0;</td></tr><tr><th id="L1573"><a href="#L1573">1573</a></th><td>                        NEW(wantedList, 1); wantedList[0] := Strings.NewString("CAPTION");</td></tr><tr><th id="L1574"><a href="#L1574">1574</a></th><td>                        enum := GetElems(tableElem, wantedList, stopAtTable, FALSE);</td></tr><tr><th id="L1575"><a href="#L1575">1575</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L1576"><a href="#L1576">1576</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L1577"><a href="#L1577">1577</a></th><td>                                AddCell(p(XML.Element), TRUE);</td></tr><tr><th id="L1578"><a href="#L1578">1578</a></th><td>                                INC(captionCount);</td></tr><tr><th id="L1579"><a href="#L1579">1579</a></th><td>                        END;</td></tr><tr><th id="L1580"><a href="#L1580">1580</a></th><td>                        (* add table header, if any *)</td></tr><tr><th id="L1581"><a href="#L1581">1581</a></th><td>                        NEW(wantedList, 1); wantedList[0] := Strings.NewString("THEAD");</td></tr><tr><th id="L1582"><a href="#L1582">1582</a></th><td>                        enum := GetElems(tableElem, wantedList, stopAtTable, FALSE);</td></tr><tr><th id="L1583"><a href="#L1583">1583</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L1584"><a href="#L1584">1584</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L1585"><a href="#L1585">1585</a></th><td>                                enum2 := GetElems(p(XML.Element), wantedTDTH, stopAtTable, FALSE);</td></tr><tr><th id="L1586"><a href="#L1586">1586</a></th><td>                                newRow := TRUE;</td></tr><tr><th id="L1587"><a href="#L1587">1587</a></th><td>                                WHILE (enum2.HasMoreElements()) DO</td></tr><tr><th id="L1588"><a href="#L1588">1588</a></th><td>                                        p2 := enum2.GetNext();</td></tr><tr><th id="L1589"><a href="#L1589">1589</a></th><td>                                        AddCell(p2(XML.Element), newRow);</td></tr><tr><th id="L1590"><a href="#L1590">1590</a></th><td>                                        newRow := FALSE;</td></tr><tr><th id="L1591"><a href="#L1591">1591</a></th><td>                                END;</td></tr><tr><th id="L1592"><a href="#L1592">1592</a></th><td>                        END;</td></tr><tr><th id="L1593"><a href="#L1593">1593</a></th><td>                        (* add rows *)</td></tr><tr><th id="L1594"><a href="#L1594">1594</a></th><td>                        NEW(stopList, 5); stopList[0] := Strings.NewString("TABLE"); stopList[1] := Strings.NewString("THEAD"); stopList[2] := Strings.NewString("TFOOT"); stopList[3] := Strings.NewString("TR"); stopList[4] := Strings.NewString("CAPTION");</td></tr><tr><th id="L1595"><a href="#L1595">1595</a></th><td>                        newRow := TRUE;</td></tr><tr><th id="L1596"><a href="#L1596">1596</a></th><td>                        enum := GetElems(tableElem, wantedTDTH, stopList, FALSE);</td></tr><tr><th id="L1597"><a href="#L1597">1597</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L1598"><a href="#L1598">1598</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L1599"><a href="#L1599">1599</a></th><td>                                AddCell(p(XML.Element), newRow);</td></tr><tr><th id="L1600"><a href="#L1600">1600</a></th><td>                                newRow := FALSE;</td></tr><tr><th id="L1601"><a href="#L1601">1601</a></th><td>                        END;</td></tr><tr><th id="L1602"><a href="#L1602">1602</a></th><td>                        NEW(wantedList, 1); wantedList[0] := Strings.NewString("TR");</td></tr><tr><th id="L1603"><a href="#L1603">1603</a></th><td>                        NEW(stopList, 4); stopList[0] := Strings.NewString("TABLE"); stopList[1] := Strings.NewString("THEAD"); stopList[2] := Strings.NewString("TFOOT"); stopList[3] := Strings.NewString("CAPTION");</td></tr><tr><th id="L1604"><a href="#L1604">1604</a></th><td>                        enum := GetElems(tableElem, wantedList, stopList, FALSE);</td></tr><tr><th id="L1605"><a href="#L1605">1605</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L1606"><a href="#L1606">1606</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L1607"><a href="#L1607">1607</a></th><td>                                enum2 := GetElems(p(XML.Element), wantedTDTH, stopAtTable, FALSE);</td></tr><tr><th id="L1608"><a href="#L1608">1608</a></th><td>                                newRow := TRUE;</td></tr><tr><th id="L1609"><a href="#L1609">1609</a></th><td>                                WHILE (enum2.HasMoreElements()) DO</td></tr><tr><th id="L1610"><a href="#L1610">1610</a></th><td>                                        p2 := enum2.GetNext();</td></tr><tr><th id="L1611"><a href="#L1611">1611</a></th><td>                                        AddCell(p2(XML.Element), newRow);</td></tr><tr><th id="L1612"><a href="#L1612">1612</a></th><td>                                        newRow := FALSE;</td></tr><tr><th id="L1613"><a href="#L1613">1613</a></th><td>                                END;</td></tr><tr><th id="L1614"><a href="#L1614">1614</a></th><td>                        END;</td></tr><tr><th id="L1615"><a href="#L1615">1615</a></th><td>                        (* add table footer, if any *)</td></tr><tr><th id="L1616"><a href="#L1616">1616</a></th><td>                        NEW(wantedList, 1); wantedList[0] := Strings.NewString("TFOOT");</td></tr><tr><th id="L1617"><a href="#L1617">1617</a></th><td>                        newRow := TRUE;</td></tr><tr><th id="L1618"><a href="#L1618">1618</a></th><td>                        enum := GetElems(tableElem, wantedList, stopAtTable, FALSE);</td></tr><tr><th id="L1619"><a href="#L1619">1619</a></th><td>                        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L1620"><a href="#L1620">1620</a></th><td>                                p := enum.GetNext();</td></tr><tr><th id="L1621"><a href="#L1621">1621</a></th><td>                                enum2 := GetElems(p(XML.Element), wantedTDTH, stopAtTable, FALSE);</td></tr><tr><th id="L1622"><a href="#L1622">1622</a></th><td>                                WHILE (enum2.HasMoreElements()) DO</td></tr><tr><th id="L1623"><a href="#L1623">1623</a></th><td>                                        p2 := enum2.GetNext();</td></tr><tr><th id="L1624"><a href="#L1624">1624</a></th><td>                                        AddCell(p2(XML.Element), newRow);</td></tr><tr><th id="L1625"><a href="#L1625">1625</a></th><td>                                        newRow := FALSE;</td></tr><tr><th id="L1626"><a href="#L1626">1626</a></th><td>                                END;</td></tr><tr><th id="L1627"><a href="#L1627">1627</a></th><td>                        END;</td></tr><tr><th id="L1628"><a href="#L1628">1628</a></th><td>                        (* set colspan = colsCnt for each caption *)</td></tr><tr><th id="L1629"><a href="#L1629">1629</a></th><td>                        FOR j := 0 TO captionCount - 1 DO</td></tr><tr><th id="L1630"><a href="#L1630">1630</a></th><td>                                IF (grid[0, j] # NIL) &amp; (grid[0, j].cell # NIL) THEN</td></tr><tr><th id="L1631"><a href="#L1631">1631</a></th><td>                                        grid[0, j].cell.colspan := colsCnt;</td></tr><tr><th id="L1632"><a href="#L1632">1632</a></th><td>                                END;</td></tr><tr><th id="L1633"><a href="#L1633">1633</a></th><td>                        END;</td></tr><tr><th id="L1634"><a href="#L1634">1634</a></th><td>                END BuildCellGrid;</td></tr><tr><th id="L1635"><a href="#L1635">1635</a></th><td></td></tr><tr><th id="L1636"><a href="#L1636">1636</a></th><td>                PROCEDURE AddCell(elem : XML.Element; newRow : BOOLEAN);</td></tr><tr><th id="L1637"><a href="#L1637">1637</a></th><td>                VAR</td></tr><tr><th id="L1638"><a href="#L1638">1638</a></th><td>                        tableCell : TableCell;</td></tr><tr><th id="L1639"><a href="#L1639">1639</a></th><td>                        i, j : LONGINT;</td></tr><tr><th id="L1640"><a href="#L1640">1640</a></th><td></td></tr><tr><th id="L1641"><a href="#L1641">1641</a></th><td>                        PROCEDURE Add(x, y : LONGINT; tableCell : TableCell);</td></tr><tr><th id="L1642"><a href="#L1642">1642</a></th><td>                        VAR</td></tr><tr><th id="L1643"><a href="#L1643">1643</a></th><td>                                cellWrapper : CellWrapper;</td></tr><tr><th id="L1644"><a href="#L1644">1644</a></th><td>                        BEGIN</td></tr><tr><th id="L1645"><a href="#L1645">1645</a></th><td>                                IF y &gt; (rowsCnt - 1) THEN</td></tr><tr><th id="L1646"><a href="#L1646">1646</a></th><td>                                        GrowY(y);</td></tr><tr><th id="L1647"><a href="#L1647">1647</a></th><td>                                END;</td></tr><tr><th id="L1648"><a href="#L1648">1648</a></th><td>                                WHILE (x &lt; colsCnt) &amp; (grid[x, y] # NIL) DO</td></tr><tr><th id="L1649"><a href="#L1649">1649</a></th><td>                                        INC(x);</td></tr><tr><th id="L1650"><a href="#L1650">1650</a></th><td>                                END;</td></tr><tr><th id="L1651"><a href="#L1651">1651</a></th><td>                                IF x &gt; (colsCnt - 1) THEN</td></tr><tr><th id="L1652"><a href="#L1652">1652</a></th><td>                                        GrowX(x);</td></tr><tr><th id="L1653"><a href="#L1653">1653</a></th><td>                                END;</td></tr><tr><th id="L1654"><a href="#L1654">1654</a></th><td>                                NEW(cellWrapper);</td></tr><tr><th id="L1655"><a href="#L1655">1655</a></th><td>                                cellWrapper.cell := tableCell;</td></tr><tr><th id="L1656"><a href="#L1656">1656</a></th><td>                                grid[x, y] := cellWrapper;</td></tr><tr><th id="L1657"><a href="#L1657">1657</a></th><td>                        END Add;</td></tr><tr><th id="L1658"><a href="#L1658">1658</a></th><td></td></tr><tr><th id="L1659"><a href="#L1659">1659</a></th><td>                        PROCEDURE GrowX(newX : LONGINT);</td></tr><tr><th id="L1660"><a href="#L1660">1660</a></th><td>                        VAR</td></tr><tr><th id="L1661"><a href="#L1661">1661</a></th><td>                                newInternalWidth : LONGINT;</td></tr><tr><th id="L1662"><a href="#L1662">1662</a></th><td>                                newGrid : TableGrid;</td></tr><tr><th id="L1663"><a href="#L1663">1663</a></th><td>                        BEGIN</td></tr><tr><th id="L1664"><a href="#L1664">1664</a></th><td>                                IF newX &gt; (internalWidth - 1) THEN</td></tr><tr><th id="L1665"><a href="#L1665">1665</a></th><td>                                        newInternalWidth := internalWidth;</td></tr><tr><th id="L1666"><a href="#L1666">1666</a></th><td>                                        WHILE newInternalWidth &lt; newX + 1 DO</td></tr><tr><th id="L1667"><a href="#L1667">1667</a></th><td>                                                INC(newInternalWidth, 10);</td></tr><tr><th id="L1668"><a href="#L1668">1668</a></th><td>                                        END;</td></tr><tr><th id="L1669"><a href="#L1669">1669</a></th><td>                                        NEW(newGrid, newInternalWidth, internalHeight);</td></tr><tr><th id="L1670"><a href="#L1670">1670</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1671"><a href="#L1671">1671</a></th><td>                                                FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1672"><a href="#L1672">1672</a></th><td>                                                        newGrid[i, j] := grid[i, j];</td></tr><tr><th id="L1673"><a href="#L1673">1673</a></th><td>                                                END;</td></tr><tr><th id="L1674"><a href="#L1674">1674</a></th><td>                                        END;</td></tr><tr><th id="L1675"><a href="#L1675">1675</a></th><td>                                        internalWidth := newInternalWidth;</td></tr><tr><th id="L1676"><a href="#L1676">1676</a></th><td>                                        grid := newGrid;</td></tr><tr><th id="L1677"><a href="#L1677">1677</a></th><td>                                END;</td></tr><tr><th id="L1678"><a href="#L1678">1678</a></th><td>                                colsCnt := newX + 1;</td></tr><tr><th id="L1679"><a href="#L1679">1679</a></th><td>                        END GrowX;</td></tr><tr><th id="L1680"><a href="#L1680">1680</a></th><td></td></tr><tr><th id="L1681"><a href="#L1681">1681</a></th><td>                        PROCEDURE GrowY(newY : LONGINT);</td></tr><tr><th id="L1682"><a href="#L1682">1682</a></th><td>                        VAR</td></tr><tr><th id="L1683"><a href="#L1683">1683</a></th><td>                                newInternalHeight : LONGINT;</td></tr><tr><th id="L1684"><a href="#L1684">1684</a></th><td>                                newGrid : TableGrid;</td></tr><tr><th id="L1685"><a href="#L1685">1685</a></th><td>                        BEGIN</td></tr><tr><th id="L1686"><a href="#L1686">1686</a></th><td>                                IF newY &gt; (internalHeight - 1) THEN</td></tr><tr><th id="L1687"><a href="#L1687">1687</a></th><td>                                        newInternalHeight := internalHeight;</td></tr><tr><th id="L1688"><a href="#L1688">1688</a></th><td>                                        WHILE newInternalHeight &lt; newY + 1 DO</td></tr><tr><th id="L1689"><a href="#L1689">1689</a></th><td>                                                INC(newInternalHeight, 10);</td></tr><tr><th id="L1690"><a href="#L1690">1690</a></th><td>                                        END;</td></tr><tr><th id="L1691"><a href="#L1691">1691</a></th><td>                                        NEW(newGrid, internalWidth, newInternalHeight);</td></tr><tr><th id="L1692"><a href="#L1692">1692</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1693"><a href="#L1693">1693</a></th><td>                                                FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1694"><a href="#L1694">1694</a></th><td>                                                        newGrid[i, j] := grid[i, j];</td></tr><tr><th id="L1695"><a href="#L1695">1695</a></th><td>                                                END;</td></tr><tr><th id="L1696"><a href="#L1696">1696</a></th><td>                                        END;</td></tr><tr><th id="L1697"><a href="#L1697">1697</a></th><td>                                        internalHeight := newInternalHeight;</td></tr><tr><th id="L1698"><a href="#L1698">1698</a></th><td>                                        grid := newGrid;</td></tr><tr><th id="L1699"><a href="#L1699">1699</a></th><td>                                END;</td></tr><tr><th id="L1700"><a href="#L1700">1700</a></th><td>                                rowsCnt := newY + 1;</td></tr><tr><th id="L1701"><a href="#L1701">1701</a></th><td>                        END GrowY;</td></tr><tr><th id="L1702"><a href="#L1702">1702</a></th><td></td></tr><tr><th id="L1703"><a href="#L1703">1703</a></th><td>                BEGIN</td></tr><tr><th id="L1704"><a href="#L1704">1704</a></th><td>                        IF rowsCnt = 0 THEN y := -1; newRow := TRUE END; (* init, if first cell added to the grid *)</td></tr><tr><th id="L1705"><a href="#L1705">1705</a></th><td>                        IF newRow THEN</td></tr><tr><th id="L1706"><a href="#L1706">1706</a></th><td>                                x := 0;</td></tr><tr><th id="L1707"><a href="#L1707">1707</a></th><td>                                INC(y);</td></tr><tr><th id="L1708"><a href="#L1708">1708</a></th><td>                        ELSE</td></tr><tr><th id="L1709"><a href="#L1709">1709</a></th><td>                                INC(x);</td></tr><tr><th id="L1710"><a href="#L1710">1710</a></th><td>                        END;</td></tr><tr><th id="L1711"><a href="#L1711">1711</a></th><td>                        NEW(tableCell, sequencer, SELF, elem, textColor, linkColor, vlinkColor, alinkColor, url, loadLink, charset, frameName, form, baseAddress, baseTarget);</td></tr><tr><th id="L1712"><a href="#L1712">1712</a></th><td>                        AddContent(tableCell);</td></tr><tr><th id="L1713"><a href="#L1713">1713</a></th><td>                        FOR i := 0 TO tableCell.colspan - 1 DO</td></tr><tr><th id="L1714"><a href="#L1714">1714</a></th><td>                                FOR j := 0 TO tableCell.rowspan - 1 DO</td></tr><tr><th id="L1715"><a href="#L1715">1715</a></th><td>                                        IF (i = 0) &amp; (j = 0) THEN</td></tr><tr><th id="L1716"><a href="#L1716">1716</a></th><td>                                                Add(x, y, tableCell);</td></tr><tr><th id="L1717"><a href="#L1717">1717</a></th><td>                                        ELSE</td></tr><tr><th id="L1718"><a href="#L1718">1718</a></th><td>                                                Add(x + i, y + j, NIL);</td></tr><tr><th id="L1719"><a href="#L1719">1719</a></th><td>                                        END;</td></tr><tr><th id="L1720"><a href="#L1720">1720</a></th><td>                                END;</td></tr><tr><th id="L1721"><a href="#L1721">1721</a></th><td>                        END;</td></tr><tr><th id="L1722"><a href="#L1722">1722</a></th><td>                END AddCell;</td></tr><tr><th id="L1723"><a href="#L1723">1723</a></th><td></td></tr><tr><th id="L1724"><a href="#L1724">1724</a></th><td>                PROCEDURE CalculateMinMaxTableWidth;</td></tr><tr><th id="L1725"><a href="#L1725">1725</a></th><td>                VAR</td></tr><tr><th id="L1726"><a href="#L1726">1726</a></th><td>                        i, j, k : LONGINT;</td></tr><tr><th id="L1727"><a href="#L1727">1727</a></th><td>                BEGIN</td></tr><tr><th id="L1728"><a href="#L1728">1728</a></th><td>                        NEW(minCellWidths, colsCnt);</td></tr><tr><th id="L1729"><a href="#L1729">1729</a></th><td>                        NEW(maxCellWidths, colsCnt);</td></tr><tr><th id="L1730"><a href="#L1730">1730</a></th><td></td></tr><tr><th id="L1731"><a href="#L1731">1731</a></th><td>                        (* calculate minimal cell-widths *)</td></tr><tr><th id="L1732"><a href="#L1732">1732</a></th><td>                        FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1733"><a href="#L1733">1733</a></th><td>                                FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1734"><a href="#L1734">1734</a></th><td>                                        IF (grid[i, j] # NIL) &amp; (grid[i, j].cell # NIL) THEN</td></tr><tr><th id="L1735"><a href="#L1735">1735</a></th><td>                                                k := (grid[i, j].cell.minWidth - (grid[i, j].cell.colspan - 1) * cellspacing) DIV grid[i, j].cell.colspan;</td></tr><tr><th id="L1736"><a href="#L1736">1736</a></th><td>                                                IF k &gt; minCellWidths[i] THEN</td></tr><tr><th id="L1737"><a href="#L1737">1737</a></th><td>                                                        minCellWidths[i] := k;</td></tr><tr><th id="L1738"><a href="#L1738">1738</a></th><td>                                                END;</td></tr><tr><th id="L1739"><a href="#L1739">1739</a></th><td>                                        END;</td></tr><tr><th id="L1740"><a href="#L1740">1740</a></th><td>                                END;</td></tr><tr><th id="L1741"><a href="#L1741">1741</a></th><td>                        END;</td></tr><tr><th id="L1742"><a href="#L1742">1742</a></th><td>                        (* sum-up minimal cell-widths *)</td></tr><tr><th id="L1743"><a href="#L1743">1743</a></th><td>                        minTableWidth := 0;</td></tr><tr><th id="L1744"><a href="#L1744">1744</a></th><td>                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1745"><a href="#L1745">1745</a></th><td>                                INC(minTableWidth, minCellWidths[i]);</td></tr><tr><th id="L1746"><a href="#L1746">1746</a></th><td>                        END;</td></tr><tr><th id="L1747"><a href="#L1747">1747</a></th><td>                        INC(minTableWidth, 2 * border + (colsCnt + 1) * cellspacing);</td></tr><tr><th id="L1748"><a href="#L1748">1748</a></th><td></td></tr><tr><th id="L1749"><a href="#L1749">1749</a></th><td>                        (* calculate maximal cell-widths *)</td></tr><tr><th id="L1750"><a href="#L1750">1750</a></th><td>                        FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1751"><a href="#L1751">1751</a></th><td>                                FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1752"><a href="#L1752">1752</a></th><td>                                        IF (grid[i, j] # NIL) &amp; (grid[i, j].cell # NIL) THEN</td></tr><tr><th id="L1753"><a href="#L1753">1753</a></th><td>                                                k := (grid[i, j].cell.maxWidth - (grid[i, j].cell.colspan - 1) * cellspacing) DIV grid[i, j].cell.colspan;</td></tr><tr><th id="L1754"><a href="#L1754">1754</a></th><td>                                                IF k &gt; maxCellWidths[i] THEN</td></tr><tr><th id="L1755"><a href="#L1755">1755</a></th><td>                                                        maxCellWidths[i] := k;</td></tr><tr><th id="L1756"><a href="#L1756">1756</a></th><td>                                                END;</td></tr><tr><th id="L1757"><a href="#L1757">1757</a></th><td>                                        END;</td></tr><tr><th id="L1758"><a href="#L1758">1758</a></th><td>                                END;</td></tr><tr><th id="L1759"><a href="#L1759">1759</a></th><td>                        END;</td></tr><tr><th id="L1760"><a href="#L1760">1760</a></th><td>                        (* sum-up maximal cell-widths *)</td></tr><tr><th id="L1761"><a href="#L1761">1761</a></th><td>                        maxTableWidth := 0;</td></tr><tr><th id="L1762"><a href="#L1762">1762</a></th><td>                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1763"><a href="#L1763">1763</a></th><td>                                INC(maxTableWidth, maxCellWidths[i]);</td></tr><tr><th id="L1764"><a href="#L1764">1764</a></th><td>                        END;</td></tr><tr><th id="L1765"><a href="#L1765">1765</a></th><td>                        INC(maxTableWidth, 2 * border + (colsCnt + 1) * cellspacing);</td></tr><tr><th id="L1766"><a href="#L1766">1766</a></th><td></td></tr><tr><th id="L1767"><a href="#L1767">1767</a></th><td>                END CalculateMinMaxTableWidth;</td></tr><tr><th id="L1768"><a href="#L1768">1768</a></th><td></td></tr><tr><th id="L1769"><a href="#L1769">1769</a></th><td>                PROCEDURE AlignCells;</td></tr><tr><th id="L1770"><a href="#L1770">1770</a></th><td>                VAR</td></tr><tr><th id="L1771"><a href="#L1771">1771</a></th><td>                        cell : TableCell;</td></tr><tr><th id="L1772"><a href="#L1772">1772</a></th><td>                        w, h, i, j, k : LONGINT;</td></tr><tr><th id="L1773"><a href="#L1773">1773</a></th><td>                        W, D, d : LONGINT;</td></tr><tr><th id="L1774"><a href="#L1774">1774</a></th><td>                        tableWidth, tableHeight : LONGINT;</td></tr><tr><th id="L1775"><a href="#L1775">1775</a></th><td>                        targetWidth : LONGINT;</td></tr><tr><th id="L1776"><a href="#L1776">1776</a></th><td>                        cellWidths, cellHeights : CellSizes;</td></tr><tr><th id="L1777"><a href="#L1777">1777</a></th><td>                        fac : REAL;</td></tr><tr><th id="L1778"><a href="#L1778">1778</a></th><td>                        leftIndent, topIndent : LONGINT;</td></tr><tr><th id="L1779"><a href="#L1779">1779</a></th><td>                BEGIN</td></tr><tr><th id="L1780"><a href="#L1780">1780</a></th><td></td></tr><tr><th id="L1781"><a href="#L1781">1781</a></th><td>                        NEW(cellWidths, colsCnt);</td></tr><tr><th id="L1782"><a href="#L1782">1782</a></th><td>                        NEW(cellHeights, rowsCnt);</td></tr><tr><th id="L1783"><a href="#L1783">1783</a></th><td></td></tr><tr><th id="L1784"><a href="#L1784">1784</a></th><td>                        (* CALCULATE CELL-WIDTHS *)</td></tr><tr><th id="L1785"><a href="#L1785">1785</a></th><td>                        (* if no table-width specified... *)</td></tr><tr><th id="L1786"><a href="#L1786">1786</a></th><td>                        IF width = 0 THEN</td></tr><tr><th id="L1787"><a href="#L1787">1787</a></th><td>                                IF maxTableWidth &lt;= parentWidth THEN</td></tr><tr><th id="L1788"><a href="#L1788">1788</a></th><td>                                        (* take max-width *)</td></tr><tr><th id="L1789"><a href="#L1789">1789</a></th><td>                                        tableWidth := maxTableWidth;</td></tr><tr><th id="L1790"><a href="#L1790">1790</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1791"><a href="#L1791">1791</a></th><td>                                                cellWidths[i] := maxCellWidths[i];</td></tr><tr><th id="L1792"><a href="#L1792">1792</a></th><td>                                        END;</td></tr><tr><th id="L1793"><a href="#L1793">1793</a></th><td>                                ELSIF minTableWidth &gt;= parentWidth THEN</td></tr><tr><th id="L1794"><a href="#L1794">1794</a></th><td>                                        (* take min-width *)</td></tr><tr><th id="L1795"><a href="#L1795">1795</a></th><td>                                        tableWidth := minTableWidth;</td></tr><tr><th id="L1796"><a href="#L1796">1796</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1797"><a href="#L1797">1797</a></th><td>                                                cellWidths[i] := minCellWidths[i];</td></tr><tr><th id="L1798"><a href="#L1798">1798</a></th><td>                                        END;</td></tr><tr><th id="L1799"><a href="#L1799">1799</a></th><td>                                ELSE</td></tr><tr><th id="L1800"><a href="#L1800">1800</a></th><td>                                        (* calculate width *)</td></tr><tr><th id="L1801"><a href="#L1801">1801</a></th><td>                                        W := parentWidth - minTableWidth;</td></tr><tr><th id="L1802"><a href="#L1802">1802</a></th><td>                                        D := maxTableWidth - minTableWidth;</td></tr><tr><th id="L1803"><a href="#L1803">1803</a></th><td>                                        IF D &lt; 1 THEN D := 1 END;</td></tr><tr><th id="L1804"><a href="#L1804">1804</a></th><td>                                        tableWidth := 0;</td></tr><tr><th id="L1805"><a href="#L1805">1805</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1806"><a href="#L1806">1806</a></th><td>                                                d := maxCellWidths[i] - minCellWidths[i];</td></tr><tr><th id="L1807"><a href="#L1807">1807</a></th><td>                                                cellWidths[i] := minCellWidths[i] + ENTIER(d * W / D);</td></tr><tr><th id="L1808"><a href="#L1808">1808</a></th><td>                                                INC(tableWidth, cellWidths[i]);</td></tr><tr><th id="L1809"><a href="#L1809">1809</a></th><td>                                        END;</td></tr><tr><th id="L1810"><a href="#L1810">1810</a></th><td>                                        INC(tableWidth, 2 * border + (colsCnt + 1) * cellspacing);</td></tr><tr><th id="L1811"><a href="#L1811">1811</a></th><td>                                END;</td></tr><tr><th id="L1812"><a href="#L1812">1812</a></th><td>                        ELSE</td></tr><tr><th id="L1813"><a href="#L1813">1813</a></th><td>                        (* table-width specified... *)</td></tr><tr><th id="L1814"><a href="#L1814">1814</a></th><td>                                targetWidth := width;</td></tr><tr><th id="L1815"><a href="#L1815">1815</a></th><td>                                IF relativeWidth THEN</td></tr><tr><th id="L1816"><a href="#L1816">1816</a></th><td>                                        targetWidth := ENTIER(targetWidth * parentWidth / 100);</td></tr><tr><th id="L1817"><a href="#L1817">1817</a></th><td>                                END;</td></tr><tr><th id="L1818"><a href="#L1818">1818</a></th><td>                                IF minTableWidth &gt;= targetWidth THEN</td></tr><tr><th id="L1819"><a href="#L1819">1819</a></th><td>                                        (* take min-width *)</td></tr><tr><th id="L1820"><a href="#L1820">1820</a></th><td>                                        tableWidth := minTableWidth;</td></tr><tr><th id="L1821"><a href="#L1821">1821</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1822"><a href="#L1822">1822</a></th><td>                                                cellWidths[i] := minCellWidths[i];</td></tr><tr><th id="L1823"><a href="#L1823">1823</a></th><td>                                        END;</td></tr><tr><th id="L1824"><a href="#L1824">1824</a></th><td>                                ELSIF maxTableWidth &lt;= targetWidth THEN</td></tr><tr><th id="L1825"><a href="#L1825">1825</a></th><td>                                        (* take max-width and blow up *)</td></tr><tr><th id="L1826"><a href="#L1826">1826</a></th><td>                                        fac := targetWidth / maxTableWidth;</td></tr><tr><th id="L1827"><a href="#L1827">1827</a></th><td>                                        tableWidth := 0;</td></tr><tr><th id="L1828"><a href="#L1828">1828</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1829"><a href="#L1829">1829</a></th><td>                                                cellWidths[i] := ENTIER(maxCellWidths[i] * fac);</td></tr><tr><th id="L1830"><a href="#L1830">1830</a></th><td>                                                INC(tableWidth, cellWidths[i]);</td></tr><tr><th id="L1831"><a href="#L1831">1831</a></th><td>                                        END;</td></tr><tr><th id="L1832"><a href="#L1832">1832</a></th><td>                                        INC(tableWidth, 2 * border + (colsCnt + 1) * cellspacing);</td></tr><tr><th id="L1833"><a href="#L1833">1833</a></th><td>                                ELSE</td></tr><tr><th id="L1834"><a href="#L1834">1834</a></th><td>                                        (* calculate width *)</td></tr><tr><th id="L1835"><a href="#L1835">1835</a></th><td>                                        W := parentWidth - minTableWidth;</td></tr><tr><th id="L1836"><a href="#L1836">1836</a></th><td>                                        D := maxTableWidth - minTableWidth;</td></tr><tr><th id="L1837"><a href="#L1837">1837</a></th><td>                                        IF D &lt; 1 THEN D := 1 END;</td></tr><tr><th id="L1838"><a href="#L1838">1838</a></th><td>                                        tableWidth := 0;</td></tr><tr><th id="L1839"><a href="#L1839">1839</a></th><td>                                        FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1840"><a href="#L1840">1840</a></th><td>                                                d := maxCellWidths[i] - minCellWidths[i];</td></tr><tr><th id="L1841"><a href="#L1841">1841</a></th><td>                                                cellWidths[i] := minCellWidths[i] + ENTIER(d * W / D);</td></tr><tr><th id="L1842"><a href="#L1842">1842</a></th><td>                                                INC(tableWidth, cellWidths[i]);</td></tr><tr><th id="L1843"><a href="#L1843">1843</a></th><td>                                        END;</td></tr><tr><th id="L1844"><a href="#L1844">1844</a></th><td>                                        INC(tableWidth, 2 * border + (colsCnt + 1) * cellspacing);</td></tr><tr><th id="L1845"><a href="#L1845">1845</a></th><td>                                END;</td></tr><tr><th id="L1846"><a href="#L1846">1846</a></th><td>                        END;</td></tr><tr><th id="L1847"><a href="#L1847">1847</a></th><td></td></tr><tr><th id="L1848"><a href="#L1848">1848</a></th><td>                        (* SET CELL-WIDTHS *)</td></tr><tr><th id="L1849"><a href="#L1849">1849</a></th><td>                        topIndent := border + cellspacing;</td></tr><tr><th id="L1850"><a href="#L1850">1850</a></th><td>                        FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1851"><a href="#L1851">1851</a></th><td>                                leftIndent := border + cellspacing;</td></tr><tr><th id="L1852"><a href="#L1852">1852</a></th><td>                                FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1853"><a href="#L1853">1853</a></th><td>                                        IF (grid[i, j] # NIL) &amp; (grid[i, j].cell # NIL) THEN</td></tr><tr><th id="L1854"><a href="#L1854">1854</a></th><td>                                                cell := grid[i, j].cell;</td></tr><tr><th id="L1855"><a href="#L1855">1855</a></th><td>                                                IF (cell.colspan = 1) &amp; (cell.rowspan = 1) THEN</td></tr><tr><th id="L1856"><a href="#L1856">1856</a></th><td>                                                        cell.SetWidth(cellWidths[i]);</td></tr><tr><th id="L1857"><a href="#L1857">1857</a></th><td>                                                ELSE</td></tr><tr><th id="L1858"><a href="#L1858">1858</a></th><td>                                                        w := 0;</td></tr><tr><th id="L1859"><a href="#L1859">1859</a></th><td>                                                        FOR k := 0 TO cell.colspan - 1 DO</td></tr><tr><th id="L1860"><a href="#L1860">1860</a></th><td>                                                                INC(w, cellWidths[i + k]);</td></tr><tr><th id="L1861"><a href="#L1861">1861</a></th><td>                                                        END;</td></tr><tr><th id="L1862"><a href="#L1862">1862</a></th><td>                                                        INC(w, (cell.colspan - 1) * cellspacing);</td></tr><tr><th id="L1863"><a href="#L1863">1863</a></th><td>                                                        cell.SetWidth(w);</td></tr><tr><th id="L1864"><a href="#L1864">1864</a></th><td>                                                END;</td></tr><tr><th id="L1865"><a href="#L1865">1865</a></th><td>                                        END;</td></tr><tr><th id="L1866"><a href="#L1866">1866</a></th><td>                                        INC(leftIndent, cellWidths[i] + cellspacing);</td></tr><tr><th id="L1867"><a href="#L1867">1867</a></th><td>                                END;</td></tr><tr><th id="L1868"><a href="#L1868">1868</a></th><td>                                INC(topIndent, cellHeights[j] + cellspacing);</td></tr><tr><th id="L1869"><a href="#L1869">1869</a></th><td>                        END;</td></tr><tr><th id="L1870"><a href="#L1870">1870</a></th><td></td></tr><tr><th id="L1871"><a href="#L1871">1871</a></th><td>                        (* CALCULATE CELL-HEIGHTS *)</td></tr><tr><th id="L1872"><a href="#L1872">1872</a></th><td>                        FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1873"><a href="#L1873">1873</a></th><td>                                FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1874"><a href="#L1874">1874</a></th><td>                                        IF (grid[i, j] # NIL) &amp; (grid[i, j].cell # NIL) THEN</td></tr><tr><th id="L1875"><a href="#L1875">1875</a></th><td>                                                cell := grid[i, j].cell;</td></tr><tr><th id="L1876"><a href="#L1876">1876</a></th><td>                                                w := 0;</td></tr><tr><th id="L1877"><a href="#L1877">1877</a></th><td>                                                FOR k := 0 TO cell.colspan - 1 DO</td></tr><tr><th id="L1878"><a href="#L1878">1878</a></th><td>                                                        INC(w, cellWidths[i + k]);</td></tr><tr><th id="L1879"><a href="#L1879">1879</a></th><td>                                                END;</td></tr><tr><th id="L1880"><a href="#L1880">1880</a></th><td>                                                INC(w, (cell.colspan - 1) * cellspacing);</td></tr><tr><th id="L1881"><a href="#L1881">1881</a></th><td>                                                h := (cell.tv.GetHeight(w)  + 2 * cellpadding) DIV cell.rowspan;</td></tr><tr><th id="L1882"><a href="#L1882">1882</a></th><td>                                                IF h &lt; 1 THEN h := 1 END;</td></tr><tr><th id="L1883"><a href="#L1883">1883</a></th><td>                                                IF h &lt; cell.height THEN h := cell.height END;</td></tr><tr><th id="L1884"><a href="#L1884">1884</a></th><td>                                                IF h &gt; cellHeights[j] THEN</td></tr><tr><th id="L1885"><a href="#L1885">1885</a></th><td>                                                        cellHeights[j] := h;</td></tr><tr><th id="L1886"><a href="#L1886">1886</a></th><td>                                                END;</td></tr><tr><th id="L1887"><a href="#L1887">1887</a></th><td>                                        END;</td></tr><tr><th id="L1888"><a href="#L1888">1888</a></th><td>                                END;</td></tr><tr><th id="L1889"><a href="#L1889">1889</a></th><td>                        END;</td></tr><tr><th id="L1890"><a href="#L1890">1890</a></th><td>                        tableHeight := 0;</td></tr><tr><th id="L1891"><a href="#L1891">1891</a></th><td>                        FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1892"><a href="#L1892">1892</a></th><td>                                INC(tableHeight, cellHeights[j]);</td></tr><tr><th id="L1893"><a href="#L1893">1893</a></th><td>                        END;</td></tr><tr><th id="L1894"><a href="#L1894">1894</a></th><td>                        INC(tableHeight, 2 * border + (rowsCnt + 1) * cellspacing);</td></tr><tr><th id="L1895"><a href="#L1895">1895</a></th><td></td></tr><tr><th id="L1896"><a href="#L1896">1896</a></th><td>                        (* SET CELL HEIGHTS AND ALIGN CELLS *)</td></tr><tr><th id="L1897"><a href="#L1897">1897</a></th><td>                        topIndent := border + cellspacing;</td></tr><tr><th id="L1898"><a href="#L1898">1898</a></th><td>                        FOR j := 0 TO rowsCnt - 1 DO</td></tr><tr><th id="L1899"><a href="#L1899">1899</a></th><td>                                leftIndent := border + cellspacing;</td></tr><tr><th id="L1900"><a href="#L1900">1900</a></th><td>                                FOR i := 0 TO colsCnt - 1 DO</td></tr><tr><th id="L1901"><a href="#L1901">1901</a></th><td>                                        IF (grid[i, j] # NIL) &amp; (grid[i, j].cell # NIL) THEN</td></tr><tr><th id="L1902"><a href="#L1902">1902</a></th><td>                                                cell := grid[i, j].cell;</td></tr><tr><th id="L1903"><a href="#L1903">1903</a></th><td>                                                IF (cell.colspan = 1) &amp; (cell.rowspan = 1) THEN</td></tr><tr><th id="L1904"><a href="#L1904">1904</a></th><td>                                                        cell.bounds.SetHeight(cellHeights[j]);</td></tr><tr><th id="L1905"><a href="#L1905">1905</a></th><td>                                                ELSE</td></tr><tr><th id="L1906"><a href="#L1906">1906</a></th><td>                                                        h := 0;</td></tr><tr><th id="L1907"><a href="#L1907">1907</a></th><td>                                                        FOR k := 0 TO cell.rowspan - 1 DO</td></tr><tr><th id="L1908"><a href="#L1908">1908</a></th><td>                                                                INC(h, cellHeights[j + k]);</td></tr><tr><th id="L1909"><a href="#L1909">1909</a></th><td>                                                        END;</td></tr><tr><th id="L1910"><a href="#L1910">1910</a></th><td>                                                        INC(h, (cell.rowspan - 1) * cellspacing);</td></tr><tr><th id="L1911"><a href="#L1911">1911</a></th><td>                                                        cell.bounds.SetHeight(h);</td></tr><tr><th id="L1912"><a href="#L1912">1912</a></th><td>                                                END;</td></tr><tr><th id="L1913"><a href="#L1913">1913</a></th><td>                                                cell.bounds.SetLeft(leftIndent);</td></tr><tr><th id="L1914"><a href="#L1914">1914</a></th><td>                                                cell.bounds.SetTop(topIndent);</td></tr><tr><th id="L1915"><a href="#L1915">1915</a></th><td>                                        END;</td></tr><tr><th id="L1916"><a href="#L1916">1916</a></th><td>                                        INC(leftIndent, cellWidths[i] + cellspacing);</td></tr><tr><th id="L1917"><a href="#L1917">1917</a></th><td>                                END;</td></tr><tr><th id="L1918"><a href="#L1918">1918</a></th><td>                                INC(topIndent, cellHeights[j] + cellspacing);</td></tr><tr><th id="L1919"><a href="#L1919">1919</a></th><td>                        END;</td></tr><tr><th id="L1920"><a href="#L1920">1920</a></th><td></td></tr><tr><th id="L1921"><a href="#L1921">1921</a></th><td>                        (* SET TABLE BOUNDS *)</td></tr><tr><th id="L1922"><a href="#L1922">1922</a></th><td>                        bounds.SetWidth(tableWidth);</td></tr><tr><th id="L1923"><a href="#L1923">1923</a></th><td>                        bounds.SetHeight(tableHeight);</td></tr><tr><th id="L1924"><a href="#L1924">1924</a></th><td></td></tr><tr><th id="L1925"><a href="#L1925">1925</a></th><td>                END AlignCells;</td></tr><tr><th id="L1926"><a href="#L1926">1926</a></th><td></td></tr><tr><th id="L1927"><a href="#L1927">1927</a></th><td>                PROCEDURE ParentTvWidthChanged*(x : LONGINT);</td></tr><tr><th id="L1928"><a href="#L1928">1928</a></th><td>                BEGIN</td></tr><tr><th id="L1929"><a href="#L1929">1929</a></th><td>                        parentWidth := x - 20;</td></tr><tr><th id="L1930"><a href="#L1930">1930</a></th><td>                        IF parentWidth &lt; 1 THEN parentWidth := 1 END;</td></tr><tr><th id="L1931"><a href="#L1931">1931</a></th><td>                        AlignCells();</td></tr><tr><th id="L1932"><a href="#L1932">1932</a></th><td>                END ParentTvWidthChanged;</td></tr><tr><th id="L1933"><a href="#L1933">1933</a></th><td></td></tr><tr><th id="L1934"><a href="#L1934">1934</a></th><td>        END Table;</td></tr><tr><th id="L1935"><a href="#L1935">1935</a></th><td></td></tr><tr><th id="L1936"><a href="#L1936">1936</a></th><td>        TableCell = OBJECT (VisualComponent)</td></tr><tr><th id="L1937"><a href="#L1937">1937</a></th><td>        VAR</td></tr><tr><th id="L1938"><a href="#L1938">1938</a></th><td>                parentTable : Table;</td></tr><tr><th id="L1939"><a href="#L1939">1939</a></th><td>                transformer : Transformer;</td></tr><tr><th id="L1940"><a href="#L1940">1940</a></th><td>                tv : WMTextView.TextView;</td></tr><tr><th id="L1941"><a href="#L1941">1941</a></th><td>                text : Texts.Text;</td></tr><tr><th id="L1942"><a href="#L1942">1942</a></th><td>                minWidth, maxWidth : LONGINT;</td></tr><tr><th id="L1943"><a href="#L1943">1943</a></th><td>                width, height : LONGINT;</td></tr><tr><th id="L1944"><a href="#L1944">1944</a></th><td>                colspan, rowspan : LONGINT;</td></tr><tr><th id="L1945"><a href="#L1945">1945</a></th><td>                bgImage : WebBrowserComponents.TileImagePanel;</td></tr><tr><th id="L1946"><a href="#L1946">1946</a></th><td>                writer : Streams.Writer;</td></tr><tr><th id="L1947"><a href="#L1947">1947</a></th><td>                textWriter : TextUtilities.TextWriter;</td></tr><tr><th id="L1948"><a href="#L1948">1948</a></th><td></td></tr><tr><th id="L1949"><a href="#L1949">1949</a></th><td>                PROCEDURE &amp; New*(seq : WMMessages.MsgSequencer; parentTable : Table; elem : XML.Element; textColor, linkColor, vlinkColor, alinkColor : LONGINT; url : String; loadLink : WMEvents.EventListener; charset : String; frameName : String; form : Form; baseAddress : String; baseTarget : String);</td></tr><tr><th id="L1950"><a href="#L1950">1950</a></th><td>                VAR</td></tr><tr><th id="L1951"><a href="#L1951">1951</a></th><td>                        s : String;</td></tr><tr><th id="L1952"><a href="#L1952">1952</a></th><td>                        align : LONGINT;</td></tr><tr><th id="L1953"><a href="#L1953">1953</a></th><td>                        xmlDoc : XML.Document;</td></tr><tr><th id="L1954"><a href="#L1954">1954</a></th><td>                        bbtDecoder : TextUtilities.BluebottleDecoder;</td></tr><tr><th id="L1955"><a href="#L1955">1955</a></th><td>                        rec : WMRectangles.Rectangle;</td></tr><tr><th id="L1956"><a href="#L1956">1956</a></th><td>                        bgImageName : String;</td></tr><tr><th id="L1957"><a href="#L1957">1957</a></th><td>                        item : EmbeddedObject;</td></tr><tr><th id="L1958"><a href="#L1958">1958</a></th><td>                        dummy : LONGINT;</td></tr><tr><th id="L1959"><a href="#L1959">1959</a></th><td>                BEGIN</td></tr><tr><th id="L1960"><a href="#L1960">1960</a></th><td>                        Init;</td></tr><tr><th id="L1961"><a href="#L1961">1961</a></th><td>                        SetSequencer(seq);</td></tr><tr><th id="L1962"><a href="#L1962">1962</a></th><td></td></tr><tr><th id="L1963"><a href="#L1963">1963</a></th><td>                        SELF.parentTable := parentTable;</td></tr><tr><th id="L1964"><a href="#L1964">1964</a></th><td></td></tr><tr><th id="L1965"><a href="#L1965">1965</a></th><td>                        takesFocus.Set(FALSE);</td></tr><tr><th id="L1966"><a href="#L1966">1966</a></th><td></td></tr><tr><th id="L1967"><a href="#L1967">1967</a></th><td>                        (* Get alignment *)</td></tr><tr><th id="L1968"><a href="#L1968">1968</a></th><td>                        s := GetElemAttributeValue(elem, "align", TRUE);</td></tr><tr><th id="L1969"><a href="#L1969">1969</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1970"><a href="#L1970">1970</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1971"><a href="#L1971">1971</a></th><td>                                IF s^ = "center" THEN</td></tr><tr><th id="L1972"><a href="#L1972">1972</a></th><td>                                        align := alignCenter;</td></tr><tr><th id="L1973"><a href="#L1973">1973</a></th><td>                                ELSIF s^ = "right" THEN</td></tr><tr><th id="L1974"><a href="#L1974">1974</a></th><td>                                        align := alignRight;</td></tr><tr><th id="L1975"><a href="#L1975">1975</a></th><td>                                ELSIF s^ = "justify" THEN</td></tr><tr><th id="L1976"><a href="#L1976">1976</a></th><td>                                        align := alignJustify;</td></tr><tr><th id="L1977"><a href="#L1977">1977</a></th><td>                                ELSE</td></tr><tr><th id="L1978"><a href="#L1978">1978</a></th><td>                                        align := alignLeft;</td></tr><tr><th id="L1979"><a href="#L1979">1979</a></th><td>                                END;</td></tr><tr><th id="L1980"><a href="#L1980">1980</a></th><td>                        ELSE</td></tr><tr><th id="L1981"><a href="#L1981">1981</a></th><td>                                align := alignLeft;</td></tr><tr><th id="L1982"><a href="#L1982">1982</a></th><td>                        END;</td></tr><tr><th id="L1983"><a href="#L1983">1983</a></th><td></td></tr><tr><th id="L1984"><a href="#L1984">1984</a></th><td>                        (* Get &amp; Set background-color *)</td></tr><tr><th id="L1985"><a href="#L1985">1985</a></th><td>                        s := GetElemAttributeValue(elem, "bgcolor", TRUE);</td></tr><tr><th id="L1986"><a href="#L1986">1986</a></th><td>                        IF s = NIL THEN</td></tr><tr><th id="L1987"><a href="#L1987">1987</a></th><td>                                s :=  GetElemAttributeValue(elem.GetParent(), "bgcolor", TRUE);</td></tr><tr><th id="L1988"><a href="#L1988">1988</a></th><td>                        END;</td></tr><tr><th id="L1989"><a href="#L1989">1989</a></th><td></td></tr><tr><th id="L1990"><a href="#L1990">1990</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1991"><a href="#L1991">1991</a></th><td>                                fillColor.Set(GetColor(s) * 0100H + 0FFH);</td></tr><tr><th id="L1992"><a href="#L1992">1992</a></th><td>                        END;</td></tr><tr><th id="L1993"><a href="#L1993">1993</a></th><td></td></tr><tr><th id="L1994"><a href="#L1994">1994</a></th><td>                        (* Get colspan *)</td></tr><tr><th id="L1995"><a href="#L1995">1995</a></th><td>                        s := GetElemAttributeValue(elem, "colspan", FALSE);</td></tr><tr><th id="L1996"><a href="#L1996">1996</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L1997"><a href="#L1997">1997</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L1998"><a href="#L1998">1998</a></th><td>                                Strings.StrToInt(s^, colspan);</td></tr><tr><th id="L1999"><a href="#L1999">1999</a></th><td>                                IF colspan &lt; 1 THEN colspan := 1 END;</td></tr><tr><th id="L2000"><a href="#L2000">2000</a></th><td>                        ELSE</td></tr><tr><th id="L2001"><a href="#L2001">2001</a></th><td>                                colspan := 1;</td></tr><tr><th id="L2002"><a href="#L2002">2002</a></th><td>                        END;</td></tr><tr><th id="L2003"><a href="#L2003">2003</a></th><td></td></tr><tr><th id="L2004"><a href="#L2004">2004</a></th><td>                        (* Get rowspan *)</td></tr><tr><th id="L2005"><a href="#L2005">2005</a></th><td>                        s := GetElemAttributeValue(elem, "rowspan", FALSE);</td></tr><tr><th id="L2006"><a href="#L2006">2006</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L2007"><a href="#L2007">2007</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L2008"><a href="#L2008">2008</a></th><td>                                Strings.StrToInt(s^, rowspan);</td></tr><tr><th id="L2009"><a href="#L2009">2009</a></th><td>                                IF rowspan &lt; 1 THEN rowspan := 1 END;</td></tr><tr><th id="L2010"><a href="#L2010">2010</a></th><td>                        ELSE</td></tr><tr><th id="L2011"><a href="#L2011">2011</a></th><td>                                rowspan := 1;</td></tr><tr><th id="L2012"><a href="#L2012">2012</a></th><td>                        END;</td></tr><tr><th id="L2013"><a href="#L2013">2013</a></th><td></td></tr><tr><th id="L2014"><a href="#L2014">2014</a></th><td>                        (* Get width *)</td></tr><tr><th id="L2015"><a href="#L2015">2015</a></th><td>                        s := GetElemAttributeValue(elem, "width", FALSE);</td></tr><tr><th id="L2016"><a href="#L2016">2016</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L2017"><a href="#L2017">2017</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L2018"><a href="#L2018">2018</a></th><td>                                Strings.StrToInt(s^, width);</td></tr><tr><th id="L2019"><a href="#L2019">2019</a></th><td>                        END;</td></tr><tr><th id="L2020"><a href="#L2020">2020</a></th><td>                        INC(width, 2 * colspan * parentTable.cellpadding + (colspan - 1) * parentTable.cellspacing);</td></tr><tr><th id="L2021"><a href="#L2021">2021</a></th><td></td></tr><tr><th id="L2022"><a href="#L2022">2022</a></th><td>                        (* Get height *)</td></tr><tr><th id="L2023"><a href="#L2023">2023</a></th><td>                        s := GetElemAttributeValue(elem, "height", FALSE);</td></tr><tr><th id="L2024"><a href="#L2024">2024</a></th><td>                        IF s # NIL THEN</td></tr><tr><th id="L2025"><a href="#L2025">2025</a></th><td>                                Strings.TrimWS(s^);</td></tr><tr><th id="L2026"><a href="#L2026">2026</a></th><td>                                Strings.StrToInt(s^, height);</td></tr><tr><th id="L2027"><a href="#L2027">2027</a></th><td>                        END;</td></tr><tr><th id="L2028"><a href="#L2028">2028</a></th><td>                        INC(height, 2 * rowspan * parentTable.cellpadding + (rowspan - 1) * parentTable.cellspacing);</td></tr><tr><th id="L2029"><a href="#L2029">2029</a></th><td></td></tr><tr><th id="L2030"><a href="#L2030">2030</a></th><td>                        (* Get cell background image (not standard html 4.01) *)</td></tr><tr><th id="L2031"><a href="#L2031">2031</a></th><td>                        s := GetElemAttributeValue(elem, "background", FALSE);</td></tr><tr><th id="L2032"><a href="#L2032">2032</a></th><td>                        IF s#NIL THEN</td></tr><tr><th id="L2033"><a href="#L2033">2033</a></th><td>                                bgImageName := ResolveAddress(baseAddress, s);</td></tr><tr><th id="L2034"><a href="#L2034">2034</a></th><td>                                NEW(bgImage, NIL, bgImageName);</td></tr><tr><th id="L2035"><a href="#L2035">2035</a></th><td>                                AddContent(bgImage);</td></tr><tr><th id="L2036"><a href="#L2036">2036</a></th><td>                        END;</td></tr><tr><th id="L2037"><a href="#L2037">2037</a></th><td></td></tr><tr><th id="L2038"><a href="#L2038">2038</a></th><td>                        NEW(transformer, elem, url, 100, loadLink, charset, frameName); (* the initial width is unimportant, because it will be changed soon... *)</td></tr><tr><th id="L2039"><a href="#L2039">2039</a></th><td>                        transformer.textColor := textColor;</td></tr><tr><th id="L2040"><a href="#L2040">2040</a></th><td>                        transformer.linkColor := linkColor;</td></tr><tr><th id="L2041"><a href="#L2041">2041</a></th><td>                        transformer.vlinkColor := vlinkColor;</td></tr><tr><th id="L2042"><a href="#L2042">2042</a></th><td>                        transformer.alinkColor := alinkColor;</td></tr><tr><th id="L2043"><a href="#L2043">2043</a></th><td>                        transformer.form := form;</td></tr><tr><th id="L2044"><a href="#L2044">2044</a></th><td>                        transformer.initAlignment := align;</td></tr><tr><th id="L2045"><a href="#L2045">2045</a></th><td>                        transformer.baseAddress := baseAddress;</td></tr><tr><th id="L2046"><a href="#L2046">2046</a></th><td>                        transformer.baseTarget := baseTarget;</td></tr><tr><th id="L2047"><a href="#L2047">2047</a></th><td>                        transformer.sequencer := seq;</td></tr><tr><th id="L2048"><a href="#L2048">2048</a></th><td>                        transformer.isTableContent := TRUE;</td></tr><tr><th id="L2049"><a href="#L2049">2049</a></th><td>                        xmlDoc := transformer.Transform();</td></tr><tr><th id="L2050"><a href="#L2050">2050</a></th><td></td></tr><tr><th id="L2051"><a href="#L2051">2051</a></th><td>                        NEW(bbtDecoder);</td></tr><tr><th id="L2052"><a href="#L2052">2052</a></th><td>                        bbtDecoder.OpenXML(xmlDoc);</td></tr><tr><th id="L2053"><a href="#L2053">2053</a></th><td>                        text := bbtDecoder.GetText();</td></tr><tr><th id="L2054"><a href="#L2054">2054</a></th><td></td></tr><tr><th id="L2055"><a href="#L2055">2055</a></th><td>(*                      NEW(text);</td></tr><tr><th id="L2056"><a href="#L2056">2056</a></th><td>                        NEW(textWriter, text);</td></tr><tr><th id="L2057"><a href="#L2057">2057</a></th><td>                        writer := textWriter.GetWriter();</td></tr><tr><th id="L2058"><a href="#L2058">2058</a></th><td>                        xmlDoc.Write(writer, 0);</td></tr><tr><th id="L2059"><a href="#L2059">2059</a></th><td>                        writer.Update;*)</td></tr><tr><th id="L2060"><a href="#L2060">2060</a></th><td></td></tr><tr><th id="L2061"><a href="#L2061">2061</a></th><td>                        NEW(tv);</td></tr><tr><th id="L2062"><a href="#L2062">2062</a></th><td>                        </td></tr><tr><th id="L2063"><a href="#L2063">2063</a></th><td>                         tv.SetText(text); (*!??  redundant calls to tv.SetText, implying internal updates ...*)</td></tr><tr><th id="L2064"><a href="#L2064">2064</a></th><td>                        tv.onLinkClicked.Add(loadLink);</td></tr><tr><th id="L2065"><a href="#L2065">2065</a></th><td>                        AddContent(tv);</td></tr><tr><th id="L2066"><a href="#L2066">2066</a></th><td>                        </td></tr><tr><th id="L2067"><a href="#L2067">2067</a></th><td>                        tv.alignment.Set(WMComponents.AlignClient);</td></tr><tr><th id="L2068"><a href="#L2068">2068</a></th><td>                        rec.l := parentTable.cellpadding; rec.t := parentTable.cellpadding; rec.r := parentTable.cellpadding; rec.b := parentTable.cellpadding;</td></tr><tr><th id="L2069"><a href="#L2069">2069</a></th><td>                        tv.borders.Set(rec);</td></tr><tr><th id="L2070"><a href="#L2070">2070</a></th><td>                        tv.showBorder.Set(parentTable.rules);</td></tr><tr><th id="L2071"><a href="#L2071">2071</a></th><td>                        tv.firstLine.Set(0);</td></tr><tr><th id="L2072"><a href="#L2072">2072</a></th><td></td></tr><tr><th id="L2073"><a href="#L2073">2073</a></th><td>                        (* get minimal cell-width *)</td></tr><tr><th id="L2074"><a href="#L2074">2074</a></th><td>                        item := transformer.embeddedObjectsList;</td></tr><tr><th id="L2075"><a href="#L2075">2075</a></th><td>                        WHILE item # NIL DO</td></tr><tr><th id="L2076"><a href="#L2076">2076</a></th><td>                                IF item.object IS Table THEN</td></tr><tr><th id="L2077"><a href="#L2077">2077</a></th><td>                                        item.object(Table).bounds.SetWidth(item.object(Table).minTableWidth);</td></tr><tr><th id="L2078"><a href="#L2078">2078</a></th><td>                                END;</td></tr><tr><th id="L2079"><a href="#L2079">2079</a></th><td>                                item := item.prev;</td></tr><tr><th id="L2080"><a href="#L2080">2080</a></th><td>                        END;</td></tr><tr><th id="L2081"><a href="#L2081">2081</a></th><td>                        (*tv.SetText(text);*)</td></tr><tr><th id="L2082"><a href="#L2082">2082</a></th><td>                        tv.GetMinMaxWidth(minWidth, dummy);</td></tr><tr><th id="L2083"><a href="#L2083">2083</a></th><td>                        (*KernelLog.String("TableCell.New: minWidth of this cell: "); KernelLog.Int(minWidth, 0);*)</td></tr><tr><th id="L2084"><a href="#L2084">2084</a></th><td>                        INC(minWidth, 2 * colspan * parentTable.cellpadding + (colspan - 1) * parentTable.cellspacing);</td></tr><tr><th id="L2085"><a href="#L2085">2085</a></th><td>                        IF width &gt; minWidth THEN minWidth := width END;</td></tr><tr><th id="L2086"><a href="#L2086">2086</a></th><td></td></tr><tr><th id="L2087"><a href="#L2087">2087</a></th><td>                        (* get maximal cell-width *)</td></tr><tr><th id="L2088"><a href="#L2088">2088</a></th><td>                        item := transformer.embeddedObjectsList;</td></tr><tr><th id="L2089"><a href="#L2089">2089</a></th><td>                        WHILE item # NIL DO</td></tr><tr><th id="L2090"><a href="#L2090">2090</a></th><td>                                IF item.object IS Table THEN</td></tr><tr><th id="L2091"><a href="#L2091">2091</a></th><td>                                        item.object(Table).bounds.SetWidth(item.object(Table).maxTableWidth);</td></tr><tr><th id="L2092"><a href="#L2092">2092</a></th><td>                                END;</td></tr><tr><th id="L2093"><a href="#L2093">2093</a></th><td>                                item := item.prev;</td></tr><tr><th id="L2094"><a href="#L2094">2094</a></th><td>                        END;</td></tr><tr><th id="L2095"><a href="#L2095">2095</a></th><td>                        tv.SetText(text);</td></tr><tr><th id="L2096"><a href="#L2096">2096</a></th><td>                        tv.GetMinMaxWidth(dummy, maxWidth);</td></tr><tr><th id="L2097"><a href="#L2097">2097</a></th><td>                        (*KernelLog.String(", maxWidth of this cell: "); KernelLog.Int(maxWidth, 0); KernelLog.Ln;*)</td></tr><tr><th id="L2098"><a href="#L2098">2098</a></th><td>                        INC(maxWidth, 2 * colspan * parentTable.cellpadding + (colspan - 1) * parentTable.cellspacing);</td></tr><tr><th id="L2099"><a href="#L2099">2099</a></th><td>                        </td></tr><tr><th id="L2100"><a href="#L2100">2100</a></th><td>                        (*SetSequencer(seq); *)(*!??PH*)</td></tr><tr><th id="L2101"><a href="#L2101">2101</a></th><td>                END New;</td></tr><tr><th id="L2102"><a href="#L2102">2102</a></th><td></td></tr><tr><th id="L2103"><a href="#L2103">2103</a></th><td>                PROCEDURE SetWidth(width : LONGINT);</td></tr><tr><th id="L2104"><a href="#L2104">2104</a></th><td>                VAR</td></tr><tr><th id="L2105"><a href="#L2105">2105</a></th><td>                        item : EmbeddedObject;</td></tr><tr><th id="L2106"><a href="#L2106">2106</a></th><td>                BEGIN</td></tr><tr><th id="L2107"><a href="#L2107">2107</a></th><td>                        bounds.SetWidth(width);</td></tr><tr><th id="L2108"><a href="#L2108">2108</a></th><td>                        item := transformer.embeddedObjectsList;</td></tr><tr><th id="L2109"><a href="#L2109">2109</a></th><td>                        WHILE item # NIL DO</td></tr><tr><th id="L2110"><a href="#L2110">2110</a></th><td>                                IF item.object IS Table THEN</td></tr><tr><th id="L2111"><a href="#L2111">2111</a></th><td>                                        item.object(Table).ParentTvWidthChanged(width);</td></tr><tr><th id="L2112"><a href="#L2112">2112</a></th><td>                                END;</td></tr><tr><th id="L2113"><a href="#L2113">2113</a></th><td>                                item := item.prev;</td></tr><tr><th id="L2114"><a href="#L2114">2114</a></th><td>                        END;</td></tr><tr><th id="L2115"><a href="#L2115">2115</a></th><td>                        tv.SetText(text);</td></tr><tr><th id="L2116"><a href="#L2116">2116</a></th><td>                END SetWidth;</td></tr><tr><th id="L2117"><a href="#L2117">2117</a></th><td></td></tr><tr><th id="L2118"><a href="#L2118">2118</a></th><td>        END TableCell;</td></tr><tr><th id="L2119"><a href="#L2119">2119</a></th><td></td></tr><tr><th id="L2120"><a href="#L2120">2120</a></th><td>        Form = OBJECT</td></tr><tr><th id="L2121"><a href="#L2121">2121</a></th><td>        VAR</td></tr><tr><th id="L2122"><a href="#L2122">2122</a></th><td>                action : String;</td></tr><tr><th id="L2123"><a href="#L2123">2123</a></th><td>                loadLink : WMEvents.EventListener;</td></tr><tr><th id="L2124"><a href="#L2124">2124</a></th><td>                firstComp, lastComp : FormComponent;</td></tr><tr><th id="L2125"><a href="#L2125">2125</a></th><td>                firstRadioButtonGroup, lastRadioButtonGroup : RadioButtonGroup;</td></tr><tr><th id="L2126"><a href="#L2126">2126</a></th><td></td></tr><tr><th id="L2127"><a href="#L2127">2127</a></th><td>                PROCEDURE &amp;Init*(action : String; loadLink : WMEvents.EventListener);</td></tr><tr><th id="L2128"><a href="#L2128">2128</a></th><td>                BEGIN</td></tr><tr><th id="L2129"><a href="#L2129">2129</a></th><td>                        SELF.action := action;</td></tr><tr><th id="L2130"><a href="#L2130">2130</a></th><td>                        SELF.loadLink := loadLink;</td></tr><tr><th id="L2131"><a href="#L2131">2131</a></th><td>                END Init;</td></tr><tr><th id="L2132"><a href="#L2132">2132</a></th><td></td></tr><tr><th id="L2133"><a href="#L2133">2133</a></th><td>                PROCEDURE Send(sender, par : ANY);</td></tr><tr><th id="L2134"><a href="#L2134">2134</a></th><td>                VAR</td></tr><tr><th id="L2135"><a href="#L2135">2135</a></th><td>                        url, s, t : String;</td></tr><tr><th id="L2136"><a href="#L2136">2136</a></th><td>                        curr : FormComponent;</td></tr><tr><th id="L2137"><a href="#L2137">2137</a></th><td>                        isFirst : BOOLEAN;</td></tr><tr><th id="L2138"><a href="#L2138">2138</a></th><td>                        msg : WMTextView.LinkWrapper;</td></tr><tr><th id="L2139"><a href="#L2139">2139</a></th><td>                BEGIN</td></tr><tr><th id="L2140"><a href="#L2140">2140</a></th><td>                        url := action;</td></tr><tr><th id="L2141"><a href="#L2141">2141</a></th><td>                        isFirst := TRUE;</td></tr><tr><th id="L2142"><a href="#L2142">2142</a></th><td>                        curr := firstComp;</td></tr><tr><th id="L2143"><a href="#L2143">2143</a></th><td>                        WHILE curr # NIL DO</td></tr><tr><th id="L2144"><a href="#L2144">2144</a></th><td>                                IF curr.IsSuccessful() THEN</td></tr><tr><th id="L2145"><a href="#L2145">2145</a></th><td>                                        s := curr.GetValue();</td></tr><tr><th id="L2146"><a href="#L2146">2146</a></th><td>                                        s := Utf82UrlEncodedUtf8(s^);</td></tr><tr><th id="L2147"><a href="#L2147">2147</a></th><td>                                        s := Strings.ConcatToNew("=", s^);</td></tr><tr><th id="L2148"><a href="#L2148">2148</a></th><td>                                        t := Utf82UrlEncodedUtf8(curr.name^);</td></tr><tr><th id="L2149"><a href="#L2149">2149</a></th><td>                                        s := Strings.ConcatToNew(t^, s^);</td></tr><tr><th id="L2150"><a href="#L2150">2150</a></th><td>                                        IF isFirst THEN</td></tr><tr><th id="L2151"><a href="#L2151">2151</a></th><td>                                                s := Strings.ConcatToNew("?", s^);</td></tr><tr><th id="L2152"><a href="#L2152">2152</a></th><td>                                                isFirst := FALSE;</td></tr><tr><th id="L2153"><a href="#L2153">2153</a></th><td>                                        ELSE</td></tr><tr><th id="L2154"><a href="#L2154">2154</a></th><td>                                                s := Strings.ConcatToNew("&amp;", s^);</td></tr><tr><th id="L2155"><a href="#L2155">2155</a></th><td>                                        END;</td></tr><tr><th id="L2156"><a href="#L2156">2156</a></th><td>                                        url := Strings.ConcatToNew(url^, s^);</td></tr><tr><th id="L2157"><a href="#L2157">2157</a></th><td>                                END;</td></tr><tr><th id="L2158"><a href="#L2158">2158</a></th><td>                                curr := curr.nextComp;</td></tr><tr><th id="L2159"><a href="#L2159">2159</a></th><td>                        END;</td></tr><tr><th id="L2160"><a href="#L2160">2160</a></th><td>                        NEW(msg);</td></tr><tr><th id="L2161"><a href="#L2161">2161</a></th><td>                        msg.link := EncodeLinkData(url, NIL, NIL);</td></tr><tr><th id="L2162"><a href="#L2162">2162</a></th><td>                        loadLink(SELF, msg);</td></tr><tr><th id="L2163"><a href="#L2163">2163</a></th><td>                END Send;</td></tr><tr><th id="L2164"><a href="#L2164">2164</a></th><td></td></tr><tr><th id="L2165"><a href="#L2165">2165</a></th><td>                PROCEDURE Reset(sender, par : ANY);</td></tr><tr><th id="L2166"><a href="#L2166">2166</a></th><td>                VAR</td></tr><tr><th id="L2167"><a href="#L2167">2167</a></th><td>                        curr : FormComponent;</td></tr><tr><th id="L2168"><a href="#L2168">2168</a></th><td>                BEGIN</td></tr><tr><th id="L2169"><a href="#L2169">2169</a></th><td>                        curr := firstComp;</td></tr><tr><th id="L2170"><a href="#L2170">2170</a></th><td>                        WHILE curr # NIL DO</td></tr><tr><th id="L2171"><a href="#L2171">2171</a></th><td>                                curr.Reset();</td></tr><tr><th id="L2172"><a href="#L2172">2172</a></th><td>                                curr := curr.nextComp;</td></tr><tr><th id="L2173"><a href="#L2173">2173</a></th><td>                        END;</td></tr><tr><th id="L2174"><a href="#L2174">2174</a></th><td>                END Reset;</td></tr><tr><th id="L2175"><a href="#L2175">2175</a></th><td></td></tr><tr><th id="L2176"><a href="#L2176">2176</a></th><td>                PROCEDURE AddFormComponent(comp : FormComponent);</td></tr><tr><th id="L2177"><a href="#L2177">2177</a></th><td>                BEGIN</td></tr><tr><th id="L2178"><a href="#L2178">2178</a></th><td>                        IF firstComp = NIL THEN</td></tr><tr><th id="L2179"><a href="#L2179">2179</a></th><td>                                firstComp := comp;</td></tr><tr><th id="L2180"><a href="#L2180">2180</a></th><td>                                lastComp := comp;</td></tr><tr><th id="L2181"><a href="#L2181">2181</a></th><td>                        ELSE</td></tr><tr><th id="L2182"><a href="#L2182">2182</a></th><td>                                lastComp.nextComp := comp;</td></tr><tr><th id="L2183"><a href="#L2183">2183</a></th><td>                                lastComp := comp;</td></tr><tr><th id="L2184"><a href="#L2184">2184</a></th><td>                        END;</td></tr><tr><th id="L2185"><a href="#L2185">2185</a></th><td>                END AddFormComponent;</td></tr><tr><th id="L2186"><a href="#L2186">2186</a></th><td></td></tr><tr><th id="L2187"><a href="#L2187">2187</a></th><td>                PROCEDURE AddRadioButton(radioButton : FormRadioButton);</td></tr><tr><th id="L2188"><a href="#L2188">2188</a></th><td>                VAR</td></tr><tr><th id="L2189"><a href="#L2189">2189</a></th><td>                        curr : RadioButtonGroup;</td></tr><tr><th id="L2190"><a href="#L2190">2190</a></th><td>                BEGIN</td></tr><tr><th id="L2191"><a href="#L2191">2191</a></th><td>                        curr := firstRadioButtonGroup;</td></tr><tr><th id="L2192"><a href="#L2192">2192</a></th><td>                        WHILE(curr # NIL) &amp; ~Strings.Equal(Strings.LowerCaseInNew(curr.name^), Strings.LowerCaseInNew(radioButton.name^)) DO</td></tr><tr><th id="L2193"><a href="#L2193">2193</a></th><td>                                curr := curr.next;</td></tr><tr><th id="L2194"><a href="#L2194">2194</a></th><td>                        END;</td></tr><tr><th id="L2195"><a href="#L2195">2195</a></th><td>                        IF curr = NIL THEN</td></tr><tr><th id="L2196"><a href="#L2196">2196</a></th><td>                                NEW(curr, radioButton.name);</td></tr><tr><th id="L2197"><a href="#L2197">2197</a></th><td>                                IF firstRadioButtonGroup = NIL THEN</td></tr><tr><th id="L2198"><a href="#L2198">2198</a></th><td>                                        firstRadioButtonGroup := curr;</td></tr><tr><th id="L2199"><a href="#L2199">2199</a></th><td>                                        lastRadioButtonGroup := curr;</td></tr><tr><th id="L2200"><a href="#L2200">2200</a></th><td>                                ELSE</td></tr><tr><th id="L2201"><a href="#L2201">2201</a></th><td>                                        lastRadioButtonGroup.next := curr;</td></tr><tr><th id="L2202"><a href="#L2202">2202</a></th><td>                                        lastRadioButtonGroup := curr;</td></tr><tr><th id="L2203"><a href="#L2203">2203</a></th><td>                                END;</td></tr><tr><th id="L2204"><a href="#L2204">2204</a></th><td>                                AddFormComponent(curr);</td></tr><tr><th id="L2205"><a href="#L2205">2205</a></th><td>                        END;</td></tr><tr><th id="L2206"><a href="#L2206">2206</a></th><td>                        curr.Add(radioButton);</td></tr><tr><th id="L2207"><a href="#L2207">2207</a></th><td>                        radioButton.group := curr;</td></tr><tr><th id="L2208"><a href="#L2208">2208</a></th><td>                END AddRadioButton;</td></tr><tr><th id="L2209"><a href="#L2209">2209</a></th><td></td></tr><tr><th id="L2210"><a href="#L2210">2210</a></th><td>        END Form;</td></tr><tr><th id="L2211"><a href="#L2211">2211</a></th><td></td></tr><tr><th id="L2212"><a href="#L2212">2212</a></th><td>        FormComponent = OBJECT</td></tr><tr><th id="L2213"><a href="#L2213">2213</a></th><td>        VAR</td></tr><tr><th id="L2214"><a href="#L2214">2214</a></th><td>                nextComp : FormComponent;</td></tr><tr><th id="L2215"><a href="#L2215">2215</a></th><td>                name : String;</td></tr><tr><th id="L2216"><a href="#L2216">2216</a></th><td></td></tr><tr><th id="L2217"><a href="#L2217">2217</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2218"><a href="#L2218">2218</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2219"><a href="#L2219">2219</a></th><td></td></tr><tr><th id="L2220"><a href="#L2220">2220</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2221"><a href="#L2221">2221</a></th><td>                END GetValue;</td></tr><tr><th id="L2222"><a href="#L2222">2222</a></th><td></td></tr><tr><th id="L2223"><a href="#L2223">2223</a></th><td>                PROCEDURE Reset;</td></tr><tr><th id="L2224"><a href="#L2224">2224</a></th><td>                END Reset;</td></tr><tr><th id="L2225"><a href="#L2225">2225</a></th><td></td></tr><tr><th id="L2226"><a href="#L2226">2226</a></th><td>        END FormComponent;</td></tr><tr><th id="L2227"><a href="#L2227">2227</a></th><td></td></tr><tr><th id="L2228"><a href="#L2228">2228</a></th><td>        FormButton = OBJECT (FormComponent)</td></tr><tr><th id="L2229"><a href="#L2229">2229</a></th><td>        VAR</td></tr><tr><th id="L2230"><a href="#L2230">2230</a></th><td>                button : WMStandardComponents.Button;</td></tr><tr><th id="L2231"><a href="#L2231">2231</a></th><td>                value : String;</td></tr><tr><th id="L2232"><a href="#L2232">2232</a></th><td>                proc : WMEvents.EventListener;</td></tr><tr><th id="L2233"><a href="#L2233">2233</a></th><td>                active : BOOLEAN;</td></tr><tr><th id="L2234"><a href="#L2234">2234</a></th><td></td></tr><tr><th id="L2235"><a href="#L2235">2235</a></th><td>                PROCEDURE &amp;Init*(name : String; value : String; proc : WMEvents.EventListener);</td></tr><tr><th id="L2236"><a href="#L2236">2236</a></th><td>                VAR</td></tr><tr><th id="L2237"><a href="#L2237">2237</a></th><td>                        x, y : LONGINT;</td></tr><tr><th id="L2238"><a href="#L2238">2238</a></th><td>                        font : WMGraphics.Font;</td></tr><tr><th id="L2239"><a href="#L2239">2239</a></th><td>                BEGIN</td></tr><tr><th id="L2240"><a href="#L2240">2240</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2241"><a href="#L2241">2241</a></th><td>                        SELF.value := value;</td></tr><tr><th id="L2242"><a href="#L2242">2242</a></th><td>                        SELF.proc := proc;</td></tr><tr><th id="L2243"><a href="#L2243">2243</a></th><td>                        NEW(button);</td></tr><tr><th id="L2244"><a href="#L2244">2244</a></th><td>                        value := TransformCharEnt(value);</td></tr><tr><th id="L2245"><a href="#L2245">2245</a></th><td>                        button.caption.SetAOC(value^);</td></tr><tr><th id="L2246"><a href="#L2246">2246</a></th><td>                        font := button.GetFont();</td></tr><tr><th id="L2247"><a href="#L2247">2247</a></th><td>                        font.GetStringSize(value^, x, y);</td></tr><tr><th id="L2248"><a href="#L2248">2248</a></th><td>                        button.bounds.SetExtents(x + 18, y + 8);</td></tr><tr><th id="L2249"><a href="#L2249">2249</a></th><td>                        button.onClick.Add(Click);</td></tr><tr><th id="L2250"><a href="#L2250">2250</a></th><td>                END Init;</td></tr><tr><th id="L2251"><a href="#L2251">2251</a></th><td></td></tr><tr><th id="L2252"><a href="#L2252">2252</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2253"><a href="#L2253">2253</a></th><td>                BEGIN</td></tr><tr><th id="L2254"><a href="#L2254">2254</a></th><td>                        RETURN active &amp; (name # NIL);</td></tr><tr><th id="L2255"><a href="#L2255">2255</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2256"><a href="#L2256">2256</a></th><td></td></tr><tr><th id="L2257"><a href="#L2257">2257</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2258"><a href="#L2258">2258</a></th><td>                BEGIN</td></tr><tr><th id="L2259"><a href="#L2259">2259</a></th><td>                        IF name # NIL THEN</td></tr><tr><th id="L2260"><a href="#L2260">2260</a></th><td>                                RETURN value;</td></tr><tr><th id="L2261"><a href="#L2261">2261</a></th><td>                        ELSE</td></tr><tr><th id="L2262"><a href="#L2262">2262</a></th><td>                                RETURN NIL;</td></tr><tr><th id="L2263"><a href="#L2263">2263</a></th><td>                        END;</td></tr><tr><th id="L2264"><a href="#L2264">2264</a></th><td>                END GetValue;</td></tr><tr><th id="L2265"><a href="#L2265">2265</a></th><td></td></tr><tr><th id="L2266"><a href="#L2266">2266</a></th><td>                PROCEDURE Click(sender, par : ANY);</td></tr><tr><th id="L2267"><a href="#L2267">2267</a></th><td>                BEGIN</td></tr><tr><th id="L2268"><a href="#L2268">2268</a></th><td>                        active := TRUE;</td></tr><tr><th id="L2269"><a href="#L2269">2269</a></th><td>                        IF proc # NIL THEN proc(sender, par) END;</td></tr><tr><th id="L2270"><a href="#L2270">2270</a></th><td>                        active := FALSE;</td></tr><tr><th id="L2271"><a href="#L2271">2271</a></th><td>                END Click;</td></tr><tr><th id="L2272"><a href="#L2272">2272</a></th><td></td></tr><tr><th id="L2273"><a href="#L2273">2273</a></th><td>        END FormButton;</td></tr><tr><th id="L2274"><a href="#L2274">2274</a></th><td></td></tr><tr><th id="L2275"><a href="#L2275">2275</a></th><td>        FormCheckbox = OBJECT (FormComponent)</td></tr><tr><th id="L2276"><a href="#L2276">2276</a></th><td>        VAR</td></tr><tr><th id="L2277"><a href="#L2277">2277</a></th><td>                checkbox : WMStandardComponents.Checkbox;</td></tr><tr><th id="L2278"><a href="#L2278">2278</a></th><td>                value : String;</td></tr><tr><th id="L2279"><a href="#L2279">2279</a></th><td>                init : BOOLEAN;</td></tr><tr><th id="L2280"><a href="#L2280">2280</a></th><td></td></tr><tr><th id="L2281"><a href="#L2281">2281</a></th><td>                PROCEDURE &amp;Init*(name : String; value : String; checked : BOOLEAN);</td></tr><tr><th id="L2282"><a href="#L2282">2282</a></th><td>                BEGIN</td></tr><tr><th id="L2283"><a href="#L2283">2283</a></th><td>                        NEW(checkbox);</td></tr><tr><th id="L2284"><a href="#L2284">2284</a></th><td>                        checkbox.bounds.SetExtents(12, 12);</td></tr><tr><th id="L2285"><a href="#L2285">2285</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2286"><a href="#L2286">2286</a></th><td>                        SELF.value := value;</td></tr><tr><th id="L2287"><a href="#L2287">2287</a></th><td>                        init := checked;</td></tr><tr><th id="L2288"><a href="#L2288">2288</a></th><td>                        IF checked THEN</td></tr><tr><th id="L2289"><a href="#L2289">2289</a></th><td>                                checkbox.state.Set(1);</td></tr><tr><th id="L2290"><a href="#L2290">2290</a></th><td>                        ELSE</td></tr><tr><th id="L2291"><a href="#L2291">2291</a></th><td>                                checkbox.state.Set(0);</td></tr><tr><th id="L2292"><a href="#L2292">2292</a></th><td>                        END;</td></tr><tr><th id="L2293"><a href="#L2293">2293</a></th><td>                END Init;</td></tr><tr><th id="L2294"><a href="#L2294">2294</a></th><td></td></tr><tr><th id="L2295"><a href="#L2295">2295</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2296"><a href="#L2296">2296</a></th><td>                BEGIN</td></tr><tr><th id="L2297"><a href="#L2297">2297</a></th><td>                        RETURN (checkbox.state.Get() = 1) &amp; (name # NIL);</td></tr><tr><th id="L2298"><a href="#L2298">2298</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2299"><a href="#L2299">2299</a></th><td></td></tr><tr><th id="L2300"><a href="#L2300">2300</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2301"><a href="#L2301">2301</a></th><td>                BEGIN</td></tr><tr><th id="L2302"><a href="#L2302">2302</a></th><td>                        IF name # NIL THEN</td></tr><tr><th id="L2303"><a href="#L2303">2303</a></th><td>                                RETURN value;</td></tr><tr><th id="L2304"><a href="#L2304">2304</a></th><td>                        ELSE</td></tr><tr><th id="L2305"><a href="#L2305">2305</a></th><td>                                RETURN NIL;</td></tr><tr><th id="L2306"><a href="#L2306">2306</a></th><td>                        END;</td></tr><tr><th id="L2307"><a href="#L2307">2307</a></th><td>                END GetValue;</td></tr><tr><th id="L2308"><a href="#L2308">2308</a></th><td></td></tr><tr><th id="L2309"><a href="#L2309">2309</a></th><td>                PROCEDURE Reset;</td></tr><tr><th id="L2310"><a href="#L2310">2310</a></th><td>                BEGIN</td></tr><tr><th id="L2311"><a href="#L2311">2311</a></th><td>                        IF init THEN</td></tr><tr><th id="L2312"><a href="#L2312">2312</a></th><td>                                checkbox.state.Set(1);</td></tr><tr><th id="L2313"><a href="#L2313">2313</a></th><td>                        ELSE</td></tr><tr><th id="L2314"><a href="#L2314">2314</a></th><td>                                checkbox.state.Set(0);</td></tr><tr><th id="L2315"><a href="#L2315">2315</a></th><td>                        END;</td></tr><tr><th id="L2316"><a href="#L2316">2316</a></th><td>                END Reset;</td></tr><tr><th id="L2317"><a href="#L2317">2317</a></th><td></td></tr><tr><th id="L2318"><a href="#L2318">2318</a></th><td>        END FormCheckbox;</td></tr><tr><th id="L2319"><a href="#L2319">2319</a></th><td></td></tr><tr><th id="L2320"><a href="#L2320">2320</a></th><td>        FormTextInput = OBJECT (FormComponent)</td></tr><tr><th id="L2321"><a href="#L2321">2321</a></th><td>        VAR</td></tr><tr><th id="L2322"><a href="#L2322">2322</a></th><td>                editor : WMEditors.Editor;</td></tr><tr><th id="L2323"><a href="#L2323">2323</a></th><td>                init : String;</td></tr><tr><th id="L2324"><a href="#L2324">2324</a></th><td></td></tr><tr><th id="L2325"><a href="#L2325">2325</a></th><td>                PROCEDURE &amp;Init*(name : String; value : String; size : LONGINT; maxlength : LONGINT; isPassword : BOOLEAN);</td></tr><tr><th id="L2326"><a href="#L2326">2326</a></th><td>                BEGIN</td></tr><tr><th id="L2327"><a href="#L2327">2327</a></th><td>                        NEW(editor);</td></tr><tr><th id="L2328"><a href="#L2328">2328</a></th><td>                        editor.multiLine.Set(FALSE);</td></tr><tr><th id="L2329"><a href="#L2329">2329</a></th><td>                        editor.tv.textAlignV.Set(WMGraphics.AlignCenter);</td></tr><tr><th id="L2330"><a href="#L2330">2330</a></th><td>                        editor.fillColor.Set(0FFFFFFFFH);</td></tr><tr><th id="L2331"><a href="#L2331">2331</a></th><td>                        editor.tv.showBorder.Set(TRUE);</td></tr><tr><th id="L2332"><a href="#L2332">2332</a></th><td>                        editor.tv.borders.Set(WMRectangles.MakeRect(3,3,1,1));</td></tr><tr><th id="L2333"><a href="#L2333">2333</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2334"><a href="#L2334">2334</a></th><td>                        init := value;</td></tr><tr><th id="L2335"><a href="#L2335">2335</a></th><td>                        IF isPassword THEN editor.tv.isPassword.Set(TRUE) END;</td></tr><tr><th id="L2336"><a href="#L2336">2336</a></th><td>                        value := TransformCharEnt(value);</td></tr><tr><th id="L2337"><a href="#L2337">2337</a></th><td>                        editor.SetAsString(value^);</td></tr><tr><th id="L2338"><a href="#L2338">2338</a></th><td>                        editor.bounds.SetExtents(8 * size, 22);</td></tr><tr><th id="L2339"><a href="#L2339">2339</a></th><td>                END Init;</td></tr><tr><th id="L2340"><a href="#L2340">2340</a></th><td></td></tr><tr><th id="L2341"><a href="#L2341">2341</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2342"><a href="#L2342">2342</a></th><td>                BEGIN</td></tr><tr><th id="L2343"><a href="#L2343">2343</a></th><td>                        RETURN name # NIL;</td></tr><tr><th id="L2344"><a href="#L2344">2344</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2345"><a href="#L2345">2345</a></th><td></td></tr><tr><th id="L2346"><a href="#L2346">2346</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2347"><a href="#L2347">2347</a></th><td>                VAR</td></tr><tr><th id="L2348"><a href="#L2348">2348</a></th><td>                        aoc : ARRAY 1024 OF CHAR;</td></tr><tr><th id="L2349"><a href="#L2349">2349</a></th><td>                BEGIN</td></tr><tr><th id="L2350"><a href="#L2350">2350</a></th><td>                        IF name # NIL THEN</td></tr><tr><th id="L2351"><a href="#L2351">2351</a></th><td>                                editor.GetAsString(aoc);</td></tr><tr><th id="L2352"><a href="#L2352">2352</a></th><td>                                RETURN Strings.NewString(aoc);</td></tr><tr><th id="L2353"><a href="#L2353">2353</a></th><td>                        ELSE</td></tr><tr><th id="L2354"><a href="#L2354">2354</a></th><td>                                RETURN NIL;</td></tr><tr><th id="L2355"><a href="#L2355">2355</a></th><td>                        END;</td></tr><tr><th id="L2356"><a href="#L2356">2356</a></th><td>                END GetValue;</td></tr><tr><th id="L2357"><a href="#L2357">2357</a></th><td></td></tr><tr><th id="L2358"><a href="#L2358">2358</a></th><td>                PROCEDURE Reset;</td></tr><tr><th id="L2359"><a href="#L2359">2359</a></th><td>                BEGIN</td></tr><tr><th id="L2360"><a href="#L2360">2360</a></th><td>                        editor.SetAsString(init^);</td></tr><tr><th id="L2361"><a href="#L2361">2361</a></th><td>                END Reset;</td></tr><tr><th id="L2362"><a href="#L2362">2362</a></th><td></td></tr><tr><th id="L2363"><a href="#L2363">2363</a></th><td>        END FormTextInput;</td></tr><tr><th id="L2364"><a href="#L2364">2364</a></th><td></td></tr><tr><th id="L2365"><a href="#L2365">2365</a></th><td>        FormRadioButton = OBJECT</td></tr><tr><th id="L2366"><a href="#L2366">2366</a></th><td>        VAR</td></tr><tr><th id="L2367"><a href="#L2367">2367</a></th><td>                next : FormRadioButton;</td></tr><tr><th id="L2368"><a href="#L2368">2368</a></th><td>                radioButton : WMStandardComponents.Checkbox;</td></tr><tr><th id="L2369"><a href="#L2369">2369</a></th><td>                name : String;</td></tr><tr><th id="L2370"><a href="#L2370">2370</a></th><td>                value : String;</td></tr><tr><th id="L2371"><a href="#L2371">2371</a></th><td>                group : RadioButtonGroup;</td></tr><tr><th id="L2372"><a href="#L2372">2372</a></th><td>                init : BOOLEAN;</td></tr><tr><th id="L2373"><a href="#L2373">2373</a></th><td></td></tr><tr><th id="L2374"><a href="#L2374">2374</a></th><td>                PROCEDURE &amp;Init*(name : String; value : String; checked : BOOLEAN);</td></tr><tr><th id="L2375"><a href="#L2375">2375</a></th><td>                BEGIN</td></tr><tr><th id="L2376"><a href="#L2376">2376</a></th><td>                        NEW(radioButton);</td></tr><tr><th id="L2377"><a href="#L2377">2377</a></th><td>                        radioButton.bounds.SetExtents(12, 12);</td></tr><tr><th id="L2378"><a href="#L2378">2378</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2379"><a href="#L2379">2379</a></th><td>                        SELF.value := value;</td></tr><tr><th id="L2380"><a href="#L2380">2380</a></th><td>                        init := checked;</td></tr><tr><th id="L2381"><a href="#L2381">2381</a></th><td>                        IF checked THEN</td></tr><tr><th id="L2382"><a href="#L2382">2382</a></th><td>                                radioButton.state.Set(1);</td></tr><tr><th id="L2383"><a href="#L2383">2383</a></th><td>                        ELSE</td></tr><tr><th id="L2384"><a href="#L2384">2384</a></th><td>                                radioButton.state.Set(0);</td></tr><tr><th id="L2385"><a href="#L2385">2385</a></th><td>                        END;</td></tr><tr><th id="L2386"><a href="#L2386">2386</a></th><td>                        radioButton.onClick.Add(Clicked);</td></tr><tr><th id="L2387"><a href="#L2387">2387</a></th><td>                END Init;</td></tr><tr><th id="L2388"><a href="#L2388">2388</a></th><td></td></tr><tr><th id="L2389"><a href="#L2389">2389</a></th><td>                PROCEDURE Clicked(sender, par : ANY);</td></tr><tr><th id="L2390"><a href="#L2390">2390</a></th><td>                BEGIN</td></tr><tr><th id="L2391"><a href="#L2391">2391</a></th><td>                        IF radioButton.state.Get() = 0 THEN</td></tr><tr><th id="L2392"><a href="#L2392">2392</a></th><td>                                radioButton.state.Set(1);</td></tr><tr><th id="L2393"><a href="#L2393">2393</a></th><td>                        END;</td></tr><tr><th id="L2394"><a href="#L2394">2394</a></th><td>                        group.ClearOthers(SELF);</td></tr><tr><th id="L2395"><a href="#L2395">2395</a></th><td>                END Clicked;</td></tr><tr><th id="L2396"><a href="#L2396">2396</a></th><td></td></tr><tr><th id="L2397"><a href="#L2397">2397</a></th><td>        END FormRadioButton;</td></tr><tr><th id="L2398"><a href="#L2398">2398</a></th><td></td></tr><tr><th id="L2399"><a href="#L2399">2399</a></th><td>        RadioButtonGroup = OBJECT (FormComponent)</td></tr><tr><th id="L2400"><a href="#L2400">2400</a></th><td>        VAR</td></tr><tr><th id="L2401"><a href="#L2401">2401</a></th><td>                next : RadioButtonGroup;</td></tr><tr><th id="L2402"><a href="#L2402">2402</a></th><td>                firstB, lastB : FormRadioButton;</td></tr><tr><th id="L2403"><a href="#L2403">2403</a></th><td></td></tr><tr><th id="L2404"><a href="#L2404">2404</a></th><td>                PROCEDURE &amp;Init*(name : String);</td></tr><tr><th id="L2405"><a href="#L2405">2405</a></th><td>                BEGIN</td></tr><tr><th id="L2406"><a href="#L2406">2406</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2407"><a href="#L2407">2407</a></th><td>                END Init;</td></tr><tr><th id="L2408"><a href="#L2408">2408</a></th><td></td></tr><tr><th id="L2409"><a href="#L2409">2409</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2410"><a href="#L2410">2410</a></th><td>                BEGIN</td></tr><tr><th id="L2411"><a href="#L2411">2411</a></th><td>                        RETURN TRUE;</td></tr><tr><th id="L2412"><a href="#L2412">2412</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2413"><a href="#L2413">2413</a></th><td></td></tr><tr><th id="L2414"><a href="#L2414">2414</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2415"><a href="#L2415">2415</a></th><td>                VAR</td></tr><tr><th id="L2416"><a href="#L2416">2416</a></th><td>                        curr : FormRadioButton;</td></tr><tr><th id="L2417"><a href="#L2417">2417</a></th><td>                BEGIN</td></tr><tr><th id="L2418"><a href="#L2418">2418</a></th><td>                        curr := firstB;</td></tr><tr><th id="L2419"><a href="#L2419">2419</a></th><td>                        LOOP</td></tr><tr><th id="L2420"><a href="#L2420">2420</a></th><td>                                IF (curr = NIL) OR (curr.radioButton.state.Get() = 1) THEN EXIT END;</td></tr><tr><th id="L2421"><a href="#L2421">2421</a></th><td>                                curr := curr.next;</td></tr><tr><th id="L2422"><a href="#L2422">2422</a></th><td>                        END;</td></tr><tr><th id="L2423"><a href="#L2423">2423</a></th><td>                        IF curr = NIL THEN curr := firstB END;</td></tr><tr><th id="L2424"><a href="#L2424">2424</a></th><td>                        RETURN curr.value;</td></tr><tr><th id="L2425"><a href="#L2425">2425</a></th><td>                END GetValue;</td></tr><tr><th id="L2426"><a href="#L2426">2426</a></th><td></td></tr><tr><th id="L2427"><a href="#L2427">2427</a></th><td>                PROCEDURE Reset;</td></tr><tr><th id="L2428"><a href="#L2428">2428</a></th><td>                VAR</td></tr><tr><th id="L2429"><a href="#L2429">2429</a></th><td>                        curr : FormRadioButton;</td></tr><tr><th id="L2430"><a href="#L2430">2430</a></th><td>                BEGIN</td></tr><tr><th id="L2431"><a href="#L2431">2431</a></th><td>                        curr := firstB;</td></tr><tr><th id="L2432"><a href="#L2432">2432</a></th><td>                        LOOP</td></tr><tr><th id="L2433"><a href="#L2433">2433</a></th><td>                                IF (curr = NIL) OR curr.init THEN EXIT END;</td></tr><tr><th id="L2434"><a href="#L2434">2434</a></th><td>                                curr := curr.next;</td></tr><tr><th id="L2435"><a href="#L2435">2435</a></th><td>                        END;</td></tr><tr><th id="L2436"><a href="#L2436">2436</a></th><td>                        IF curr = NIL THEN curr := firstB END;</td></tr><tr><th id="L2437"><a href="#L2437">2437</a></th><td>                        curr.radioButton.state.Set(1);</td></tr><tr><th id="L2438"><a href="#L2438">2438</a></th><td>                        ClearOthers(curr);</td></tr><tr><th id="L2439"><a href="#L2439">2439</a></th><td>                END Reset;</td></tr><tr><th id="L2440"><a href="#L2440">2440</a></th><td></td></tr><tr><th id="L2441"><a href="#L2441">2441</a></th><td>                PROCEDURE Add(radioButton : FormRadioButton);</td></tr><tr><th id="L2442"><a href="#L2442">2442</a></th><td>                BEGIN</td></tr><tr><th id="L2443"><a href="#L2443">2443</a></th><td>                        IF firstB = NIL THEN</td></tr><tr><th id="L2444"><a href="#L2444">2444</a></th><td>                                firstB := radioButton;</td></tr><tr><th id="L2445"><a href="#L2445">2445</a></th><td>                                lastB := radioButton;</td></tr><tr><th id="L2446"><a href="#L2446">2446</a></th><td>                        ELSE</td></tr><tr><th id="L2447"><a href="#L2447">2447</a></th><td>                                lastB.next := radioButton;</td></tr><tr><th id="L2448"><a href="#L2448">2448</a></th><td>                                lastB := radioButton;</td></tr><tr><th id="L2449"><a href="#L2449">2449</a></th><td>                        END;</td></tr><tr><th id="L2450"><a href="#L2450">2450</a></th><td>                END Add;</td></tr><tr><th id="L2451"><a href="#L2451">2451</a></th><td></td></tr><tr><th id="L2452"><a href="#L2452">2452</a></th><td>                PROCEDURE ClearOthers(exclude : FormRadioButton);</td></tr><tr><th id="L2453"><a href="#L2453">2453</a></th><td>                VAR</td></tr><tr><th id="L2454"><a href="#L2454">2454</a></th><td>                        curr : FormRadioButton;</td></tr><tr><th id="L2455"><a href="#L2455">2455</a></th><td>                BEGIN</td></tr><tr><th id="L2456"><a href="#L2456">2456</a></th><td>                        curr := firstB;</td></tr><tr><th id="L2457"><a href="#L2457">2457</a></th><td>                        WHILE curr # NIL DO</td></tr><tr><th id="L2458"><a href="#L2458">2458</a></th><td>                                IF curr # exclude THEN</td></tr><tr><th id="L2459"><a href="#L2459">2459</a></th><td>                                        curr.radioButton.state.Set(0);</td></tr><tr><th id="L2460"><a href="#L2460">2460</a></th><td>                                END;</td></tr><tr><th id="L2461"><a href="#L2461">2461</a></th><td>                                curr := curr.next;</td></tr><tr><th id="L2462"><a href="#L2462">2462</a></th><td>                        END;</td></tr><tr><th id="L2463"><a href="#L2463">2463</a></th><td>                END ClearOthers;</td></tr><tr><th id="L2464"><a href="#L2464">2464</a></th><td></td></tr><tr><th id="L2465"><a href="#L2465">2465</a></th><td>        END RadioButtonGroup;</td></tr><tr><th id="L2466"><a href="#L2466">2466</a></th><td></td></tr><tr><th id="L2467"><a href="#L2467">2467</a></th><td>        FormMenuItem = OBJECT</td></tr><tr><th id="L2468"><a href="#L2468">2468</a></th><td>        VAR</td></tr><tr><th id="L2469"><a href="#L2469">2469</a></th><td>                caption- : ARRAY 128 OF CHAR;</td></tr><tr><th id="L2470"><a href="#L2470">2470</a></th><td>                value : String;</td></tr><tr><th id="L2471"><a href="#L2471">2471</a></th><td></td></tr><tr><th id="L2472"><a href="#L2472">2472</a></th><td>                PROCEDURE &amp;New*(caption: ARRAY OF CHAR; value : String);</td></tr><tr><th id="L2473"><a href="#L2473">2473</a></th><td>                BEGIN</td></tr><tr><th id="L2474"><a href="#L2474">2474</a></th><td>                        COPY(caption, SELF.caption);</td></tr><tr><th id="L2475"><a href="#L2475">2475</a></th><td>                        SELF.value := value;</td></tr><tr><th id="L2476"><a href="#L2476">2476</a></th><td>                END New;</td></tr><tr><th id="L2477"><a href="#L2477">2477</a></th><td></td></tr><tr><th id="L2478"><a href="#L2478">2478</a></th><td>        END FormMenuItem;</td></tr><tr><th id="L2479"><a href="#L2479">2479</a></th><td></td></tr><tr><th id="L2480"><a href="#L2480">2480</a></th><td>        FormMenu = OBJECT (FormComponent)</td></tr><tr><th id="L2481"><a href="#L2481">2481</a></th><td>        VAR</td></tr><tr><th id="L2482"><a href="#L2482">2482</a></th><td>                button : WMStandardComponents.Button;</td></tr><tr><th id="L2483"><a href="#L2483">2483</a></th><td>                popup: WMPopups.Popup;</td></tr><tr><th id="L2484"><a href="#L2484">2484</a></th><td>                init : FormMenuItem;</td></tr><tr><th id="L2485"><a href="#L2485">2485</a></th><td>                current : FormMenuItem;</td></tr><tr><th id="L2486"><a href="#L2486">2486</a></th><td></td></tr><tr><th id="L2487"><a href="#L2487">2487</a></th><td>                PROCEDURE &amp;Init*(name : String);</td></tr><tr><th id="L2488"><a href="#L2488">2488</a></th><td>                BEGIN</td></tr><tr><th id="L2489"><a href="#L2489">2489</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2490"><a href="#L2490">2490</a></th><td>                        NEW(button);</td></tr><tr><th id="L2491"><a href="#L2491">2491</a></th><td>                        button.caption.SetAOC("[ select ]");</td></tr><tr><th id="L2492"><a href="#L2492">2492</a></th><td>                        button.bounds.SetExtents(120, 22);</td></tr><tr><th id="L2493"><a href="#L2493">2493</a></th><td>                        NEW(popup);</td></tr><tr><th id="L2494"><a href="#L2494">2494</a></th><td>                        button.SetExtPointerDownHandler(MenuHandler);</td></tr><tr><th id="L2495"><a href="#L2495">2495</a></th><td>                END Init;</td></tr><tr><th id="L2496"><a href="#L2496">2496</a></th><td></td></tr><tr><th id="L2497"><a href="#L2497">2497</a></th><td>                PROCEDURE MenuHandler(x, y: LONGINT; keys: SET; VAR handled: BOOLEAN);</td></tr><tr><th id="L2498"><a href="#L2498">2498</a></th><td>                BEGIN</td></tr><tr><th id="L2499"><a href="#L2499">2499</a></th><td>                        handled := TRUE;</td></tr><tr><th id="L2500"><a href="#L2500">2500</a></th><td>                        button.ToWMCoordinates(0, button.bounds.GetHeight(), x, y);</td></tr><tr><th id="L2501"><a href="#L2501">2501</a></th><td>                        popup.Popup(x, y);</td></tr><tr><th id="L2502"><a href="#L2502">2502</a></th><td>                END MenuHandler;</td></tr><tr><th id="L2503"><a href="#L2503">2503</a></th><td></td></tr><tr><th id="L2504"><a href="#L2504">2504</a></th><td>                PROCEDURE MenuPopupHandler(sender, data: ANY);</td></tr><tr><th id="L2505"><a href="#L2505">2505</a></th><td>                BEGIN</td></tr><tr><th id="L2506"><a href="#L2506">2506</a></th><td>                        IF (data # NIL) &amp; (data IS FormMenuItem) THEN</td></tr><tr><th id="L2507"><a href="#L2507">2507</a></th><td>                                popup.Close;</td></tr><tr><th id="L2508"><a href="#L2508">2508</a></th><td>                                button.caption.SetAOC(data(FormMenuItem).caption);</td></tr><tr><th id="L2509"><a href="#L2509">2509</a></th><td>                                current := data(FormMenuItem);</td></tr><tr><th id="L2510"><a href="#L2510">2510</a></th><td>                        END</td></tr><tr><th id="L2511"><a href="#L2511">2511</a></th><td>                END MenuPopupHandler;</td></tr><tr><th id="L2512"><a href="#L2512">2512</a></th><td></td></tr><tr><th id="L2513"><a href="#L2513">2513</a></th><td>                PROCEDURE NewItem(value : String; label : String; selected : BOOLEAN);</td></tr><tr><th id="L2514"><a href="#L2514">2514</a></th><td>                VAR</td></tr><tr><th id="L2515"><a href="#L2515">2515</a></th><td>                        item : FormMenuItem;</td></tr><tr><th id="L2516"><a href="#L2516">2516</a></th><td>                        s : String;</td></tr><tr><th id="L2517"><a href="#L2517">2517</a></th><td>                BEGIN</td></tr><tr><th id="L2518"><a href="#L2518">2518</a></th><td>                        label := TransformCharEnt(label);</td></tr><tr><th id="L2519"><a href="#L2519">2519</a></th><td>                        IF value = NIL THEN value := label END;</td></tr><tr><th id="L2520"><a href="#L2520">2520</a></th><td>                        s := Strings.ConcatToNew("[ ", label^);</td></tr><tr><th id="L2521"><a href="#L2521">2521</a></th><td>                        s := Strings.ConcatToNew(s^, " ]");</td></tr><tr><th id="L2522"><a href="#L2522">2522</a></th><td>                        NEW(item, s^, value);</td></tr><tr><th id="L2523"><a href="#L2523">2523</a></th><td>                        IF selected THEN</td></tr><tr><th id="L2524"><a href="#L2524">2524</a></th><td>                                init := item;</td></tr><tr><th id="L2525"><a href="#L2525">2525</a></th><td>                                current := item;</td></tr><tr><th id="L2526"><a href="#L2526">2526</a></th><td>                                button.caption.SetAOC(s^);</td></tr><tr><th id="L2527"><a href="#L2527">2527</a></th><td>                        END;</td></tr><tr><th id="L2528"><a href="#L2528">2528</a></th><td>                        popup.AddParButton(s^, MenuPopupHandler, item);</td></tr><tr><th id="L2529"><a href="#L2529">2529</a></th><td>                END NewItem;</td></tr><tr><th id="L2530"><a href="#L2530">2530</a></th><td></td></tr><tr><th id="L2531"><a href="#L2531">2531</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2532"><a href="#L2532">2532</a></th><td>                BEGIN</td></tr><tr><th id="L2533"><a href="#L2533">2533</a></th><td>                        RETURN current # NIL;</td></tr><tr><th id="L2534"><a href="#L2534">2534</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2535"><a href="#L2535">2535</a></th><td></td></tr><tr><th id="L2536"><a href="#L2536">2536</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2537"><a href="#L2537">2537</a></th><td>                BEGIN</td></tr><tr><th id="L2538"><a href="#L2538">2538</a></th><td>                        IF name # NIL THEN</td></tr><tr><th id="L2539"><a href="#L2539">2539</a></th><td>                                RETURN current.value;</td></tr><tr><th id="L2540"><a href="#L2540">2540</a></th><td>                        ELSE</td></tr><tr><th id="L2541"><a href="#L2541">2541</a></th><td>                                RETURN NIL;</td></tr><tr><th id="L2542"><a href="#L2542">2542</a></th><td>                        END;</td></tr><tr><th id="L2543"><a href="#L2543">2543</a></th><td>                END GetValue;</td></tr><tr><th id="L2544"><a href="#L2544">2544</a></th><td></td></tr><tr><th id="L2545"><a href="#L2545">2545</a></th><td>                PROCEDURE Reset;</td></tr><tr><th id="L2546"><a href="#L2546">2546</a></th><td>                BEGIN</td></tr><tr><th id="L2547"><a href="#L2547">2547</a></th><td>                        IF init = NIL THEN</td></tr><tr><th id="L2548"><a href="#L2548">2548</a></th><td>                                current := NIL;</td></tr><tr><th id="L2549"><a href="#L2549">2549</a></th><td>                                button.caption.SetAOC("[ select ]");</td></tr><tr><th id="L2550"><a href="#L2550">2550</a></th><td>                        ELSE</td></tr><tr><th id="L2551"><a href="#L2551">2551</a></th><td>                                current := init;</td></tr><tr><th id="L2552"><a href="#L2552">2552</a></th><td>                                button.caption.SetAOC(init.caption);</td></tr><tr><th id="L2553"><a href="#L2553">2553</a></th><td>                        END;</td></tr><tr><th id="L2554"><a href="#L2554">2554</a></th><td>                END Reset;</td></tr><tr><th id="L2555"><a href="#L2555">2555</a></th><td></td></tr><tr><th id="L2556"><a href="#L2556">2556</a></th><td>        END FormMenu;</td></tr><tr><th id="L2557"><a href="#L2557">2557</a></th><td></td></tr><tr><th id="L2558"><a href="#L2558">2558</a></th><td>        FormHiddenControl = OBJECT (FormComponent)</td></tr><tr><th id="L2559"><a href="#L2559">2559</a></th><td>        VAR</td></tr><tr><th id="L2560"><a href="#L2560">2560</a></th><td>                value : String;</td></tr><tr><th id="L2561"><a href="#L2561">2561</a></th><td></td></tr><tr><th id="L2562"><a href="#L2562">2562</a></th><td>                PROCEDURE &amp;Init*(name : String; value : String);</td></tr><tr><th id="L2563"><a href="#L2563">2563</a></th><td>                BEGIN</td></tr><tr><th id="L2564"><a href="#L2564">2564</a></th><td>                        SELF.name := name;</td></tr><tr><th id="L2565"><a href="#L2565">2565</a></th><td>                        SELF.value := value;</td></tr><tr><th id="L2566"><a href="#L2566">2566</a></th><td>                END Init;</td></tr><tr><th id="L2567"><a href="#L2567">2567</a></th><td></td></tr><tr><th id="L2568"><a href="#L2568">2568</a></th><td>                PROCEDURE IsSuccessful() : BOOLEAN;</td></tr><tr><th id="L2569"><a href="#L2569">2569</a></th><td>                BEGIN</td></tr><tr><th id="L2570"><a href="#L2570">2570</a></th><td>                        RETURN name # NIL;</td></tr><tr><th id="L2571"><a href="#L2571">2571</a></th><td>                END IsSuccessful;</td></tr><tr><th id="L2572"><a href="#L2572">2572</a></th><td></td></tr><tr><th id="L2573"><a href="#L2573">2573</a></th><td>                PROCEDURE GetValue() : String;</td></tr><tr><th id="L2574"><a href="#L2574">2574</a></th><td>                BEGIN</td></tr><tr><th id="L2575"><a href="#L2575">2575</a></th><td>                        IF name # NIL THEN</td></tr><tr><th id="L2576"><a href="#L2576">2576</a></th><td>                                RETURN value;</td></tr><tr><th id="L2577"><a href="#L2577">2577</a></th><td>                        ELSE</td></tr><tr><th id="L2578"><a href="#L2578">2578</a></th><td>                                RETURN NIL;</td></tr><tr><th id="L2579"><a href="#L2579">2579</a></th><td>                        END;</td></tr><tr><th id="L2580"><a href="#L2580">2580</a></th><td>                END GetValue;</td></tr><tr><th id="L2581"><a href="#L2581">2581</a></th><td></td></tr><tr><th id="L2582"><a href="#L2582">2582</a></th><td>        END FormHiddenControl;</td></tr><tr><th id="L2583"><a href="#L2583">2583</a></th><td></td></tr><tr><th id="L2584"><a href="#L2584">2584</a></th><td></td></tr><tr><th id="L2585"><a href="#L2585">2585</a></th><td>PROCEDURE EncodeLinkData(link, target, url : String) : String;</td></tr><tr><th id="L2586"><a href="#L2586">2586</a></th><td>VAR</td></tr><tr><th id="L2587"><a href="#L2587">2587</a></th><td>        s : String;</td></tr><tr><th id="L2588"><a href="#L2588">2588</a></th><td>        inlineLink : BOOLEAN;</td></tr><tr><th id="L2589"><a href="#L2589">2589</a></th><td>        urlLen : LONGINT;</td></tr><tr><th id="L2590"><a href="#L2590">2590</a></th><td>BEGIN</td></tr><tr><th id="L2591"><a href="#L2591">2591</a></th><td>        ASSERT(link # NIL);</td></tr><tr><th id="L2592"><a href="#L2592">2592</a></th><td>        inlineLink := FALSE;</td></tr><tr><th id="L2593"><a href="#L2593">2593</a></th><td>        IF (url # NIL) &amp; Strings.StartsWith2(url^, link^) THEN</td></tr><tr><th id="L2594"><a href="#L2594">2594</a></th><td>                urlLen := Strings.Length(url^);</td></tr><tr><th id="L2595"><a href="#L2595">2595</a></th><td>                IF (Strings.Length(link^) &gt; urlLen) &amp; (link^[urlLen] = "#") THEN</td></tr><tr><th id="L2596"><a href="#L2596">2596</a></th><td>                        inlineLink := TRUE;</td></tr><tr><th id="L2597"><a href="#L2597">2597</a></th><td>                ELSIF (Strings.Length(link^) &gt; (urlLen+1)) &amp; (link^[urlLen] = "/") &amp; (link^[urlLen+1] = "#") THEN</td></tr><tr><th id="L2598"><a href="#L2598">2598</a></th><td>                        inlineLink := TRUE;</td></tr><tr><th id="L2599"><a href="#L2599">2599</a></th><td>                END;</td></tr><tr><th id="L2600"><a href="#L2600">2600</a></th><td>        END;</td></tr><tr><th id="L2601"><a href="#L2601">2601</a></th><td>        IF inlineLink THEN</td></tr><tr><th id="L2602"><a href="#L2602">2602</a></th><td>                RETURN Strings.Substring2(Strings.LastIndexOfByte2("#", link^), link^);</td></tr><tr><th id="L2603"><a href="#L2603">2603</a></th><td>        ELSE</td></tr><tr><th id="L2604"><a href="#L2604">2604</a></th><td>                s := target; IF s = NIL THEN s := Strings.NewString("") END;</td></tr><tr><th id="L2605"><a href="#L2605">2605</a></th><td>                s := Strings.ConcatToNew("target=", s^);</td></tr><tr><th id="L2606"><a href="#L2606">2606</a></th><td>                s := Strings.ConcatToNew(s^, ";url=");</td></tr><tr><th id="L2607"><a href="#L2607">2607</a></th><td>                RETURN Strings.ConcatToNew(s^, link^);</td></tr><tr><th id="L2608"><a href="#L2608">2608</a></th><td>        END;</td></tr><tr><th id="L2609"><a href="#L2609">2609</a></th><td>END EncodeLinkData;</td></tr><tr><th id="L2610"><a href="#L2610">2610</a></th><td></td></tr><tr><th id="L2611"><a href="#L2611">2611</a></th><td>PROCEDURE Utf82UrlEncodedUtf8*(VAR in : ARRAY OF CHAR) : String;</td></tr><tr><th id="L2612"><a href="#L2612">2612</a></th><td>VAR</td></tr><tr><th id="L2613"><a href="#L2613">2613</a></th><td>        i, cnt : LONGINT;</td></tr><tr><th id="L2614"><a href="#L2614">2614</a></th><td>        output : String;</td></tr><tr><th id="L2615"><a href="#L2615">2615</a></th><td>        aoc : ARRAY 3 OF CHAR;</td></tr><tr><th id="L2616"><a href="#L2616">2616</a></th><td>BEGIN</td></tr><tr><th id="L2617"><a href="#L2617">2617</a></th><td>        NEW(output, 3 * Strings.Length(in) + 1);</td></tr><tr><th id="L2618"><a href="#L2618">2618</a></th><td>        cnt := 0;</td></tr><tr><th id="L2619"><a href="#L2619">2619</a></th><td>        FOR i := 0 TO Strings.Length(in)-1 DO</td></tr><tr><th id="L2620"><a href="#L2620">2620</a></th><td>                IF (ORD(in[i])=021H) OR (ORD(in[i])=022H) OR (ORD(in[i])=024H) OR ((ORD(in[i]) &gt;= 027H) &amp; (ORD(in[i]) &lt;= 02EH)) OR</td></tr><tr><th id="L2621"><a href="#L2621">2621</a></th><td>                                ((ORD(in[i]) &gt;= 030H) &amp; (ORD(in[i]) &lt;= 039H)) OR ((ORD(in[i]) &gt;= 041H) &amp; (ORD(in[i]) &lt;= 05AH)) OR</td></tr><tr><th id="L2622"><a href="#L2622">2622</a></th><td>                                (ORD(in[i])=05FH) OR ((ORD(in[i]) &gt;= 061H) &amp; (ORD(in[i]) &lt;= 07AH)) THEN</td></tr><tr><th id="L2623"><a href="#L2623">2623</a></th><td>                        output^[cnt] := in[i];</td></tr><tr><th id="L2624"><a href="#L2624">2624</a></th><td>                        INC(cnt);</td></tr><tr><th id="L2625"><a href="#L2625">2625</a></th><td>                ELSIF ORD(in[i])=020H THEN</td></tr><tr><th id="L2626"><a href="#L2626">2626</a></th><td>                        output^[cnt] := '+';</td></tr><tr><th id="L2627"><a href="#L2627">2627</a></th><td>                        INC(cnt);</td></tr><tr><th id="L2628"><a href="#L2628">2628</a></th><td>                ELSE</td></tr><tr><th id="L2629"><a href="#L2629">2629</a></th><td>                        Strings.IntToHexStr(ORD(in[i]), 1, aoc);</td></tr><tr><th id="L2630"><a href="#L2630">2630</a></th><td>                        output^[cnt] := '%';</td></tr><tr><th id="L2631"><a href="#L2631">2631</a></th><td>                        output^[cnt+1] := aoc[0];</td></tr><tr><th id="L2632"><a href="#L2632">2632</a></th><td>                        output^[cnt+2] := aoc[1];</td></tr><tr><th id="L2633"><a href="#L2633">2633</a></th><td>                        INC(cnt, 3);</td></tr><tr><th id="L2634"><a href="#L2634">2634</a></th><td>                END;</td></tr><tr><th id="L2635"><a href="#L2635">2635</a></th><td>        END;</td></tr><tr><th id="L2636"><a href="#L2636">2636</a></th><td>        output^[cnt] := 0X;</td></tr><tr><th id="L2637"><a href="#L2637">2637</a></th><td>        RETURN output;</td></tr><tr><th id="L2638"><a href="#L2638">2638</a></th><td>END Utf82UrlEncodedUtf8;</td></tr><tr><th id="L2639"><a href="#L2639">2639</a></th><td></td></tr><tr><th id="L2640"><a href="#L2640">2640</a></th><td>PROCEDURE GetElems(root : XML.Element; wanted : StringArray; stopAt : StringArray; checkMe : BOOLEAN) : XMLObjects.Enumerator;</td></tr><tr><th id="L2641"><a href="#L2641">2641</a></th><td>VAR</td></tr><tr><th id="L2642"><a href="#L2642">2642</a></th><td>        col : XMLObjects.ArrayCollection;</td></tr><tr><th id="L2643"><a href="#L2643">2643</a></th><td>        enum, enum2 : XMLObjects.Enumerator;</td></tr><tr><th id="L2644"><a href="#L2644">2644</a></th><td>        p, p2 : ANY;</td></tr><tr><th id="L2645"><a href="#L2645">2645</a></th><td>        name : String;</td></tr><tr><th id="L2646"><a href="#L2646">2646</a></th><td>        i : LONGINT;</td></tr><tr><th id="L2647"><a href="#L2647">2647</a></th><td>BEGIN</td></tr><tr><th id="L2648"><a href="#L2648">2648</a></th><td>        NEW(col);</td></tr><tr><th id="L2649"><a href="#L2649">2649</a></th><td>        name := root.GetName();</td></tr><tr><th id="L2650"><a href="#L2650">2650</a></th><td>        IF checkMe THEN</td></tr><tr><th id="L2651"><a href="#L2651">2651</a></th><td>                FOR i := 0 TO LEN(stopAt) - 1 DO</td></tr><tr><th id="L2652"><a href="#L2652">2652</a></th><td>                        IF stopAt[i]^ = name^ THEN RETURN col.GetEnumerator() END;</td></tr><tr><th id="L2653"><a href="#L2653">2653</a></th><td>                END;</td></tr><tr><th id="L2654"><a href="#L2654">2654</a></th><td>                FOR i := 0 TO LEN(wanted) - 1 DO</td></tr><tr><th id="L2655"><a href="#L2655">2655</a></th><td>                        IF wanted[i]^ = name^ THEN col.Add(root); END;</td></tr><tr><th id="L2656"><a href="#L2656">2656</a></th><td>                END;</td></tr><tr><th id="L2657"><a href="#L2657">2657</a></th><td>        END;</td></tr><tr><th id="L2658"><a href="#L2658">2658</a></th><td>        enum := root.GetContents();</td></tr><tr><th id="L2659"><a href="#L2659">2659</a></th><td>        WHILE enum.HasMoreElements() DO</td></tr><tr><th id="L2660"><a href="#L2660">2660</a></th><td>                p := enum.GetNext();</td></tr><tr><th id="L2661"><a href="#L2661">2661</a></th><td>                IF p IS XML.Element THEN</td></tr><tr><th id="L2662"><a href="#L2662">2662</a></th><td>                        enum2 := GetElems(p(XML.Element), wanted, stopAt, TRUE);</td></tr><tr><th id="L2663"><a href="#L2663">2663</a></th><td>                        WHILE enum2.HasMoreElements() DO</td></tr><tr><th id="L2664"><a href="#L2664">2664</a></th><td>                                p2 := enum2.GetNext();</td></tr><tr><th id="L2665"><a href="#L2665">2665</a></th><td>                                col.Add(p2);</td></tr><tr><th id="L2666"><a href="#L2666">2666</a></th><td>                        END;</td></tr><tr><th id="L2667"><a href="#L2667">2667</a></th><td>                END;</td></tr><tr><th id="L2668"><a href="#L2668">2668</a></th><td>        END;</td></tr><tr><th id="L2669"><a href="#L2669">2669</a></th><td>        RETURN col.GetEnumerator();</td></tr><tr><th id="L2670"><a href="#L2670">2670</a></th><td>END GetElems;</td></tr><tr><th id="L2671"><a href="#L2671">2671</a></th><td></td></tr><tr><th id="L2672"><a href="#L2672">2672</a></th><td>PROCEDURE GetCharsetConverter(charset : ARRAY OF CHAR) : CharsetConvProc;</td></tr><tr><th id="L2673"><a href="#L2673">2673</a></th><td>BEGIN</td></tr><tr><th id="L2674"><a href="#L2674">2674</a></th><td>        Strings.TrimWS(charset);</td></tr><tr><th id="L2675"><a href="#L2675">2675</a></th><td>        Strings.LowerCase(charset);</td></tr><tr><th id="L2676"><a href="#L2676">2676</a></th><td>        IF charset = "iso8859-1" THEN</td></tr><tr><th id="L2677"><a href="#L2677">2677</a></th><td>                RETURN Iso2Utf8;</td></tr><tr><th id="L2678"><a href="#L2678">2678</a></th><td>        ELSIF charset = "utf-8" THEN</td></tr><tr><th id="L2679"><a href="#L2679">2679</a></th><td>                RETURN Utf82Utf8;</td></tr><tr><th id="L2680"><a href="#L2680">2680</a></th><td>        ELSIF charset = "gb2312" THEN</td></tr><tr><th id="L2681"><a href="#L2681">2681</a></th><td>                RETURN Gb23122Utf8;</td></tr><tr><th id="L2682"><a href="#L2682">2682</a></th><td>        ELSE</td></tr><tr><th id="L2683"><a href="#L2683">2683</a></th><td>                RETURN Iso2Utf8;</td></tr><tr><th id="L2684"><a href="#L2684">2684</a></th><td>        END;</td></tr><tr><th id="L2685"><a href="#L2685">2685</a></th><td>END GetCharsetConverter;</td></tr><tr><th id="L2686"><a href="#L2686">2686</a></th><td></td></tr><tr><th id="L2687"><a href="#L2687">2687</a></th><td>PROCEDURE Iso2Utf8(VAR input : ARRAY OF CHAR) : String;</td></tr><tr><th id="L2688"><a href="#L2688">2688</a></th><td>VAR</td></tr><tr><th id="L2689"><a href="#L2689">2689</a></th><td>        dyn : DynamicStrings.DynamicString;</td></tr><tr><th id="L2690"><a href="#L2690">2690</a></th><td>        dynPos : LONGINT;</td></tr><tr><th id="L2691"><a href="#L2691">2691</a></th><td>        temp : ARRAY 5 OF CHAR;</td></tr><tr><th id="L2692"><a href="#L2692">2692</a></th><td>        i, j, len : LONGINT;</td></tr><tr><th id="L2693"><a href="#L2693">2693</a></th><td>BEGIN</td></tr><tr><th id="L2694"><a href="#L2694">2694</a></th><td>        NEW(dyn);</td></tr><tr><th id="L2695"><a href="#L2695">2695</a></th><td>        dynPos := 0;</td></tr><tr><th id="L2696"><a href="#L2696">2696</a></th><td>        FOR i := 0 TO Strings.Length(input)-1 DO</td></tr><tr><th id="L2697"><a href="#L2697">2697</a></th><td>                IF ORD(input[i]) &gt;= 128 THEN</td></tr><tr><th id="L2698"><a href="#L2698">2698</a></th><td>                        len := 0;</td></tr><tr><th id="L2699"><a href="#L2699">2699</a></th><td>                        IF UTF8Strings.EncodeChar(ORD(input[i]), temp, len) THEN</td></tr><tr><th id="L2700"><a href="#L2700">2700</a></th><td>                                FOR j := 0 TO len-1 DO</td></tr><tr><th id="L2701"><a href="#L2701">2701</a></th><td>                                        dyn.Put(temp[j], dynPos);</td></tr><tr><th id="L2702"><a href="#L2702">2702</a></th><td>                                        INC(dynPos);</td></tr><tr><th id="L2703"><a href="#L2703">2703</a></th><td>                                END;</td></tr><tr><th id="L2704"><a href="#L2704">2704</a></th><td>                        ELSE</td></tr><tr><th id="L2705"><a href="#L2705">2705</a></th><td>                                dyn.Put('*', dynPos);</td></tr><tr><th id="L2706"><a href="#L2706">2706</a></th><td>                                INC(dynPos);</td></tr><tr><th id="L2707"><a href="#L2707">2707</a></th><td>                        END;</td></tr><tr><th id="L2708"><a href="#L2708">2708</a></th><td>                ELSE</td></tr><tr><th id="L2709"><a href="#L2709">2709</a></th><td>                        dyn.Put(input[i], dynPos);</td></tr><tr><th id="L2710"><a href="#L2710">2710</a></th><td>                        INC(dynPos);</td></tr><tr><th id="L2711"><a href="#L2711">2711</a></th><td>                END;</td></tr><tr><th id="L2712"><a href="#L2712">2712</a></th><td>        END;</td></tr><tr><th id="L2713"><a href="#L2713">2713</a></th><td>        RETURN dyn.ToArrOfChar();</td></tr><tr><th id="L2714"><a href="#L2714">2714</a></th><td>END Iso2Utf8;</td></tr><tr><th id="L2715"><a href="#L2715">2715</a></th><td></td></tr><tr><th id="L2716"><a href="#L2716">2716</a></th><td>PROCEDURE Utf82Utf8(VAR input : ARRAY OF CHAR) : String;</td></tr><tr><th id="L2717"><a href="#L2717">2717</a></th><td>BEGIN</td></tr><tr><th id="L2718"><a href="#L2718">2718</a></th><td>        RETURN Strings.NewString(input);</td></tr><tr><th id="L2719"><a href="#L2719">2719</a></th><td>END Utf82Utf8;</td></tr><tr><th id="L2720"><a href="#L2720">2720</a></th><td></td></tr><tr><th id="L2721"><a href="#L2721">2721</a></th><td>PROCEDURE Gb23122Utf8(VAR input : ARRAY OF CHAR) : String;</td></tr><tr><th id="L2722"><a href="#L2722">2722</a></th><td>BEGIN</td></tr><tr><th id="L2723"><a href="#L2723">2723</a></th><td>        RETURN WMCharCodes.GB2312ToUTF8(Strings.NewString(input));</td></tr><tr><th id="L2724"><a href="#L2724">2724</a></th><td>END Gb23122Utf8;</td></tr><tr><th id="L2725"><a href="#L2725">2725</a></th><td></td></tr><tr><th id="L2726"><a href="#L2726">2726</a></th><td>PROCEDURE GetColor(s : String) : LONGINT;</td></tr><tr><th id="L2727"><a href="#L2727">2727</a></th><td>VAR</td></tr><tr><th id="L2728"><a href="#L2728">2728</a></th><td>        aoc : ARRAY 17 OF CHAR;</td></tr><tr><th id="L2729"><a href="#L2729">2729</a></th><td>        i, res : LONGINT;</td></tr><tr><th id="L2730"><a href="#L2730">2730</a></th><td>BEGIN</td></tr><tr><th id="L2731"><a href="#L2731">2731</a></th><td>        IF s#NIL THEN</td></tr><tr><th id="L2732"><a href="#L2732">2732</a></th><td>                IF (s^[0]='#') THEN</td></tr><tr><th id="L2733"><a href="#L2733">2733</a></th><td>                        Strings.Copy(s^, 1, Strings.Length(s^)-1, aoc);</td></tr><tr><th id="L2734"><a href="#L2734">2734</a></th><td>                        Strings.HexStrToInt(aoc, i, res);</td></tr><tr><th id="L2735"><a href="#L2735">2735</a></th><td>                        RETURN i;</td></tr><tr><th id="L2736"><a href="#L2736">2736</a></th><td>                ELSIF (s[0] &gt;= "0") &amp; (s[0] &lt;="9") OR (CAP(s[0]) &gt;= "A") &amp; (CAP(s[0])&lt;="F")  THEN</td></tr><tr><th id="L2737"><a href="#L2737">2737</a></th><td>                        Strings.Copy(s^, 0, Strings.Length(s^), aoc);</td></tr><tr><th id="L2738"><a href="#L2738">2738</a></th><td>                        Strings.HexStrToInt(aoc, i, res);</td></tr><tr><th id="L2739"><a href="#L2739">2739</a></th><td>                        RETURN i;</td></tr><tr><th id="L2740"><a href="#L2740">2740</a></th><td>                ELSIF s^="black" THEN RETURN 0000000H;</td></tr><tr><th id="L2741"><a href="#L2741">2741</a></th><td>                ELSIF s^="silver" THEN RETURN 0C0C0C0H;</td></tr><tr><th id="L2742"><a href="#L2742">2742</a></th><td>                ELSIF s^="gray" THEN RETURN 0808080H;</td></tr><tr><th id="L2743"><a href="#L2743">2743</a></th><td>                ELSIF s^="white" THEN RETURN 0FFFFFFH;</td></tr><tr><th id="L2744"><a href="#L2744">2744</a></th><td>                ELSIF s^="maroon" THEN RETURN 0800000H;</td></tr><tr><th id="L2745"><a href="#L2745">2745</a></th><td>                ELSIF s^="red" THEN RETURN 0FF0000H;</td></tr><tr><th id="L2746"><a href="#L2746">2746</a></th><td>                ELSIF s^="purple" THEN RETURN 0800080H;</td></tr><tr><th id="L2747"><a href="#L2747">2747</a></th><td>                ELSIF s^="fuchsia" THEN RETURN 0FF00FFH;</td></tr><tr><th id="L2748"><a href="#L2748">2748</a></th><td>                ELSIF s^="green" THEN RETURN 0008000H;</td></tr><tr><th id="L2749"><a href="#L2749">2749</a></th><td>                ELSIF s^="lime" THEN RETURN 000FF00H;</td></tr><tr><th id="L2750"><a href="#L2750">2750</a></th><td>                ELSIF s^="olive" THEN RETURN 0808000H;</td></tr><tr><th id="L2751"><a href="#L2751">2751</a></th><td>                ELSIF s^="yellow" THEN RETURN 0FFFF00H;</td></tr><tr><th id="L2752"><a href="#L2752">2752</a></th><td>                ELSIF s^="navy" THEN RETURN 0000080H;</td></tr><tr><th id="L2753"><a href="#L2753">2753</a></th><td>                ELSIF s^="blue" THEN RETURN 00000FFH;</td></tr><tr><th id="L2754"><a href="#L2754">2754</a></th><td>                ELSIF s^="teal" THEN RETURN 0008080H;</td></tr><tr><th id="L2755"><a href="#L2755">2755</a></th><td>                ELSIF s^="aqua" THEN RETURN 000FFFFH;</td></tr><tr><th id="L2756"><a href="#L2756">2756</a></th><td>                ELSE RETURN 0;</td></tr><tr><th id="L2757"><a href="#L2757">2757</a></th><td>                END;</td></tr><tr><th id="L2758"><a href="#L2758">2758</a></th><td>        END;</td></tr><tr><th id="L2759"><a href="#L2759">2759</a></th><td>        RETURN 0;</td></tr><tr><th id="L2760"><a href="#L2760">2760</a></th><td>END GetColor;</td></tr><tr><th id="L2761"><a href="#L2761">2761</a></th><td></td></tr><tr><th id="L2762"><a href="#L2762">2762</a></th><td>PROCEDURE StringIsWhiteSpace(VAR txt : ARRAY OF CHAR) : BOOLEAN;</td></tr><tr><th id="L2763"><a href="#L2763">2763</a></th><td>VAR</td></tr><tr><th id="L2764"><a href="#L2764">2764</a></th><td>        i : LONGINT;</td></tr><tr><th id="L2765"><a href="#L2765">2765</a></th><td>BEGIN</td></tr><tr><th id="L2766"><a href="#L2766">2766</a></th><td>        FOR i := 0 TO Strings.Length(txt)-1 DO</td></tr><tr><th id="L2767"><a href="#L2767">2767</a></th><td>                IF ORD(txt[i]) &gt; 32 THEN RETURN FALSE END;</td></tr><tr><th id="L2768"><a href="#L2768">2768</a></th><td>        END;</td></tr><tr><th id="L2769"><a href="#L2769">2769</a></th><td>        RETURN TRUE;</td></tr><tr><th id="L2770"><a href="#L2770">2770</a></th><td>END StringIsWhiteSpace;</td></tr><tr><th id="L2771"><a href="#L2771">2771</a></th><td></td></tr><tr><th id="L2772"><a href="#L2772">2772</a></th><td>PROCEDURE StringHasNewLine(VAR txt : ARRAY OF CHAR) : BOOLEAN;</td></tr><tr><th id="L2773"><a href="#L2773">2773</a></th><td>VAR</td></tr><tr><th id="L2774"><a href="#L2774">2774</a></th><td>        i : LONGINT;</td></tr><tr><th id="L2775"><a href="#L2775">2775</a></th><td>BEGIN</td></tr><tr><th id="L2776"><a href="#L2776">2776</a></th><td>        FOR i := 0 TO Strings.Length(txt)-1 DO</td></tr><tr><th id="L2777"><a href="#L2777">2777</a></th><td>                IF (ORD(txt[i]) = 10) OR (ORD(txt[i]) = 13) THEN RETURN TRUE END;</td></tr><tr><th id="L2778"><a href="#L2778">2778</a></th><td>        END;</td></tr><tr><th id="L2779"><a href="#L2779">2779</a></th><td>        RETURN FALSE;</td></tr><tr><th id="L2780"><a href="#L2780">2780</a></th><td>END StringHasNewLine;</td></tr><tr><th id="L2781"><a href="#L2781">2781</a></th><td></td></tr><tr><th id="L2782"><a href="#L2782">2782</a></th><td>PROCEDURE ReplaceWhiteSpaces(VAR txt : String) : String;</td></tr><tr><th id="L2783"><a href="#L2783">2783</a></th><td>VAR</td></tr><tr><th id="L2784"><a href="#L2784">2784</a></th><td>        dyn : DynamicStrings.DynamicString;</td></tr><tr><th id="L2785"><a href="#L2785">2785</a></th><td>        dynPos : LONGINT;</td></tr><tr><th id="L2786"><a href="#L2786">2786</a></th><td>        i : LONGINT;</td></tr><tr><th id="L2787"><a href="#L2787">2787</a></th><td>        ch : CHAR;</td></tr><tr><th id="L2788"><a href="#L2788">2788</a></th><td>        putYet : BOOLEAN;</td></tr><tr><th id="L2789"><a href="#L2789">2789</a></th><td>BEGIN</td></tr><tr><th id="L2790"><a href="#L2790">2790</a></th><td>        TrimLineBreak(txt^);</td></tr><tr><th id="L2791"><a href="#L2791">2791</a></th><td>        NEW(dyn);</td></tr><tr><th id="L2792"><a href="#L2792">2792</a></th><td>        dynPos := 0;</td></tr><tr><th id="L2793"><a href="#L2793">2793</a></th><td>        putYet := FALSE;</td></tr><tr><th id="L2794"><a href="#L2794">2794</a></th><td>        FOR i := 0 TO Strings.Length(txt^)-1 DO</td></tr><tr><th id="L2795"><a href="#L2795">2795</a></th><td>                ch := txt^[i];</td></tr><tr><th id="L2796"><a href="#L2796">2796</a></th><td>                IF (ch = 020X) OR (ch = 9X) OR (ch = 0DX) OR (ch = 0AX) THEN</td></tr><tr><th id="L2797"><a href="#L2797">2797</a></th><td>                        IF ~putYet THEN</td></tr><tr><th id="L2798"><a href="#L2798">2798</a></th><td>                                dyn.Put(' ', dynPos);</td></tr><tr><th id="L2799"><a href="#L2799">2799</a></th><td>                                INC(dynPos);</td></tr><tr><th id="L2800"><a href="#L2800">2800</a></th><td>                                putYet := TRUE;</td></tr><tr><th id="L2801"><a href="#L2801">2801</a></th><td>                        END;</td></tr><tr><th id="L2802"><a href="#L2802">2802</a></th><td>                ELSE</td></tr><tr><th id="L2803"><a href="#L2803">2803</a></th><td>                        dyn.Put(ch, dynPos);</td></tr><tr><th id="L2804"><a href="#L2804">2804</a></th><td>                        INC(dynPos);</td></tr><tr><th id="L2805"><a href="#L2805">2805</a></th><td>                        putYet := FALSE;</td></tr><tr><th id="L2806"><a href="#L2806">2806</a></th><td>                END;</td></tr><tr><th id="L2807"><a href="#L2807">2807</a></th><td>        END;</td></tr><tr><th id="L2808"><a href="#L2808">2808</a></th><td>        RETURN dyn.ToArrOfChar();</td></tr><tr><th id="L2809"><a href="#L2809">2809</a></th><td>END ReplaceWhiteSpaces;</td></tr><tr><th id="L2810"><a href="#L2810">2810</a></th><td></td></tr><tr><th id="L2811"><a href="#L2811">2811</a></th><td>PROCEDURE TrimLineBreak(VAR string : ARRAY OF CHAR);</td></tr><tr><th id="L2812"><a href="#L2812">2812</a></th><td>VAR i,j: LONGINT;</td></tr><tr><th id="L2813"><a href="#L2813">2813</a></th><td>BEGIN</td></tr><tr><th id="L2814"><a href="#L2814">2814</a></th><td>        j := 0;</td></tr><tr><th id="L2815"><a href="#L2815">2815</a></th><td>        WHILE (ORD(string[j]) = 10) OR (ORD(string[j]) = 13) DO INC(j) END;</td></tr><tr><th id="L2816"><a href="#L2816">2816</a></th><td>        IF (j &gt; 0) THEN</td></tr><tr><th id="L2817"><a href="#L2817">2817</a></th><td>                i := 0;</td></tr><tr><th id="L2818"><a href="#L2818">2818</a></th><td>                WHILE (string[j] # 0X) DO</td></tr><tr><th id="L2819"><a href="#L2819">2819</a></th><td>                        string[i] := string[j];</td></tr><tr><th id="L2820"><a href="#L2820">2820</a></th><td>                        INC(i); INC(j)</td></tr><tr><th id="L2821"><a href="#L2821">2821</a></th><td>                END;</td></tr><tr><th id="L2822"><a href="#L2822">2822</a></th><td>                string[i] := 0X</td></tr><tr><th id="L2823"><a href="#L2823">2823</a></th><td>        END;</td></tr><tr><th id="L2824"><a href="#L2824">2824</a></th><td>        i := Strings.Length(string)-1;</td></tr><tr><th id="L2825"><a href="#L2825">2825</a></th><td>        WHILE (i &gt;= 0) &amp; ((ORD(string[i]) = 10) OR (ORD(string[i]) = 13)) DO DEC(i) END;</td></tr><tr><th id="L2826"><a href="#L2826">2826</a></th><td>        string[i+1] := 0X;</td></tr><tr><th id="L2827"><a href="#L2827">2827</a></th><td>END TrimLineBreak;</td></tr><tr><th id="L2828"><a href="#L2828">2828</a></th><td></td></tr><tr><th id="L2829"><a href="#L2829">2829</a></th><td>PROCEDURE ResolveAddress*(baseAddress : String; url : String) : String;</td></tr><tr><th id="L2830"><a href="#L2830">2830</a></th><td>VAR</td></tr><tr><th id="L2831"><a href="#L2831">2831</a></th><td>        slashPos, colonPos, upCnt : LONGINT;</td></tr><tr><th id="L2832"><a href="#L2832">2832</a></th><td>BEGIN</td></tr><tr><th id="L2833"><a href="#L2833">2833</a></th><td></td></tr><tr><th id="L2834"><a href="#L2834">2834</a></th><td>        (* if url is absolute address, return it *)</td></tr><tr><th id="L2835"><a href="#L2835">2835</a></th><td>        IF Strings.StartsWith2("http://", url^) OR Strings.StartsWith2("file://", url^) THEN</td></tr><tr><th id="L2836"><a href="#L2836">2836</a></th><td>                RETURN url;</td></tr><tr><th id="L2837"><a href="#L2837">2837</a></th><td>        END;</td></tr><tr><th id="L2838"><a href="#L2838">2838</a></th><td></td></tr><tr><th id="L2839"><a href="#L2839">2839</a></th><td>        (* if url is anchor in the same page, return 'baseAddress+url' *)</td></tr><tr><th id="L2840"><a href="#L2840">2840</a></th><td>        IF Strings.StartsWith2("#", url^) THEN</td></tr><tr><th id="L2841"><a href="#L2841">2841</a></th><td>                RETURN Strings.ConcatToNew(baseAddress^, url^);</td></tr><tr><th id="L2842"><a href="#L2842">2842</a></th><td>        END;</td></tr><tr><th id="L2843"><a href="#L2843">2843</a></th><td></td></tr><tr><th id="L2844"><a href="#L2844">2844</a></th><td>        (* if url starts with "/", return ... *)</td></tr><tr><th id="L2845"><a href="#L2845">2845</a></th><td>        IF url^[0] = '/' THEN</td></tr><tr><th id="L2846"><a href="#L2846">2846</a></th><td>                slashPos := Strings.LastIndexOfByte2("/", baseAddress^);</td></tr><tr><th id="L2847"><a href="#L2847">2847</a></th><td>                IF Strings.StartsWith2("file://", baseAddress^) THEN</td></tr><tr><th id="L2848"><a href="#L2848">2848</a></th><td>                        IF slashPos &gt; 6 THEN</td></tr><tr><th id="L2849"><a href="#L2849">2849</a></th><td>                                baseAddress := Strings.Substring(0, slashPos, baseAddress^);</td></tr><tr><th id="L2850"><a href="#L2850">2850</a></th><td>                        ELSE</td></tr><tr><th id="L2851"><a href="#L2851">2851</a></th><td>                                colonPos := Strings.IndexOfByte(":", 7, baseAddress^);</td></tr><tr><th id="L2852"><a href="#L2852">2852</a></th><td>                                IF colonPos = -1 THEN</td></tr><tr><th id="L2853"><a href="#L2853">2853</a></th><td>                                        baseAddress := Strings.Substring(0, slashPos, baseAddress^);</td></tr><tr><th id="L2854"><a href="#L2854">2854</a></th><td>                                ELSE</td></tr><tr><th id="L2855"><a href="#L2855">2855</a></th><td>                                        baseAddress := Strings.Substring(0, colonPos+1, baseAddress^);</td></tr><tr><th id="L2856"><a href="#L2856">2856</a></th><td>                                        url := Strings.Substring2(1, url^);</td></tr><tr><th id="L2857"><a href="#L2857">2857</a></th><td>                                END;</td></tr><tr><th id="L2858"><a href="#L2858">2858</a></th><td>                        END;</td></tr><tr><th id="L2859"><a href="#L2859">2859</a></th><td>                ELSIF Strings.StartsWith2("http://", baseAddress^) THEN</td></tr><tr><th id="L2860"><a href="#L2860">2860</a></th><td>                        IF slashPos &gt; 6 THEN</td></tr><tr><th id="L2861"><a href="#L2861">2861</a></th><td>                                baseAddress := Strings.Substring(0, slashPos, baseAddress^);</td></tr><tr><th id="L2862"><a href="#L2862">2862</a></th><td>                        END;</td></tr><tr><th id="L2863"><a href="#L2863">2863</a></th><td>                        (* else baseAddress==server w/h terminating "/" *)</td></tr><tr><th id="L2864"><a href="#L2864">2864</a></th><td>                ELSE</td></tr><tr><th id="L2865"><a href="#L2865">2865</a></th><td>                        KernelLog.String("unknown protocol: "); KernelLog.String(baseAddress^); KernelLog.Ln;</td></tr><tr><th id="L2866"><a href="#L2866">2866</a></th><td>                        (* an assertion that will fail.... *)</td></tr><tr><th id="L2867"><a href="#L2867">2867</a></th><td>                        ASSERT(Strings.StartsWith2("file://", baseAddress^));</td></tr><tr><th id="L2868"><a href="#L2868">2868</a></th><td>                END;</td></tr><tr><th id="L2869"><a href="#L2869">2869</a></th><td>                RETURN Strings.ConcatToNew(baseAddress^, url^);</td></tr><tr><th id="L2870"><a href="#L2870">2870</a></th><td>        END;</td></tr><tr><th id="L2871"><a href="#L2871">2871</a></th><td></td></tr><tr><th id="L2872"><a href="#L2872">2872</a></th><td>        (* make sure baseAddress ends with "/" *)</td></tr><tr><th id="L2873"><a href="#L2873">2873</a></th><td>        IF baseAddress^[Strings.Length(baseAddress^) - 1] # '/' THEN</td></tr><tr><th id="L2874"><a href="#L2874">2874</a></th><td>                slashPos := Strings.LastIndexOfByte2("/", baseAddress^);</td></tr><tr><th id="L2875"><a href="#L2875">2875</a></th><td>                IF Strings.StartsWith2("file://", baseAddress^) THEN</td></tr><tr><th id="L2876"><a href="#L2876">2876</a></th><td>                        baseAddress := Strings.Substring(0, slashPos+1, baseAddress^);</td></tr><tr><th id="L2877"><a href="#L2877">2877</a></th><td>                ELSIF Strings.StartsWith2("http://", baseAddress^) THEN</td></tr><tr><th id="L2878"><a href="#L2878">2878</a></th><td>                        IF slashPos &gt; 6 THEN</td></tr><tr><th id="L2879"><a href="#L2879">2879</a></th><td>                                baseAddress := Strings.Substring(0, slashPos+1, baseAddress^);</td></tr><tr><th id="L2880"><a href="#L2880">2880</a></th><td>                        ELSE</td></tr><tr><th id="L2881"><a href="#L2881">2881</a></th><td>                                baseAddress := Strings.ConcatToNew(baseAddress^, "/");</td></tr><tr><th id="L2882"><a href="#L2882">2882</a></th><td>                        END;</td></tr><tr><th id="L2883"><a href="#L2883">2883</a></th><td>                ELSE</td></tr><tr><th id="L2884"><a href="#L2884">2884</a></th><td>                        KernelLog.String("unknown protocol: "); KernelLog.String(baseAddress^); KernelLog.Ln;</td></tr><tr><th id="L2885"><a href="#L2885">2885</a></th><td>                        (* an assertion that will fail.... *)</td></tr><tr><th id="L2886"><a href="#L2886">2886</a></th><td>                        ASSERT(Strings.StartsWith2("file://", baseAddress^));</td></tr><tr><th id="L2887"><a href="#L2887">2887</a></th><td>                END;</td></tr><tr><th id="L2888"><a href="#L2888">2888</a></th><td>        END;</td></tr><tr><th id="L2889"><a href="#L2889">2889</a></th><td></td></tr><tr><th id="L2890"><a href="#L2890">2890</a></th><td>        (* count and cut  "../" on url *)</td></tr><tr><th id="L2891"><a href="#L2891">2891</a></th><td>        upCnt := 0;</td></tr><tr><th id="L2892"><a href="#L2892">2892</a></th><td>        WHILE (Strings.Pos("../", url^) = 0) &amp; (Strings.Length(url^) &gt; 3) DO</td></tr><tr><th id="L2893"><a href="#L2893">2893</a></th><td>                INC(upCnt);</td></tr><tr><th id="L2894"><a href="#L2894">2894</a></th><td>                url := Strings.Substring2(3, url^);</td></tr><tr><th id="L2895"><a href="#L2895">2895</a></th><td>        END;</td></tr><tr><th id="L2896"><a href="#L2896">2896</a></th><td></td></tr><tr><th id="L2897"><a href="#L2897">2897</a></th><td>        (* cut  "./" on url *)</td></tr><tr><th id="L2898"><a href="#L2898">2898</a></th><td>        WHILE (Strings.Pos("./", url^) = 0) &amp; (Strings.Length(url^) &gt; 2) DO</td></tr><tr><th id="L2899"><a href="#L2899">2899</a></th><td>                url := Strings.Substring2(2, url^);</td></tr><tr><th id="L2900"><a href="#L2900">2900</a></th><td>        END;</td></tr><tr><th id="L2901"><a href="#L2901">2901</a></th><td></td></tr><tr><th id="L2902"><a href="#L2902">2902</a></th><td>        (* go up upCnt directories *)</td></tr><tr><th id="L2903"><a href="#L2903">2903</a></th><td>        WHILE (upCnt &gt; 0) &amp; (Strings.LastIndexOfByte("/", Strings.Length(baseAddress^) - 1, baseAddress^) # -1) DO</td></tr><tr><th id="L2904"><a href="#L2904">2904</a></th><td>                baseAddress := Strings.Substring(0, Strings.LastIndexOfByte("/", Strings.Length(baseAddress^) - 2, baseAddress^) + 1, baseAddress^);</td></tr><tr><th id="L2905"><a href="#L2905">2905</a></th><td>                DEC(upCnt);</td></tr><tr><th id="L2906"><a href="#L2906">2906</a></th><td>        END;</td></tr><tr><th id="L2907"><a href="#L2907">2907</a></th><td></td></tr><tr><th id="L2908"><a href="#L2908">2908</a></th><td>        RETURN Strings.ConcatToNew(baseAddress^, url^);</td></tr><tr><th id="L2909"><a href="#L2909">2909</a></th><td></td></tr><tr><th id="L2910"><a href="#L2910">2910</a></th><td>END ResolveAddress;</td></tr><tr><th id="L2911"><a href="#L2911">2911</a></th><td></td></tr><tr><th id="L2912"><a href="#L2912">2912</a></th><td>PROCEDURE GetElemAttributeValue*(elem : XML.Element; key : ARRAY OF CHAR; lowerCase : BOOLEAN) : String;</td></tr><tr><th id="L2913"><a href="#L2913">2913</a></th><td>VAR</td></tr><tr><th id="L2914"><a href="#L2914">2914</a></th><td>        enum: XMLObjects.Enumerator;</td></tr><tr><th id="L2915"><a href="#L2915">2915</a></th><td>        p : ANY;</td></tr><tr><th id="L2916"><a href="#L2916">2916</a></th><td>        s : String;</td></tr><tr><th id="L2917"><a href="#L2917">2917</a></th><td>BEGIN</td></tr><tr><th id="L2918"><a href="#L2918">2918</a></th><td>        enum := elem.GetAttributes();</td></tr><tr><th id="L2919"><a href="#L2919">2919</a></th><td>        WHILE (enum.HasMoreElements()) DO</td></tr><tr><th id="L2920"><a href="#L2920">2920</a></th><td>                p := enum.GetNext();</td></tr><tr><th id="L2921"><a href="#L2921">2921</a></th><td>                IF p IS XML.Attribute THEN</td></tr><tr><th id="L2922"><a href="#L2922">2922</a></th><td>                        s := p(XML.Attribute).GetName();</td></tr><tr><th id="L2923"><a href="#L2923">2923</a></th><td>                        s := Strings.NewString(s^);</td></tr><tr><th id="L2924"><a href="#L2924">2924</a></th><td>                        Strings.LowerCase(s^);</td></tr><tr><th id="L2925"><a href="#L2925">2925</a></th><td>                        IF s^ = key THEN</td></tr><tr><th id="L2926"><a href="#L2926">2926</a></th><td>                                s := p(XML.Attribute).GetValue();</td></tr><tr><th id="L2927"><a href="#L2927">2927</a></th><td>                                s := Strings.NewString(s^);</td></tr><tr><th id="L2928"><a href="#L2928">2928</a></th><td>                                IF lowerCase THEN Strings.LowerCase(s^); END;</td></tr><tr><th id="L2929"><a href="#L2929">2929</a></th><td>                                RETURN s;</td></tr><tr><th id="L2930"><a href="#L2930">2930</a></th><td>                        END;</td></tr><tr><th id="L2931"><a href="#L2931">2931</a></th><td>                END;</td></tr><tr><th id="L2932"><a href="#L2932">2932</a></th><td>        END;</td></tr><tr><th id="L2933"><a href="#L2933">2933</a></th><td>        RETURN NIL;</td></tr><tr><th id="L2934"><a href="#L2934">2934</a></th><td>END GetElemAttributeValue;</td></tr><tr><th id="L2935"><a href="#L2935">2935</a></th><td></td></tr><tr><th id="L2936"><a href="#L2936">2936</a></th><td>PROCEDURE MapFontSize(font : String; size : LONGINT) : LONGINT;</td></tr><tr><th id="L2937"><a href="#L2937">2937</a></th><td>BEGIN</td></tr><tr><th id="L2938"><a href="#L2938">2938</a></th><td>        IF font^ = "Oberon" THEN</td></tr><tr><th id="L2939"><a href="#L2939">2939</a></th><td>                IF size=1 THEN RETURN 8;</td></tr><tr><th id="L2940"><a href="#L2940">2940</a></th><td>                ELSIF size=2 THEN RETURN 10;</td></tr><tr><th id="L2941"><a href="#L2941">2941</a></th><td>                ELSIF size=3 THEN RETURN 12;</td></tr><tr><th id="L2942"><a href="#L2942">2942</a></th><td>                ELSIF size=4 THEN RETURN 14;</td></tr><tr><th id="L2943"><a href="#L2943">2943</a></th><td>                ELSIF size=5 THEN RETURN 16;</td></tr><tr><th id="L2944"><a href="#L2944">2944</a></th><td>                ELSIF size=6 THEN RETURN 20;</td></tr><tr><th id="L2945"><a href="#L2945">2945</a></th><td>                ELSIF size=7 THEN RETURN 24;</td></tr><tr><th id="L2946"><a href="#L2946">2946</a></th><td>                ELSE RETURN 0 END;</td></tr><tr><th id="L2947"><a href="#L2947">2947</a></th><td>        ELSE</td></tr><tr><th id="L2948"><a href="#L2948">2948</a></th><td>                IF size=1 THEN RETURN 11;</td></tr><tr><th id="L2949"><a href="#L2949">2949</a></th><td>                ELSIF size=2 THEN RETURN 12;</td></tr><tr><th id="L2950"><a href="#L2950">2950</a></th><td>                ELSIF size=3 THEN RETURN 15;</td></tr><tr><th id="L2951"><a href="#L2951">2951</a></th><td>                ELSIF size=4 THEN RETURN 18;</td></tr><tr><th id="L2952"><a href="#L2952">2952</a></th><td>                ELSIF size=5 THEN RETURN 24;</td></tr><tr><th id="L2953"><a href="#L2953">2953</a></th><td>                ELSIF size=6 THEN RETURN 30;</td></tr><tr><th id="L2954"><a href="#L2954">2954</a></th><td>                ELSIF size=7 THEN RETURN 48;</td></tr><tr><th id="L2955"><a href="#L2955">2955</a></th><td>                ELSE RETURN 0 END;</td></tr><tr><th id="L2956"><a href="#L2956">2956</a></th><td>        END;</td></tr><tr><th id="L2957"><a href="#L2957">2957</a></th><td>END MapFontSize;</td></tr><tr><th id="L2958"><a href="#L2958">2958</a></th><td></td></tr><tr><th id="L2959"><a href="#L2959">2959</a></th><td>PROCEDURE MapBaselineShift(size : LONGINT) : LONGINT;</td></tr><tr><th id="L2960"><a href="#L2960">2960</a></th><td>BEGIN</td></tr><tr><th id="L2961"><a href="#L2961">2961</a></th><td>        IF size=1 THEN RETURN 2;</td></tr><tr><th id="L2962"><a href="#L2962">2962</a></th><td>        ELSIF size=2 THEN RETURN 3;</td></tr><tr><th id="L2963"><a href="#L2963">2963</a></th><td>        ELSIF size=3 THEN RETURN 3;</td></tr><tr><th id="L2964"><a href="#L2964">2964</a></th><td>        ELSIF size=4 THEN RETURN 4;</td></tr><tr><th id="L2965"><a href="#L2965">2965</a></th><td>        ELSIF size=5 THEN RETURN 5;</td></tr><tr><th id="L2966"><a href="#L2966">2966</a></th><td>        ELSIF size=6 THEN RETURN 6;</td></tr><tr><th id="L2967"><a href="#L2967">2967</a></th><td>        ELSIF size=7 THEN RETURN 10;</td></tr><tr><th id="L2968"><a href="#L2968">2968</a></th><td>        ELSE RETURN 0 END;</td></tr><tr><th id="L2969"><a href="#L2969">2969</a></th><td>END MapBaselineShift;</td></tr><tr><th id="L2970"><a href="#L2970">2970</a></th><td></td></tr><tr><th id="L2971"><a href="#L2971">2971</a></th><td>(* returns the best matching existing font out of a list containing font-names and generic families *)</td></tr><tr><th id="L2972"><a href="#L2972">2972</a></th><td>PROCEDURE GetExistingFontName(f : String) : String;</td></tr><tr><th id="L2973"><a href="#L2973">2973</a></th><td>VAR</td></tr><tr><th id="L2974"><a href="#L2974">2974</a></th><td>        fonts, temp : String;</td></tr><tr><th id="L2975"><a href="#L2975">2975</a></th><td>        pos : LONGINT;</td></tr><tr><th id="L2976"><a href="#L2976">2976</a></th><td>        font : ARRAY 32 OF CHAR;</td></tr><tr><th id="L2977"><a href="#L2977">2977</a></th><td></td></tr><tr><th id="L2978"><a href="#L2978">2978</a></th><td>        PROCEDURE Get(f : ARRAY OF CHAR; alternatives : BOOLEAN) : String;</td></tr><tr><th id="L2979"><a href="#L2979">2979</a></th><td>        VAR</td></tr><tr><th id="L2980"><a href="#L2980">2980</a></th><td>                i, j, last : LONGINT;</td></tr><tr><th id="L2981"><a href="#L2981">2981</a></th><td>        BEGIN</td></tr><tr><th id="L2982"><a href="#L2982">2982</a></th><td>                Strings.Trim(f, ' ');</td></tr><tr><th id="L2983"><a href="#L2983">2983</a></th><td>                Strings.Trim(f, '"');</td></tr><tr><th id="L2984"><a href="#L2984">2984</a></th><td>                Strings.Trim(f, "'");</td></tr><tr><th id="L2985"><a href="#L2985">2985</a></th><td>                last := Strings.Length(f)-1;</td></tr><tr><th id="L2986"><a href="#L2986">2986</a></th><td>                FOR i := 0 TO last DO</td></tr><tr><th id="L2987"><a href="#L2987">2987</a></th><td>                        IF f[i]=' ' THEN</td></tr><tr><th id="L2988"><a href="#L2988">2988</a></th><td>                                FOR j := i TO last-1 DO</td></tr><tr><th id="L2989"><a href="#L2989">2989</a></th><td>                                        f[j] := f[j+1];</td></tr><tr><th id="L2990"><a href="#L2990">2990</a></th><td>                                END;</td></tr><tr><th id="L2991"><a href="#L2991">2991</a></th><td>                                DEC(last);</td></tr><tr><th id="L2992"><a href="#L2992">2992</a></th><td>                        END;</td></tr><tr><th id="L2993"><a href="#L2993">2993</a></th><td>                END;</td></tr><tr><th id="L2994"><a href="#L2994">2994</a></th><td>                f[last+1] := 0X;</td></tr><tr><th id="L2995"><a href="#L2995">2995</a></th><td>                IF FontExists(f) THEN RETURN Strings.NewString(f); END;</td></tr><tr><th id="L2996"><a href="#L2996">2996</a></th><td>                IF f="serif" THEN RETURN Strings.NewString(serif);</td></tr><tr><th id="L2997"><a href="#L2997">2997</a></th><td>                ELSIF f="sans-serif" THEN RETURN Strings.NewString(sansSerif);</td></tr><tr><th id="L2998"><a href="#L2998">2998</a></th><td>                ELSIF f="cursive" THEN RETURN Strings.NewString(cursive);</td></tr><tr><th id="L2999"><a href="#L2999">2999</a></th><td>                ELSIF f="fantasy" THEN RETURN Strings.NewString(fantasy);</td></tr><tr><th id="L3000"><a href="#L3000">3000</a></th><td>                ELSIF f="monospace" THEN RETURN Strings.NewString(monospace);</td></tr><tr><th id="L3001"><a href="#L3001">3001</a></th><td>                END;</td></tr><tr><th id="L3002"><a href="#L3002">3002</a></th><td>                IF alternatives THEN</td></tr><tr><th id="L3003"><a href="#L3003">3003</a></th><td>                        RETURN NIL;</td></tr><tr><th id="L3004"><a href="#L3004">3004</a></th><td>                ELSE</td></tr><tr><th id="L3005"><a href="#L3005">3005</a></th><td>                        RETURN Strings.NewString(defaultFont);</td></tr><tr><th id="L3006"><a href="#L3006">3006</a></th><td>                END;</td></tr><tr><th id="L3007"><a href="#L3007">3007</a></th><td>        END Get;</td></tr><tr><th id="L3008"><a href="#L3008">3008</a></th><td></td></tr><tr><th id="L3009"><a href="#L3009">3009</a></th><td>BEGIN</td></tr><tr><th id="L3010"><a href="#L3010">3010</a></th><td>        fonts := Strings.NewString(f^);</td></tr><tr><th id="L3011"><a href="#L3011">3011</a></th><td>        LOOP</td></tr><tr><th id="L3012"><a href="#L3012">3012</a></th><td>                pos := Strings.Pos(',', fonts^);</td></tr><tr><th id="L3013"><a href="#L3013">3013</a></th><td>                IF pos = -1 THEN</td></tr><tr><th id="L3014"><a href="#L3014">3014</a></th><td>                        RETURN Get(fonts^, FALSE);</td></tr><tr><th id="L3015"><a href="#L3015">3015</a></th><td>                ELSE</td></tr><tr><th id="L3016"><a href="#L3016">3016</a></th><td>                        Strings.Copy(fonts^, 0, pos, font);</td></tr><tr><th id="L3017"><a href="#L3017">3017</a></th><td>                        IF (pos+1) &gt; (Strings.Length(fonts^)-1) THEN RETURN Get(font, FALSE); END;</td></tr><tr><th id="L3018"><a href="#L3018">3018</a></th><td>                        temp := Get(font, TRUE);</td></tr><tr><th id="L3019"><a href="#L3019">3019</a></th><td>                        IF temp#NIL THEN RETURN temp; END;</td></tr><tr><th id="L3020"><a href="#L3020">3020</a></th><td>                        temp := Strings.NewString(fonts^);</td></tr><tr><th id="L3021"><a href="#L3021">3021</a></th><td>                        Strings.Copy(temp^, pos+1, Strings.Length(fonts^)-(pos+1), fonts^);</td></tr><tr><th id="L3022"><a href="#L3022">3022</a></th><td>                END;</td></tr><tr><th id="L3023"><a href="#L3023">3023</a></th><td>        END;</td></tr><tr><th id="L3024"><a href="#L3024">3024</a></th><td>END GetExistingFontName;</td></tr><tr><th id="L3025"><a href="#L3025">3025</a></th><td></td></tr><tr><th id="L3026"><a href="#L3026">3026</a></th><td>PROCEDURE FontExists(f : ARRAY OF CHAR) : BOOLEAN;</td></tr><tr><th id="L3027"><a href="#L3027">3027</a></th><td>VAR</td></tr><tr><th id="L3028"><a href="#L3028">3028</a></th><td>        font : WMGraphics.Font;</td></tr><tr><th id="L3029"><a href="#L3029">3029</a></th><td>BEGIN</td></tr><tr><th id="L3030"><a href="#L3030">3030</a></th><td>        font := WMGraphics.GetFont(f, 12, {0});</td></tr><tr><th id="L3031"><a href="#L3031">3031</a></th><td>        RETURN (f = font.name);</td></tr><tr><th id="L3032"><a href="#L3032">3032</a></th><td>END FontExists;</td></tr><tr><th id="L3033"><a href="#L3033">3033</a></th><td></td></tr><tr><th id="L3034"><a href="#L3034">3034</a></th><td>PROCEDURE IntToABCString(val : LONGINT; upperCase : BOOLEAN) : String;</td></tr><tr><th id="L3035"><a href="#L3035">3035</a></th><td>VAR</td></tr><tr><th id="L3036"><a href="#L3036">3036</a></th><td>        i, j, offset : LONGINT;</td></tr><tr><th id="L3037"><a href="#L3037">3037</a></th><td>        aoc : ARRAY 5 OF CHAR;</td></tr><tr><th id="L3038"><a href="#L3038">3038</a></th><td></td></tr><tr><th id="L3039"><a href="#L3039">3039</a></th><td>        PROCEDURE GetChar(i : LONGINT) : CHAR;</td></tr><tr><th id="L3040"><a href="#L3040">3040</a></th><td>        BEGIN</td></tr><tr><th id="L3041"><a href="#L3041">3041</a></th><td>                IF i = 0 THEN</td></tr><tr><th id="L3042"><a href="#L3042">3042</a></th><td>                        RETURN '0';</td></tr><tr><th id="L3043"><a href="#L3043">3043</a></th><td>                ELSE</td></tr><tr><th id="L3044"><a href="#L3044">3044</a></th><td>                        RETURN CHR(offset+i);</td></tr><tr><th id="L3045"><a href="#L3045">3045</a></th><td>                END;</td></tr><tr><th id="L3046"><a href="#L3046">3046</a></th><td>        END GetChar;</td></tr><tr><th id="L3047"><a href="#L3047">3047</a></th><td></td></tr><tr><th id="L3048"><a href="#L3048">3048</a></th><td>BEGIN</td></tr><tr><th id="L3049"><a href="#L3049">3049</a></th><td>        IF upperCase THEN offset := 64 ELSE offset := 96; END;</td></tr><tr><th id="L3050"><a href="#L3050">3050</a></th><td>        val := val MOD (26*26);</td></tr><tr><th id="L3051"><a href="#L3051">3051</a></th><td>        i := val DIV 26;</td></tr><tr><th id="L3052"><a href="#L3052">3052</a></th><td>        j := val MOD 26;</td></tr><tr><th id="L3053"><a href="#L3053">3053</a></th><td>        IF i = 0 THEN</td></tr><tr><th id="L3054"><a href="#L3054">3054</a></th><td>                aoc := " . ";</td></tr><tr><th id="L3055"><a href="#L3055">3055</a></th><td>                aoc[0] := GetChar(j);</td></tr><tr><th id="L3056"><a href="#L3056">3056</a></th><td>        ELSE</td></tr><tr><th id="L3057"><a href="#L3057">3057</a></th><td>                aoc := "  . ";</td></tr><tr><th id="L3058"><a href="#L3058">3058</a></th><td>                aoc[0] := GetChar(i);</td></tr><tr><th id="L3059"><a href="#L3059">3059</a></th><td>                aoc[1] := GetChar(j);</td></tr><tr><th id="L3060"><a href="#L3060">3060</a></th><td>        END;</td></tr><tr><th id="L3061"><a href="#L3061">3061</a></th><td>        RETURN Strings.NewString(aoc);</td></tr><tr><th id="L3062"><a href="#L3062">3062</a></th><td>END IntToABCString;</td></tr><tr><th id="L3063"><a href="#L3063">3063</a></th><td></td></tr><tr><th id="L3064"><a href="#L3064">3064</a></th><td>PROCEDURE IntToRomanString(val : LONGINT; uppercase : BOOLEAN) : String;</td></tr><tr><th id="L3065"><a href="#L3065">3065</a></th><td>VAR</td></tr><tr><th id="L3066"><a href="#L3066">3066</a></th><td>        dyn : DynamicStrings.DynamicString;</td></tr><tr><th id="L3067"><a href="#L3067">3067</a></th><td>        aoc : ARRAY 3 OF CHAR;</td></tr><tr><th id="L3068"><a href="#L3068">3068</a></th><td>        s : String;</td></tr><tr><th id="L3069"><a href="#L3069">3069</a></th><td>BEGIN</td></tr><tr><th id="L3070"><a href="#L3070">3070</a></th><td>        IF val = 0 THEN RETURN Strings.NewString("0. "); END;</td></tr><tr><th id="L3071"><a href="#L3071">3071</a></th><td>        NEW(dyn);</td></tr><tr><th id="L3072"><a href="#L3072">3072</a></th><td>        WHILE val &gt; 0 DO</td></tr><tr><th id="L3073"><a href="#L3073">3073</a></th><td>                IF val &gt;= 1000 THEN</td></tr><tr><th id="L3074"><a href="#L3074">3074</a></th><td>                        aoc := "M"; dyn.Append(aoc); val := val - 1000;</td></tr><tr><th id="L3075"><a href="#L3075">3075</a></th><td>                ELSIF val &gt;= 900 THEN</td></tr><tr><th id="L3076"><a href="#L3076">3076</a></th><td>                        aoc := "CM"; dyn.Append(aoc); val := val - 900;</td></tr><tr><th id="L3077"><a href="#L3077">3077</a></th><td>                ELSIF val &gt;= 500 THEN</td></tr><tr><th id="L3078"><a href="#L3078">3078</a></th><td>                        aoc := "D"; dyn.Append(aoc); val := val - 500;</td></tr><tr><th id="L3079"><a href="#L3079">3079</a></th><td>                ELSIF val &gt;= 400 THEN</td></tr><tr><th id="L3080"><a href="#L3080">3080</a></th><td>                        aoc := "CD"; dyn.Append(aoc); val := val - 400;</td></tr><tr><th id="L3081"><a href="#L3081">3081</a></th><td>                ELSIF val &gt;= 100 THEN</td></tr><tr><th id="L3082"><a href="#L3082">3082</a></th><td>                        aoc := "C"; dyn.Append(aoc); val := val - 100;</td></tr><tr><th id="L3083"><a href="#L3083">3083</a></th><td>                ELSIF val &gt;= 90 THEN</td></tr><tr><th id="L3084"><a href="#L3084">3084</a></th><td>                        aoc := "XC"; dyn.Append(aoc); val := val - 90;</td></tr><tr><th id="L3085"><a href="#L3085">3085</a></th><td>                ELSIF val &gt;= 50 THEN</td></tr><tr><th id="L3086"><a href="#L3086">3086</a></th><td>                        aoc := "L"; dyn.Append(aoc); val := val - 50;</td></tr><tr><th id="L3087"><a href="#L3087">3087</a></th><td>                ELSIF val &gt;= 40 THEN</td></tr><tr><th id="L3088"><a href="#L3088">3088</a></th><td>                        aoc := "XL"; dyn.Append(aoc); val := val - 40;</td></tr><tr><th id="L3089"><a href="#L3089">3089</a></th><td>                ELSIF val &gt;= 10 THEN</td></tr><tr><th id="L3090"><a href="#L3090">3090</a></th><td>                        aoc := "X"; dyn.Append(aoc); val := val - 10;</td></tr><tr><th id="L3091"><a href="#L3091">3091</a></th><td>                ELSIF val &gt;= 9 THEN</td></tr><tr><th id="L3092"><a href="#L3092">3092</a></th><td>                        aoc := "IX"; dyn.Append(aoc); val := val - 9;</td></tr><tr><th id="L3093"><a href="#L3093">3093</a></th><td>                ELSIF val &gt;= 5 THEN</td></tr><tr><th id="L3094"><a href="#L3094">3094</a></th><td>                        aoc := "V"; dyn.Append(aoc); val := val - 5;</td></tr><tr><th id="L3095"><a href="#L3095">3095</a></th><td>                ELSIF val &gt;= 4 THEN</td></tr><tr><th id="L3096"><a href="#L3096">3096</a></th><td>                        aoc := "IV"; dyn.Append(aoc); val := val - 4;</td></tr><tr><th id="L3097"><a href="#L3097">3097</a></th><td>                ELSIF val &gt;= 1 THEN</td></tr><tr><th id="L3098"><a href="#L3098">3098</a></th><td>                        aoc := "I"; dyn.Append(aoc); val := val - 1;</td></tr><tr><th id="L3099"><a href="#L3099">3099</a></th><td>                END;</td></tr><tr><th id="L3100"><a href="#L3100">3100</a></th><td>        END;</td></tr><tr><th id="L3101"><a href="#L3101">3101</a></th><td>        aoc := ". "; dyn.Append(aoc);</td></tr><tr><th id="L3102"><a href="#L3102">3102</a></th><td>        s := dyn.ToArrOfChar();</td></tr><tr><th id="L3103"><a href="#L3103">3103</a></th><td>        IF ~uppercase THEN Strings.LowerCase(s^); END;</td></tr><tr><th id="L3104"><a href="#L3104">3104</a></th><td>        RETURN s;</td></tr><tr><th id="L3105"><a href="#L3105">3105</a></th><td>END IntToRomanString;</td></tr><tr><th id="L3106"><a href="#L3106">3106</a></th><td></td></tr><tr><th id="L3107"><a href="#L3107">3107</a></th><td>PROCEDURE TransformCharEnt*(in : String) : String;</td></tr><tr><th id="L3108"><a href="#L3108">3108</a></th><td>VAR</td></tr><tr><th id="L3109"><a href="#L3109">3109</a></th><td>        ent : ARRAY 32 OF CHAR;</td></tr><tr><th id="L3110"><a href="#L3110">3110</a></th><td>        i, j : LONGINT;</td></tr><tr><th id="L3111"><a href="#L3111">3111</a></th><td>        rep, s1, s2 : String;</td></tr><tr><th id="L3112"><a href="#L3112">3112</a></th><td>        ds: DynamicStrings.DynamicString;</td></tr><tr><th id="L3113"><a href="#L3113">3113</a></th><td>BEGIN</td></tr><tr><th id="L3114"><a href="#L3114">3114</a></th><td>        i:=0;</td></tr><tr><th id="L3115"><a href="#L3115">3115</a></th><td>        LOOP</td></tr><tr><th id="L3116"><a href="#L3116">3116</a></th><td>                IF in^[i]='&amp;' THEN</td></tr><tr><th id="L3117"><a href="#L3117">3117</a></th><td>                        j:=i+1;</td></tr><tr><th id="L3118"><a href="#L3118">3118</a></th><td>                        LOOP</td></tr><tr><th id="L3119"><a href="#L3119">3119</a></th><td>                                IF j &gt;= LEN(in^)-1 THEN EXIT END;</td></tr><tr><th id="L3120"><a href="#L3120">3120</a></th><td>                                IF in^[j]=';' THEN</td></tr><tr><th id="L3121"><a href="#L3121">3121</a></th><td>                                        Strings.Copy(in^, i+1, j-i-1, ent);</td></tr><tr><th id="L3122"><a href="#L3122">3122</a></th><td>                                        rep := GetCharEnt(ent);</td></tr><tr><th id="L3123"><a href="#L3123">3123</a></th><td>                                        IF rep#NIL THEN</td></tr><tr><th id="L3124"><a href="#L3124">3124</a></th><td>                                                NEW(ds);</td></tr><tr><th id="L3125"><a href="#L3125">3125</a></th><td>                                                ds.FromArrOfChar(in);</td></tr><tr><th id="L3126"><a href="#L3126">3126</a></th><td>                                                s1 := ds.Extract(0, i);</td></tr><tr><th id="L3127"><a href="#L3127">3127</a></th><td>                                                s2 := ds.Extract(j+1, LEN(in^)-j-1);</td></tr><tr><th id="L3128"><a href="#L3128">3128</a></th><td>                                                NEW(ds);</td></tr><tr><th id="L3129"><a href="#L3129">3129</a></th><td>                                                ds.Append(s1^);</td></tr><tr><th id="L3130"><a href="#L3130">3130</a></th><td>                                                ds.Append(rep^);</td></tr><tr><th id="L3131"><a href="#L3131">3131</a></th><td>                                                ds.Append(s2^);</td></tr><tr><th id="L3132"><a href="#L3132">3132</a></th><td>                                                in := ds.ToArrOfChar();</td></tr><tr><th id="L3133"><a href="#L3133">3133</a></th><td>                                                i:=i+LEN(rep^)-2;</td></tr><tr><th id="L3134"><a href="#L3134">3134</a></th><td>                                        END;</td></tr><tr><th id="L3135"><a href="#L3135">3135</a></th><td>                                        EXIT;</td></tr><tr><th id="L3136"><a href="#L3136">3136</a></th><td>                                END;</td></tr><tr><th id="L3137"><a href="#L3137">3137</a></th><td>                                INC(j);</td></tr><tr><th id="L3138"><a href="#L3138">3138</a></th><td>                        END;</td></tr><tr><th id="L3139"><a href="#L3139">3139</a></th><td>                END;</td></tr><tr><th id="L3140"><a href="#L3140">3140</a></th><td>                INC(i);</td></tr><tr><th id="L3141"><a href="#L3141">3141</a></th><td>                IF i&gt;LEN(in^)-3 THEN EXIT END;</td></tr><tr><th id="L3142"><a href="#L3142">3142</a></th><td>        END;</td></tr><tr><th id="L3143"><a href="#L3143">3143</a></th><td>        RETURN in;</td></tr><tr><th id="L3144"><a href="#L3144">3144</a></th><td>END TransformCharEnt;</td></tr><tr><th id="L3145"><a href="#L3145">3145</a></th><td></td></tr><tr><th id="L3146"><a href="#L3146">3146</a></th><td>PROCEDURE GetCharEnt(VAR ent : ARRAY OF CHAR) : String;</td></tr><tr><th id="L3147"><a href="#L3147">3147</a></th><td>VAR</td></tr><tr><th id="L3148"><a href="#L3148">3148</a></th><td>        temp : String;</td></tr><tr><th id="L3149"><a href="#L3149">3149</a></th><td>        aoc : ARRAY 5 OF CHAR;</td></tr><tr><th id="L3150"><a href="#L3150">3150</a></th><td>        res, suc, len : LONGINT;</td></tr><tr><th id="L3151"><a href="#L3151">3151</a></th><td>BEGIN</td></tr><tr><th id="L3152"><a href="#L3152">3152</a></th><td>        res := 0;</td></tr><tr><th id="L3153"><a href="#L3153">3153</a></th><td>        IF ent[0] = '#' THEN</td></tr><tr><th id="L3154"><a href="#L3154">3154</a></th><td>                temp := Strings.Substring2(1, ent);</td></tr><tr><th id="L3155"><a href="#L3155">3155</a></th><td>                IF Strings.Length(temp^) &gt; 0 THEN</td></tr><tr><th id="L3156"><a href="#L3156">3156</a></th><td>                        IF (temp^[0] = 'x') OR (temp^[0] = 'X') THEN</td></tr><tr><th id="L3157"><a href="#L3157">3157</a></th><td>                                temp := Strings.Substring2(1, ent);</td></tr><tr><th id="L3158"><a href="#L3158">3158</a></th><td>                                Strings.HexStrToInt(temp^, res, suc);</td></tr><tr><th id="L3159"><a href="#L3159">3159</a></th><td>                                IF suc # 0 THEN res := 160 END;</td></tr><tr><th id="L3160"><a href="#L3160">3160</a></th><td>                        ELSE</td></tr><tr><th id="L3161"><a href="#L3161">3161</a></th><td>                                Strings.StrToInt(temp^, res);</td></tr><tr><th id="L3162"><a href="#L3162">3162</a></th><td>                        END;</td></tr><tr><th id="L3163"><a href="#L3163">3163</a></th><td>                ELSE</td></tr><tr><th id="L3164"><a href="#L3164">3164</a></th><td>                        res := 160;</td></tr><tr><th id="L3165"><a href="#L3165">3165</a></th><td>                END;</td></tr><tr><th id="L3166"><a href="#L3166">3166</a></th><td>        ELSIF ent = "nbsp" THEN res := 160;</td></tr><tr><th id="L3167"><a href="#L3167">3167</a></th><td>        ELSIF ent = "auml" THEN res := 228;</td></tr><tr><th id="L3168"><a href="#L3168">3168</a></th><td>        ELSIF ent = "ouml" THEN res := 246;</td></tr><tr><th id="L3169"><a href="#L3169">3169</a></th><td>        ELSIF ent = "uuml" THEN res := 252;</td></tr><tr><th id="L3170"><a href="#L3170">3170</a></th><td>        ELSIF ent = "Auml" THEN res := 196;</td></tr><tr><th id="L3171"><a href="#L3171">3171</a></th><td>        ELSIF ent = "Ouml" THEN res := 214;</td></tr><tr><th id="L3172"><a href="#L3172">3172</a></th><td>        ELSIF ent = "Uuml" THEN res := 220;</td></tr><tr><th id="L3173"><a href="#L3173">3173</a></th><td>        ELSIF ent = "quot" THEN res := 34;</td></tr><tr><th id="L3174"><a href="#L3174">3174</a></th><td>        ELSIF ent = "copy" THEN res := 169;</td></tr><tr><th id="L3175"><a href="#L3175">3175</a></th><td>        ELSIF ent = "euro" THEN res := 8364;</td></tr><tr><th id="L3176"><a href="#L3176">3176</a></th><td>        ELSIF ent = "iexcl" THEN res := 161;</td></tr><tr><th id="L3177"><a href="#L3177">3177</a></th><td>        ELSIF ent = "cent" THEN res := 162;</td></tr><tr><th id="L3178"><a href="#L3178">3178</a></th><td>        ELSIF ent = "pound" THEN res := 163;</td></tr><tr><th id="L3179"><a href="#L3179">3179</a></th><td>        ELSIF ent = "curren" THEN res := 164;</td></tr><tr><th id="L3180"><a href="#L3180">3180</a></th><td>        ELSIF ent = "yen" THEN res := 165;</td></tr><tr><th id="L3181"><a href="#L3181">3181</a></th><td>        ELSIF ent = "brvbar" THEN res := 166;</td></tr><tr><th id="L3182"><a href="#L3182">3182</a></th><td>        ELSIF ent = "sect" THEN res := 167;</td></tr><tr><th id="L3183"><a href="#L3183">3183</a></th><td>        ELSIF ent = "uml" THEN res := 168;</td></tr><tr><th id="L3184"><a href="#L3184">3184</a></th><td>        ELSIF ent = "ordf" THEN res := 170;</td></tr><tr><th id="L3185"><a href="#L3185">3185</a></th><td>        ELSIF ent = "laquo" THEN res := 171;</td></tr><tr><th id="L3186"><a href="#L3186">3186</a></th><td>        ELSIF ent = "not" THEN res := 172;</td></tr><tr><th id="L3187"><a href="#L3187">3187</a></th><td>        ELSIF ent = "shy" THEN res := 173;</td></tr><tr><th id="L3188"><a href="#L3188">3188</a></th><td>        ELSIF ent = "reg" THEN res := 174;</td></tr><tr><th id="L3189"><a href="#L3189">3189</a></th><td>        ELSIF ent = "macr" THEN res := 175;</td></tr><tr><th id="L3190"><a href="#L3190">3190</a></th><td>        ELSIF ent = "deg" THEN res := 176;</td></tr><tr><th id="L3191"><a href="#L3191">3191</a></th><td>        ELSIF ent = "plusmn" THEN res := 177;</td></tr><tr><th id="L3192"><a href="#L3192">3192</a></th><td>        ELSIF ent = "sup2" THEN res := 178;</td></tr><tr><th id="L3193"><a href="#L3193">3193</a></th><td>        ELSIF ent = "sup3" THEN res := 179;</td></tr><tr><th id="L3194"><a href="#L3194">3194</a></th><td>        ELSIF ent = "acute" THEN res := 180;</td></tr><tr><th id="L3195"><a href="#L3195">3195</a></th><td>        ELSIF ent = "micro" THEN res := 181;</td></tr><tr><th id="L3196"><a href="#L3196">3196</a></th><td>        ELSIF ent = "para" THEN res := 182;</td></tr><tr><th id="L3197"><a href="#L3197">3197</a></th><td>        ELSIF ent = "middot" THEN res := 183;</td></tr><tr><th id="L3198"><a href="#L3198">3198</a></th><td>        ELSIF ent = "cedil" THEN res := 184;</td></tr><tr><th id="L3199"><a href="#L3199">3199</a></th><td>        ELSIF ent = "sup1" THEN res := 185;</td></tr><tr><th id="L3200"><a href="#L3200">3200</a></th><td>        ELSIF ent = "ordm" THEN res := 186;</td></tr><tr><th id="L3201"><a href="#L3201">3201</a></th><td>        ELSIF ent = "raquo" THEN res := 187;</td></tr><tr><th id="L3202"><a href="#L3202">3202</a></th><td>        ELSIF ent = "frac14" THEN res := 188;</td></tr><tr><th id="L3203"><a href="#L3203">3203</a></th><td>        ELSIF ent = "frac12" THEN res := 189;</td></tr><tr><th id="L3204"><a href="#L3204">3204</a></th><td>        ELSIF ent = "frac34" THEN res := 190;</td></tr><tr><th id="L3205"><a href="#L3205">3205</a></th><td>        ELSIF ent = "iquest" THEN res := 191;</td></tr><tr><th id="L3206"><a href="#L3206">3206</a></th><td>        ELSIF ent = "Agrave" THEN res := 192;</td></tr><tr><th id="L3207"><a href="#L3207">3207</a></th><td>        ELSIF ent = "Aacute" THEN res := 193;</td></tr><tr><th id="L3208"><a href="#L3208">3208</a></th><td>        ELSIF ent = "Acirc" THEN res := 194;</td></tr><tr><th id="L3209"><a href="#L3209">3209</a></th><td>        ELSIF ent = "Atilde" THEN res := 195;</td></tr><tr><th id="L3210"><a href="#L3210">3210</a></th><td>        ELSIF ent = "Aring" THEN res := 197;</td></tr><tr><th id="L3211"><a href="#L3211">3211</a></th><td>        ELSIF ent = "AElig" THEN res := 198;</td></tr><tr><th id="L3212"><a href="#L3212">3212</a></th><td>        ELSIF ent = "Ccedil" THEN res := 199;</td></tr><tr><th id="L3213"><a href="#L3213">3213</a></th><td>        ELSIF ent = "Egrave" THEN res := 200;</td></tr><tr><th id="L3214"><a href="#L3214">3214</a></th><td>        ELSIF ent = "Eacute" THEN res := 201;</td></tr><tr><th id="L3215"><a href="#L3215">3215</a></th><td>        ELSIF ent = "Ecirc" THEN res := 202;</td></tr><tr><th id="L3216"><a href="#L3216">3216</a></th><td>        ELSIF ent = "Euml" THEN res := 203;</td></tr><tr><th id="L3217"><a href="#L3217">3217</a></th><td>        ELSIF ent = "Igrave" THEN res := 204;</td></tr><tr><th id="L3218"><a href="#L3218">3218</a></th><td>        ELSIF ent = "Iacute" THEN res := 205;</td></tr><tr><th id="L3219"><a href="#L3219">3219</a></th><td>        ELSIF ent = "Icirc" THEN res := 206;</td></tr><tr><th id="L3220"><a href="#L3220">3220</a></th><td>        ELSIF ent = "Iuml" THEN res := 207;</td></tr><tr><th id="L3221"><a href="#L3221">3221</a></th><td>        ELSIF ent = "ETH" THEN res := 208;</td></tr><tr><th id="L3222"><a href="#L3222">3222</a></th><td>        ELSIF ent = "Ntilde" THEN res := 209;</td></tr><tr><th id="L3223"><a href="#L3223">3223</a></th><td>        ELSIF ent = "Ograve" THEN res := 210;</td></tr><tr><th id="L3224"><a href="#L3224">3224</a></th><td>        ELSIF ent = "Oacute" THEN res := 211;</td></tr><tr><th id="L3225"><a href="#L3225">3225</a></th><td>        ELSIF ent = "Ocirc" THEN res := 212;</td></tr><tr><th id="L3226"><a href="#L3226">3226</a></th><td>        ELSIF ent = "Otilde" THEN res := 213;</td></tr><tr><th id="L3227"><a href="#L3227">3227</a></th><td>        ELSIF ent = "times" THEN res := 215;</td></tr><tr><th id="L3228"><a href="#L3228">3228</a></th><td>        ELSIF ent = "Oslash" THEN res := 216;</td></tr><tr><th id="L3229"><a href="#L3229">3229</a></th><td>        ELSIF ent = "Ugrave" THEN res := 217;</td></tr><tr><th id="L3230"><a href="#L3230">3230</a></th><td>        ELSIF ent = "Uacute" THEN res := 218;</td></tr><tr><th id="L3231"><a href="#L3231">3231</a></th><td>        ELSIF ent = "Ucirc" THEN res := 219;</td></tr><tr><th id="L3232"><a href="#L3232">3232</a></th><td>        ELSIF ent = "Yacute" THEN res := 221;</td></tr><tr><th id="L3233"><a href="#L3233">3233</a></th><td>        ELSIF ent = "THORN" THEN res := 222;</td></tr><tr><th id="L3234"><a href="#L3234">3234</a></th><td>        ELSIF ent = "szlig" THEN res := 223;</td></tr><tr><th id="L3235"><a href="#L3235">3235</a></th><td>        ELSIF ent = "agrave" THEN res := 224;</td></tr><tr><th id="L3236"><a href="#L3236">3236</a></th><td>        ELSIF ent = "aacute" THEN res := 225;</td></tr><tr><th id="L3237"><a href="#L3237">3237</a></th><td>        ELSIF ent = "acirc" THEN res := 226;</td></tr><tr><th id="L3238"><a href="#L3238">3238</a></th><td>        ELSIF ent = "atilde" THEN res := 227;</td></tr><tr><th id="L3239"><a href="#L3239">3239</a></th><td>        ELSIF ent = "aring" THEN res := 229;</td></tr><tr><th id="L3240"><a href="#L3240">3240</a></th><td>        ELSIF ent = "aelig" THEN res := 230;</td></tr><tr><th id="L3241"><a href="#L3241">3241</a></th><td>        ELSIF ent = "ccedil" THEN res := 231;</td></tr><tr><th id="L3242"><a href="#L3242">3242</a></th><td>        ELSIF ent = "egrave" THEN res := 232;</td></tr><tr><th id="L3243"><a href="#L3243">3243</a></th><td>        ELSIF ent = "eacute" THEN res := 233;</td></tr><tr><th id="L3244"><a href="#L3244">3244</a></th><td>        ELSIF ent = "ecirc" THEN res := 234;</td></tr><tr><th id="L3245"><a href="#L3245">3245</a></th><td>        ELSIF ent = "euml" THEN res := 235;</td></tr><tr><th id="L3246"><a href="#L3246">3246</a></th><td>        ELSIF ent = "igrave" THEN res := 236;</td></tr><tr><th id="L3247"><a href="#L3247">3247</a></th><td>        ELSIF ent = "iacute" THEN res := 237;</td></tr><tr><th id="L3248"><a href="#L3248">3248</a></th><td>        ELSIF ent = "icirc" THEN res := 238;</td></tr><tr><th id="L3249"><a href="#L3249">3249</a></th><td>        ELSIF ent = "iuml" THEN res := 239;</td></tr><tr><th id="L3250"><a href="#L3250">3250</a></th><td>        ELSIF ent = "eth" THEN res := 240;</td></tr><tr><th id="L3251"><a href="#L3251">3251</a></th><td>        ELSIF ent = "ntilde" THEN res := 241;</td></tr><tr><th id="L3252"><a href="#L3252">3252</a></th><td>        ELSIF ent = "ograve" THEN res := 242;</td></tr><tr><th id="L3253"><a href="#L3253">3253</a></th><td>        ELSIF ent = "oacute" THEN res := 243;</td></tr><tr><th id="L3254"><a href="#L3254">3254</a></th><td>        ELSIF ent = "ocirc" THEN res := 244;</td></tr><tr><th id="L3255"><a href="#L3255">3255</a></th><td>        ELSIF ent = "otilde" THEN res := 245;</td></tr><tr><th id="L3256"><a href="#L3256">3256</a></th><td>        ELSIF ent = "divide" THEN res := 247;</td></tr><tr><th id="L3257"><a href="#L3257">3257</a></th><td>        ELSIF ent = "oslash" THEN res := 248;</td></tr><tr><th id="L3258"><a href="#L3258">3258</a></th><td>        ELSIF ent = "ugrave" THEN res := 249;</td></tr><tr><th id="L3259"><a href="#L3259">3259</a></th><td>        ELSIF ent = "uacute" THEN res := 250;</td></tr><tr><th id="L3260"><a href="#L3260">3260</a></th><td>        ELSIF ent = "ucirc" THEN res := 251;</td></tr><tr><th id="L3261"><a href="#L3261">3261</a></th><td>        ELSIF ent = "yacute" THEN res := 253;</td></tr><tr><th id="L3262"><a href="#L3262">3262</a></th><td>        ELSIF ent = "thorn" THEN res := 254;</td></tr><tr><th id="L3263"><a href="#L3263">3263</a></th><td>        ELSIF ent = "yuml" THEN res := 255;</td></tr><tr><th id="L3264"><a href="#L3264">3264</a></th><td>        ELSIF ent = "fnof" THEN res := 402;</td></tr><tr><th id="L3265"><a href="#L3265">3265</a></th><td>        ELSIF ent = "Alpha" THEN res := 913;</td></tr><tr><th id="L3266"><a href="#L3266">3266</a></th><td>        ELSIF ent = "Beta" THEN res := 914;</td></tr><tr><th id="L3267"><a href="#L3267">3267</a></th><td>        ELSIF ent = "Gamma" THEN res := 915;</td></tr><tr><th id="L3268"><a href="#L3268">3268</a></th><td>        ELSIF ent = "Delta" THEN res := 916;</td></tr><tr><th id="L3269"><a href="#L3269">3269</a></th><td>        ELSIF ent = "Epsilon" THEN res := 917;</td></tr><tr><th id="L3270"><a href="#L3270">3270</a></th><td>        ELSIF ent = "Zeta" THEN res := 918;</td></tr><tr><th id="L3271"><a href="#L3271">3271</a></th><td>        ELSIF ent = "Eta" THEN res := 919;</td></tr><tr><th id="L3272"><a href="#L3272">3272</a></th><td>        ELSIF ent = "Theta" THEN res := 920;</td></tr><tr><th id="L3273"><a href="#L3273">3273</a></th><td>        ELSIF ent = "Iota" THEN res := 921;</td></tr><tr><th id="L3274"><a href="#L3274">3274</a></th><td>        ELSIF ent = "Kappa" THEN res := 922;</td></tr><tr><th id="L3275"><a href="#L3275">3275</a></th><td>        ELSIF ent = "Lambda" THEN res := 923;</td></tr><tr><th id="L3276"><a href="#L3276">3276</a></th><td>        ELSIF ent = "Mu" THEN res := 924;</td></tr><tr><th id="L3277"><a href="#L3277">3277</a></th><td>        ELSIF ent = "Nu" THEN res := 925;</td></tr><tr><th id="L3278"><a href="#L3278">3278</a></th><td>        ELSIF ent = "Xi" THEN res := 926;</td></tr><tr><th id="L3279"><a href="#L3279">3279</a></th><td>        ELSIF ent = "Omicron" THEN res := 927;</td></tr><tr><th id="L3280"><a href="#L3280">3280</a></th><td>        ELSIF ent = "Pi" THEN res := 928;</td></tr><tr><th id="L3281"><a href="#L3281">3281</a></th><td>        ELSIF ent = "Rho" THEN res := 929;</td></tr><tr><th id="L3282"><a href="#L3282">3282</a></th><td>        ELSIF ent = "Sigma" THEN res := 931;</td></tr><tr><th id="L3283"><a href="#L3283">3283</a></th><td>        ELSIF ent = "Tau" THEN res := 932;</td></tr><tr><th id="L3284"><a href="#L3284">3284</a></th><td>        ELSIF ent = "Upsilon" THEN res := 933;</td></tr><tr><th id="L3285"><a href="#L3285">3285</a></th><td>        ELSIF ent = "Phi" THEN res := 934;</td></tr><tr><th id="L3286"><a href="#L3286">3286</a></th><td>        ELSIF ent = "Chi" THEN res := 935;</td></tr><tr><th id="L3287"><a href="#L3287">3287</a></th><td>        ELSIF ent = "Psi" THEN res := 936;</td></tr><tr><th id="L3288"><a href="#L3288">3288</a></th><td>        ELSIF ent = "Omega" THEN res := 937;</td></tr><tr><th id="L3289"><a href="#L3289">3289</a></th><td>        ELSIF ent = "alpha" THEN res := 945;</td></tr><tr><th id="L3290"><a href="#L3290">3290</a></th><td>        ELSIF ent = "beta" THEN res := 946;</td></tr><tr><th id="L3291"><a href="#L3291">3291</a></th><td>        ELSIF ent = "gamma" THEN res := 947;</td></tr><tr><th id="L3292"><a href="#L3292">3292</a></th><td>        ELSIF ent = "delta" THEN res := 948;</td></tr><tr><th id="L3293"><a href="#L3293">3293</a></th><td>        ELSIF ent = "epsilon" THEN res := 949;</td></tr><tr><th id="L3294"><a href="#L3294">3294</a></th><td>        ELSIF ent = "zeta" THEN res := 950;</td></tr><tr><th id="L3295"><a href="#L3295">3295</a></th><td>        ELSIF ent = "eta" THEN res := 951;</td></tr><tr><th id="L3296"><a href="#L3296">3296</a></th><td>        ELSIF ent = "theta" THEN res := 952;</td></tr><tr><th id="L3297"><a href="#L3297">3297</a></th><td>        ELSIF ent = "iota" THEN res := 953;</td></tr><tr><th id="L3298"><a href="#L3298">3298</a></th><td>        ELSIF ent = "kappa" THEN res := 954;</td></tr><tr><th id="L3299"><a href="#L3299">3299</a></th><td>        ELSIF ent = "lambda" THEN res := 955;</td></tr><tr><th id="L3300"><a href="#L3300">3300</a></th><td>        ELSIF ent = "mu" THEN res := 956;</td></tr><tr><th id="L3301"><a href="#L3301">3301</a></th><td>        ELSIF ent = "nu" THEN res := 957;</td></tr><tr><th id="L3302"><a href="#L3302">3302</a></th><td>        ELSIF ent = "xi" THEN res := 958;</td></tr><tr><th id="L3303"><a href="#L3303">3303</a></th><td>        ELSIF ent = "omicron" THEN res := 959;</td></tr><tr><th id="L3304"><a href="#L3304">3304</a></th><td>        ELSIF ent = "pi" THEN res := 960;</td></tr><tr><th id="L3305"><a href="#L3305">3305</a></th><td>        ELSIF ent = "rho" THEN res := 961;</td></tr><tr><th id="L3306"><a href="#L3306">3306</a></th><td>        ELSIF ent = "sigmaf" THEN res := 962;</td></tr><tr><th id="L3307"><a href="#L3307">3307</a></th><td>        ELSIF ent = "sigma" THEN res := 963;</td></tr><tr><th id="L3308"><a href="#L3308">3308</a></th><td>        ELSIF ent = "tau" THEN res := 964;</td></tr><tr><th id="L3309"><a href="#L3309">3309</a></th><td>        ELSIF ent = "upsilon" THEN res := 965;</td></tr><tr><th id="L3310"><a href="#L3310">3310</a></th><td>        ELSIF ent = "phi" THEN res := 966;</td></tr><tr><th id="L3311"><a href="#L3311">3311</a></th><td>        ELSIF ent = "chi" THEN res := 967;</td></tr><tr><th id="L3312"><a href="#L3312">3312</a></th><td>        ELSIF ent = "psi" THEN res := 968;</td></tr><tr><th id="L3313"><a href="#L3313">3313</a></th><td>        ELSIF ent = "omega" THEN res := 969;</td></tr><tr><th id="L3314"><a href="#L3314">3314</a></th><td>        ELSIF ent = "thetasym" THEN res := 977;</td></tr><tr><th id="L3315"><a href="#L3315">3315</a></th><td>        ELSIF ent = "upsih" THEN res := 978;</td></tr><tr><th id="L3316"><a href="#L3316">3316</a></th><td>        ELSIF ent = "piv" THEN res := 982;</td></tr><tr><th id="L3317"><a href="#L3317">3317</a></th><td>        ELSIF ent = "bull" THEN res := 8226;</td></tr><tr><th id="L3318"><a href="#L3318">3318</a></th><td>        ELSIF ent = "hellip" THEN res := 8230;</td></tr><tr><th id="L3319"><a href="#L3319">3319</a></th><td>        ELSIF ent = "prime" THEN res := 8242;</td></tr><tr><th id="L3320"><a href="#L3320">3320</a></th><td>        ELSIF ent = "Prime" THEN res := 8243;</td></tr><tr><th id="L3321"><a href="#L3321">3321</a></th><td>        ELSIF ent = "oline" THEN res := 8254;</td></tr><tr><th id="L3322"><a href="#L3322">3322</a></th><td>        ELSIF ent = "frasl" THEN res := 8260;</td></tr><tr><th id="L3323"><a href="#L3323">3323</a></th><td>        ELSIF ent = "weierp" THEN res := 8472;</td></tr><tr><th id="L3324"><a href="#L3324">3324</a></th><td>        ELSIF ent = "image" THEN res := 8465;</td></tr><tr><th id="L3325"><a href="#L3325">3325</a></th><td>        ELSIF ent = "real" THEN res := 8476;</td></tr><tr><th id="L3326"><a href="#L3326">3326</a></th><td>        ELSIF ent = "trade" THEN res := 8482;</td></tr><tr><th id="L3327"><a href="#L3327">3327</a></th><td>        ELSIF ent = "alefsym" THEN res := 8501;</td></tr><tr><th id="L3328"><a href="#L3328">3328</a></th><td>        ELSIF ent = "larr" THEN res := 8592;</td></tr><tr><th id="L3329"><a href="#L3329">3329</a></th><td>        ELSIF ent = "uarr" THEN res := 8593;</td></tr><tr><th id="L3330"><a href="#L3330">3330</a></th><td>        ELSIF ent = "rarr" THEN res := 8594;</td></tr><tr><th id="L3331"><a href="#L3331">3331</a></th><td>        ELSIF ent = "darr" THEN res := 8595;</td></tr><tr><th id="L3332"><a href="#L3332">3332</a></th><td>        ELSIF ent = "harr" THEN res := 8596;</td></tr><tr><th id="L3333"><a href="#L3333">3333</a></th><td>        ELSIF ent = "crarr" THEN res := 8629;</td></tr><tr><th id="L3334"><a href="#L3334">3334</a></th><td>        ELSIF ent = "lArr" THEN res := 8656;</td></tr><tr><th id="L3335"><a href="#L3335">3335</a></th><td>        ELSIF ent = "uArr" THEN res := 8657;</td></tr><tr><th id="L3336"><a href="#L3336">3336</a></th><td>        ELSIF ent = "rArr" THEN res := 8658;</td></tr><tr><th id="L3337"><a href="#L3337">3337</a></th><td>        ELSIF ent = "dArr" THEN res := 8659;</td></tr><tr><th id="L3338"><a href="#L3338">3338</a></th><td>        ELSIF ent = "hArr" THEN res := 8660;</td></tr><tr><th id="L3339"><a href="#L3339">3339</a></th><td>        ELSIF ent = "forall" THEN res := 8704;</td></tr><tr><th id="L3340"><a href="#L3340">3340</a></th><td>        ELSIF ent = "part" THEN res := 8706;</td></tr><tr><th id="L3341"><a href="#L3341">3341</a></th><td>        ELSIF ent = "exist" THEN res := 8707;</td></tr><tr><th id="L3342"><a href="#L3342">3342</a></th><td>        ELSIF ent = "empty" THEN res := 8709;</td></tr><tr><th id="L3343"><a href="#L3343">3343</a></th><td>        ELSIF ent = "nabla" THEN res := 8711;</td></tr><tr><th id="L3344"><a href="#L3344">3344</a></th><td>        ELSIF ent = "isin" THEN res := 8712;</td></tr><tr><th id="L3345"><a href="#L3345">3345</a></th><td>        ELSIF ent = "notin" THEN res := 8713;</td></tr><tr><th id="L3346"><a href="#L3346">3346</a></th><td>        ELSIF ent = "ni" THEN res := 8715;</td></tr><tr><th id="L3347"><a href="#L3347">3347</a></th><td>        ELSIF ent = "prod" THEN res := 8719;</td></tr><tr><th id="L3348"><a href="#L3348">3348</a></th><td>        ELSIF ent = "sum" THEN res := 8721;</td></tr><tr><th id="L3349"><a href="#L3349">3349</a></th><td>        ELSIF ent = "minus" THEN res := 8722;</td></tr><tr><th id="L3350"><a href="#L3350">3350</a></th><td>        ELSIF ent = "lowast" THEN res := 8727;</td></tr><tr><th id="L3351"><a href="#L3351">3351</a></th><td>        ELSIF ent = "radic" THEN res := 8730;</td></tr><tr><th id="L3352"><a href="#L3352">3352</a></th><td>        ELSIF ent = "prop" THEN res := 8733;</td></tr><tr><th id="L3353"><a href="#L3353">3353</a></th><td>        ELSIF ent = "infin" THEN res := 8734;</td></tr><tr><th id="L3354"><a href="#L3354">3354</a></th><td>        ELSIF ent = "ang" THEN res := 8736;</td></tr><tr><th id="L3355"><a href="#L3355">3355</a></th><td>        ELSIF ent = "and" THEN res := 8743;</td></tr><tr><th id="L3356"><a href="#L3356">3356</a></th><td>        ELSIF ent = "or" THEN res := 8744;</td></tr><tr><th id="L3357"><a href="#L3357">3357</a></th><td>        ELSIF ent = "cap" THEN res := 8745;</td></tr><tr><th id="L3358"><a href="#L3358">3358</a></th><td>        ELSIF ent = "cup" THEN res := 8746;</td></tr><tr><th id="L3359"><a href="#L3359">3359</a></th><td>        ELSIF ent = "int" THEN res := 8747;</td></tr><tr><th id="L3360"><a href="#L3360">3360</a></th><td>        ELSIF ent = "there4" THEN res := 8756;</td></tr><tr><th id="L3361"><a href="#L3361">3361</a></th><td>        ELSIF ent = "sim" THEN res := 8764;</td></tr><tr><th id="L3362"><a href="#L3362">3362</a></th><td>        ELSIF ent = "cong" THEN res := 8773;</td></tr><tr><th id="L3363"><a href="#L3363">3363</a></th><td>        ELSIF ent = "asymp" THEN res := 8776;</td></tr><tr><th id="L3364"><a href="#L3364">3364</a></th><td>        ELSIF ent = "ne" THEN res := 8800;</td></tr><tr><th id="L3365"><a href="#L3365">3365</a></th><td>        ELSIF ent = "equiv" THEN res := 8801;</td></tr><tr><th id="L3366"><a href="#L3366">3366</a></th><td>        ELSIF ent = "le" THEN res := 8804;</td></tr><tr><th id="L3367"><a href="#L3367">3367</a></th><td>        ELSIF ent = "ge" THEN res := 8805;</td></tr><tr><th id="L3368"><a href="#L3368">3368</a></th><td>        ELSIF ent = "sub" THEN res := 8834;</td></tr><tr><th id="L3369"><a href="#L3369">3369</a></th><td>        ELSIF ent = "sup" THEN res := 8835;</td></tr><tr><th id="L3370"><a href="#L3370">3370</a></th><td>        ELSIF ent = "nsub" THEN res := 8836;</td></tr><tr><th id="L3371"><a href="#L3371">3371</a></th><td>        ELSIF ent = "sube" THEN res := 8838;</td></tr><tr><th id="L3372"><a href="#L3372">3372</a></th><td>        ELSIF ent = "supe" THEN res := 8839;</td></tr><tr><th id="L3373"><a href="#L3373">3373</a></th><td>        ELSIF ent = "oplus" THEN res := 8853;</td></tr><tr><th id="L3374"><a href="#L3374">3374</a></th><td>        ELSIF ent = "otimes" THEN res := 8855;</td></tr><tr><th id="L3375"><a href="#L3375">3375</a></th><td>        ELSIF ent = "perp" THEN res := 8869;</td></tr><tr><th id="L3376"><a href="#L3376">3376</a></th><td>        ELSIF ent = "sdot" THEN res := 8901;</td></tr><tr><th id="L3377"><a href="#L3377">3377</a></th><td>        ELSIF ent = "lceil" THEN res := 8968;</td></tr><tr><th id="L3378"><a href="#L3378">3378</a></th><td>        ELSIF ent = "rceil" THEN res := 8969;</td></tr><tr><th id="L3379"><a href="#L3379">3379</a></th><td>        ELSIF ent = "lfloor" THEN res := 8970;</td></tr><tr><th id="L3380"><a href="#L3380">3380</a></th><td>        ELSIF ent = "rfloor" THEN res := 8971;</td></tr><tr><th id="L3381"><a href="#L3381">3381</a></th><td>        ELSIF ent = "lang" THEN res := 9001;</td></tr><tr><th id="L3382"><a href="#L3382">3382</a></th><td>        ELSIF ent = "rang" THEN res := 9002;</td></tr><tr><th id="L3383"><a href="#L3383">3383</a></th><td>        ELSIF ent = "loz" THEN res := 9674;</td></tr><tr><th id="L3384"><a href="#L3384">3384</a></th><td>        ELSIF ent = "spades" THEN res := 9824;</td></tr><tr><th id="L3385"><a href="#L3385">3385</a></th><td>        ELSIF ent = "clubs" THEN res := 9827;</td></tr><tr><th id="L3386"><a href="#L3386">3386</a></th><td>        ELSIF ent = "hearts" THEN res := 9829;</td></tr><tr><th id="L3387"><a href="#L3387">3387</a></th><td>        ELSIF ent = "diams" THEN res := 9830;</td></tr><tr><th id="L3388"><a href="#L3388">3388</a></th><td>        ELSIF ent = "amp" THEN res := 38;</td></tr><tr><th id="L3389"><a href="#L3389">3389</a></th><td>        ELSIF ent = "lt" THEN res := 60;</td></tr><tr><th id="L3390"><a href="#L3390">3390</a></th><td>        ELSIF ent = "gt" THEN res := 62;</td></tr><tr><th id="L3391"><a href="#L3391">3391</a></th><td>        ELSIF ent = "OElig" THEN res := 338;</td></tr><tr><th id="L3392"><a href="#L3392">3392</a></th><td>        ELSIF ent = "oelig" THEN res := 339;</td></tr><tr><th id="L3393"><a href="#L3393">3393</a></th><td>        ELSIF ent = "Scaron" THEN res := 352;</td></tr><tr><th id="L3394"><a href="#L3394">3394</a></th><td>        ELSIF ent = "scaron" THEN res := 353;</td></tr><tr><th id="L3395"><a href="#L3395">3395</a></th><td>        ELSIF ent = "Yuml" THEN res := 376;</td></tr><tr><th id="L3396"><a href="#L3396">3396</a></th><td>        ELSIF ent = "circ" THEN res := 710;</td></tr><tr><th id="L3397"><a href="#L3397">3397</a></th><td>        ELSIF ent = "tilde" THEN res := 732;</td></tr><tr><th id="L3398"><a href="#L3398">3398</a></th><td>        ELSIF ent = "ensp" THEN res := 8194;</td></tr><tr><th id="L3399"><a href="#L3399">3399</a></th><td>        ELSIF ent = "emsp" THEN res := 8195;</td></tr><tr><th id="L3400"><a href="#L3400">3400</a></th><td>        ELSIF ent = "thinsp" THEN res := 8201;</td></tr><tr><th id="L3401"><a href="#L3401">3401</a></th><td>        ELSIF ent = "zwnj" THEN res := 8204;</td></tr><tr><th id="L3402"><a href="#L3402">3402</a></th><td>        ELSIF ent = "zwj" THEN res := 8205;</td></tr><tr><th id="L3403"><a href="#L3403">3403</a></th><td>        ELSIF ent = "lrm" THEN res := 8206;</td></tr><tr><th id="L3404"><a href="#L3404">3404</a></th><td>        ELSIF ent = "rlm" THEN res := 8207;</td></tr><tr><th id="L3405"><a href="#L3405">3405</a></th><td>        ELSIF ent = "ndash" THEN res := 8211;</td></tr><tr><th id="L3406"><a href="#L3406">3406</a></th><td>        ELSIF ent = "mdash" THEN res := 8212;</td></tr><tr><th id="L3407"><a href="#L3407">3407</a></th><td>        ELSIF ent = "lsquo" THEN res := 8216;</td></tr><tr><th id="L3408"><a href="#L3408">3408</a></th><td>        ELSIF ent = "rsquo" THEN res := 8217;</td></tr><tr><th id="L3409"><a href="#L3409">3409</a></th><td>        ELSIF ent = "sbquo" THEN res := 8218;</td></tr><tr><th id="L3410"><a href="#L3410">3410</a></th><td>        ELSIF ent = "ldquo" THEN res := 8220;</td></tr><tr><th id="L3411"><a href="#L3411">3411</a></th><td>        ELSIF ent = "rdquo" THEN res := 8221;</td></tr><tr><th id="L3412"><a href="#L3412">3412</a></th><td>        ELSIF ent = "bdquo" THEN res := 8222;</td></tr><tr><th id="L3413"><a href="#L3413">3413</a></th><td>        ELSIF ent = "dagger" THEN res := 8224;</td></tr><tr><th id="L3414"><a href="#L3414">3414</a></th><td>        ELSIF ent = "Dagger" THEN res := 8225;</td></tr><tr><th id="L3415"><a href="#L3415">3415</a></th><td>        ELSIF ent = "permil" THEN res := 8240;</td></tr><tr><th id="L3416"><a href="#L3416">3416</a></th><td>        ELSIF ent = "lsaquo" THEN res := 8249;</td></tr><tr><th id="L3417"><a href="#L3417">3417</a></th><td>        ELSIF ent = "rsaquo" THEN res := 8250;</td></tr><tr><th id="L3418"><a href="#L3418">3418</a></th><td>        ELSE RETURN NIL;</td></tr><tr><th id="L3419"><a href="#L3419">3419</a></th><td>        END;</td></tr><tr><th id="L3420"><a href="#L3420">3420</a></th><td></td></tr><tr><th id="L3421"><a href="#L3421">3421</a></th><td>        IF UTF8Strings.EncodeChar(res, aoc, len) THEN</td></tr><tr><th id="L3422"><a href="#L3422">3422</a></th><td>                RETURN Strings.NewString(aoc);</td></tr><tr><th id="L3423"><a href="#L3423">3423</a></th><td>        ELSE</td></tr><tr><th id="L3424"><a href="#L3424">3424</a></th><td>                RETURN Strings.NewString("*");</td></tr><tr><th id="L3425"><a href="#L3425">3425</a></th><td>        END;</td></tr><tr><th id="L3426"><a href="#L3426">3426</a></th><td>END GetCharEnt;</td></tr><tr><th id="L3427"><a href="#L3427">3427</a></th><td></td></tr><tr><th id="L3428"><a href="#L3428">3428</a></th><td>BEGIN</td></tr><tr><th id="L3429"><a href="#L3429">3429</a></th><td>        IF FontExists(defSerif) THEN serif := defSerif; ELSE serif := defaultFont END;</td></tr><tr><th id="L3430"><a href="#L3430">3430</a></th><td>        IF FontExists(defSansSerif) THEN sansSerif := defSansSerif; ELSE sansSerif := defaultFont END;</td></tr><tr><th id="L3431"><a href="#L3431">3431</a></th><td>        IF FontExists(defCursive) THEN cursive := defCursive; ELSE cursive := defaultFont END;</td></tr><tr><th id="L3432"><a href="#L3432">3432</a></th><td>        IF FontExists(defFantasy) THEN fantasy := defFantasy; ELSE fantasy := defaultFont END;</td></tr><tr><th id="L3433"><a href="#L3433">3433</a></th><td>        IF FontExists(defMonospace) THEN monospace := defMonospace; ELSE monospace := defaultFont END;</td></tr><tr><th id="L3434"><a href="#L3434">3434</a></th><td>END HTMLTransformer.</td></tr></tbody></table>

      </div>
      <div id="help"><strong>Hinweis:</strong> Hilfe zum Repository-Browser finden Sie in <a href="/trac/lecturers/a2/wiki/TracBrowser">TracBrowser</a>.</div>
      <div id="anydiff">
        <form action="/trac/lecturers/a2/diff" method="get">
          <div class="buttons">
            <input type="hidden" name="new_path" value="/trunk/source/HTMLTransformer.Mod" />
            <input type="hidden" name="old_path" value="/trunk/source/HTMLTransformer.Mod" />
            <input type="hidden" name="new_rev" />
            <input type="hidden" name="old_rev" />
            <input type="submit" value="Änderungen anzeigen..." title="Pfade und Revisionen für Diff auswählen" />
          </div>
        </form>
      </div>
    </div>
    <div id="altlinks">
      <h3>In anderen Formaten herunterladen:</h3>
      <ul>
        <li class="first">
          <a rel="nofollow" href="/trac/lecturers/a2/browser/trunk/source/HTMLTransformer.Mod?format=txt">Reiner Text</a>
        </li><li class="last">
          <a rel="nofollow" href="/trac/lecturers/a2/export/7648/trunk/source/HTMLTransformer.Mod">Ursprüngliches Format</a>
        </li>
      </ul>
    </div>
      </div>
   </div><!-- *** END contentblock div -->
      <!-- ############################################################################ --><!-- START footer -->
      <div class="clearboth">
         
      </div>
<div class="clearboth"> </div>
<div class="footerblock">
  <div class="footerline">
    <div class="footertext">
      © <a class="path" href="http://www.ethz.ch/">2005 ETH Zürich</a> | <a class="path" href="/trac/lecturers/a2/wiki/Imprint">Imprint</a> | 26.09.2007 | Version 0.12.5
    </div>
    <div class="footerwologo">
       <a href="http://trac.edgewall.org/"><img alt="Edgewall Trac" border="0" src="/trac/lecturers/a2/chrome/images/footer_poweredbytrac.png" /></a>
       <a href="http://www.isg.inf.ethz.ch/"><img alt="isginf" border="0" src="/trac/lecturers/a2/chrome/images/footer_brickedbyisginf.png" /></a>
    </div>
  </div>
</div>
<!-- END footer -->
<!-- START page top icon -->
<div id="pagetop">
   <a href="#top"><img border="0" src="/trac/lecturers/a2/chrome/images/top/top_c020.gif" alt="top" /></a>
</div>
<!-- END page top icon -->
</div><!-- ** END margins div-->
  </body>
</html>